<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HIE.Framework.Diagnostics.Log</name>
    </assembly>
    <members>
        <member name="T:HIE.Framework.Diagnostics.Log.DatabaseLogView">
             <summary>
             데이터베이스 로그 데이터를 가져와서 로그에 담아서 나타낸다.
             </summary>
             <remarks>
             <c>DatabaseLogView</c>는 데이터베이스를 연결하여 시스템의 로그를 가져오는 방식입니다.
             SQL Server 버전은 2000, 2005, 2008 을 지원합니다.
             </remarks>
             <example>
             다음 코드 예제에서는 SQL Server 2005 에 로그를 가져와서 결과를 출력합니다.
             <code>
             using System;
             using System.Collections.Generic;
             using System.Text;
             using HIE.Framework.Data;
             
             class DatabaseLogViewSample
             {
                 static void Main()
                 {
                     try
                     {
                         string ConnectionString = "Data Source=localhost;Initial Catalog=master;User ID=user;Password=pass";
                         
                         HIE.Framework.Diagnostics.Log.DatabaseLogView dblog = new HIE.Framework.Diagnostics.Log.DatabaseLogView();
                         LogMessage[] msges = dblog.Load(ConnectionString, DatabaseLogType.MSSQL2005);
            
                         foreach (LogMessage curMsg in msges)
                             Console.WriteLine(curMsg.ToString());
                     }
                     catch (Exception ex)
                     {
                         Console.WriteLine(string.Format("Error: {0}", ex.Message));
                     }  
                 }
             }
             </code>
             다음 코드 예제에서는 SQL Server 2005 에 로그를 비동기방식으로 가져와서 결과를 출력합니다.
             <code>
             using System;
             using System.Collections.Generic;
             using System.Text;
             using HIE.Framework.Data;
             
             class DatabaseLogViewSample
             {
                 static void Main()
                 {
                     string ConnectionString = "Data Source=localhost;Initial Catalog=master;User ID=user;Password=pass";
                         
                     HIE.Framework.Diagnostics.Log.DatabaseLogView dblog = new DatabaseLogView();
                      
                     AsyncCallback callback = new AsyncCallback(dbLoges_LoadedMessages);
                     IAsyncResult result = dblog.BeginLoad(ConnectionString, DatabaseLogType.MSSQL2005, callback);
                     
                     Console.WriteLine("Wait!");
                     Console.ReadLine();
                 }
             
                 static void dbLoges_LoadedMessages(IAsyncResult result)
                 {            
                     AsyncDatabaseLogLoadingCaller loader = result.AsyncState as AsyncDatabaseLogLoadingCaller;
                     LogMessage[] messages = loader.EndInvoke(result);
                     foreach (LogMessage curMsg in messages)
                         Console.WriteLine(curMsg.ToString());
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.DatabaseLogView._LogDate">
            <summary>
            LogDate 로그일자 필드명
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.DatabaseLogView._ProcessInfo">
            <summary>
            ProcessInfo 프로세스정보 필드명
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.DatabaseLogView._Text">
            <summary>
            Text 내용 필드명
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.DatabaseLogView.Load(System.String,HIE.Framework.Diagnostics.Log.DatabaseLogType)">
            <summary>
            데이터베이스 타입에 맞는 로그 데이터를 읽어 로그에 담에 보여준다.
            </summary>
            <param name="ConnectionString">데이터베이스 연결정보(데이터베이스:master, 계정:admin권한)</param>
            <param name="type">데이터베이스 타입(MSSQL2000, MSSQL2005, MSSQL2008)</param>
            <returns>로그 데이터를 읽어 담겨진 로그반환한다.</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.DatabaseLogView.BeginLoad(System.String,HIE.Framework.Diagnostics.Log.DatabaseLogType)">
            <summary>
            데이터베이스 타입에 맞는 로그 데이터를 비동기로 읽어 들입니다.
            </summary>
            <param name="ConnectionString">데이터베이스 연결정보(데이터베이스:master, 계정:admin권한)</param>
            <param name="type">데이터베이스 타입(MSSQL2000, MSSQL2005, MSSQL2008)</param>
            <returns>비동기 작업 결과</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.DatabaseLogView.BeginLoad(System.String,HIE.Framework.Diagnostics.Log.DatabaseLogType,System.AsyncCallback)">
            <summary>
            데이터베이스 타입에 맞는 로그 데이터를 비동기로 읽어 들입니다.
            </summary>
            <param name="ConnectionString">데이터베이스 연결정보(데이터베이스:master, 계정:admin권한)</param>
            <param name="type">데이터베이스 타입(MSSQL2000, MSSQL2005, MSSQL2008)</param>
            <param name="callback">
            콜백 대리자가 필요한 경우 대리자를 내부적으로 호출합니다.
            </param>
            <returns>비동기 작업 결과</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.DatabaseLogView.EndLoad(System.IAsyncResult)">
            <summary>
            전달된 <see cref="T:System.IAsyncResult"/>가 나타내는 반환값을 검색하여
            로그 데이터를 읽는 작업을 마무리합니다.
            </summary>
            <param name="result">비동기 작업 결과</param>
            <returns>로그 데이터를 읽어 담겨진 로그</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.DatabaseLogView.ConvertSQL2000(System.Data.DataTable)">
            <summary>
            MS SQL 2000 로그 데이터를 MS SQL 2005 로그 데이터와 같은 형식으로 전환한다.
            </summary>
            <param name="logdt">MSSQL2000 로그 데이터테이블</param>
            <returns>전환한 데이터테이블 반환한다.</returns>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.DatabaseLogViewType">
            <summary>
            데이터베이스 타입에 해당하는 기본 이름을 반환합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.DatabaseLogViewType.GetDatabaseType(HIE.Framework.Diagnostics.Log.DatabaseLogType)">
            <summary>
            <see cref="T:HIE.Framework.Diagnostics.Log.DatabaseLogViewType"/> 데이터베이스 타입에 해당하는 기본 이름을 반환합니다.
            </summary>
            <param name="type">데이터베이스 타입 열거형</param>
            <returns>데이터베이스 이름</returns>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.DatabaseLogWriter">
             <summary>
             로그 데이터를 데이터베이스에 기록합니다.
             </summary>
             <remarks>
             <para>
             DatabaseLogWriter를 사용하여 로그 정보를 기록하는 방식도 다른 기록기와 마찬가지로 LogMessage를 사용합니다.
             그러나 다른 기록기와 다리 LogMessage의 정보가 적절한 로그 테이블에 기록이 되기 위해서는 테이블 스키마와 로그 정보가 일치해야 합니다.
             </para>
             <para>
             그런 까닭에 LogMessage의 Add인자로 주어지는 키 값은 실제 데이터베이스 테이블의 Column명과 일치를 하거나 
             INSERT 쿼리의 파라미터와 동일해야 합니다.
             </para>
             </remarks>
             <example>
             <code>                
             HIE.Framework.Data.Database db = new HIE.Framework.Data.Database(dbConf.ConnectionString, "@", dbConf.DatabaseType);
            
             DatabaseLogWriter dbLogger = new DatabaseLogWriter();
             // Database 인스턴스를 지정합니다.
             dbLogger.Database = db;
             dbLogger.CommandType = CommandType.Text;
             dbLogger.CommandText = "INSERT INTO TB_HEROES_LOG VALUES(@Date, @Type, @Message)";
            
             LogMessage msg = new LogMessage();
             // 각각의 키 값들은 적용할 SQL 쿼리의 파라미터 키 값과 동일해야 합니다.
             msg.Add("Date", DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss"));
             msg.Add("Type", LogType.Error.ToString());
             msg.Add("Message", "This message was written on the database.");
            
             // 로그를 기록합니다.
             dbLogger.WriteLog(msg);
            
             </code>
             </example>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.ILogWriter">
            <summary>
            로그를 기록하기 위해 필요한 요소들을 정의합니다.
            </summary>    
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.ILogWriter.WriteLog(HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            로그를 기록합니다.
            </summary>
            <param name="message">
            로그 정보를 가지고 있는 <see cref="T:HIE.Framework.Diagnostics.Log.LogMessage"/> 인스턴스입니다.
            </param>
            <returns>로그 기록 여부를 반환합니다.</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.ILogWriter.Close">
            <summary>
            로그 기록에 사용된 리소스가 있다면 해당 리소스를 해지합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.DatabaseLogWriter.#ctor">
            <summary>
            기본 생성자입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.DatabaseLogWriter.BuildPack(HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            <see cref="T:HIE.Framework.Diagnostics.Log.LogMessage"/>
            <c>HIE.Framework.Diagnostics.Log.LogMessage</c> 개체를 데이터베이스에 저장할 수 있도록
            파라미터 팩으로 변경합니다.
            </summary>
            <param name="message">로그 메시지</param>
            <returns>파라미터 팩</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.DatabaseLogWriter.WriteLog(HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            데이터베이스에 로그를 기록합니다.
            </summary>
            <param name="message">로그 메시지</param>        
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.DatabaseLogWriter.Close">
            <summary>
            데이터베이스 관련 리소스를 모두 해지합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.DatabaseLogWriter.Database">
            <summary>
            로그 정보를 기록할 Database를 가져 오거나 설정 합니다.
            </summary>        
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.DatabaseLogWriter.CommandText">
            <summary>
            저장에 사용되는 쿼리 입니다.
            </summary>        
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.DatabaseLogWriter.CommandType">
            <summary>
            저장에 사용되는 쿼리의 명령 타입 입니다.
            </summary>        
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.DatabaseLogWriter.IsClosingAfterLogging">
            <summary>
            커넥션 연결 종료 여부를 가져오거나 설정합니다.
            </summary>
            <value>
            기본값은 false입니다. true이면 <c>WriteLog</c> 메소드 호출 후에 바로 연결이 닫힙니다.
            </value>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.EmailLogConfiguration">
            <summary>
            Email 기반 로그 환경 설정 요소
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.KEY_SERVER">
            <summary>
            KEY_SERVER = server
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.KEY_PORT">
            <summary>
            KEY_PORT = port
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.KEY_FROMADDR">
            <summary>
            KEY_FROMADDR = fromAddress
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.KEY_FROMNAME">
            <summary>
            KEY_FROMNAME = fromName
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.KEY_USEHTML">
            <summary>
            KEY_USEHTML = useHtml
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.KEY_CREDACCOUNT">
            <summary>
            KEY_CREDACCOUNT = credAccount
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.KEY_CREDPWD">
            <summary>
            KEY_CREDPWD = credPassword
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.KEY_RECV">
            <summary>
            KEY_RECV = Receivers
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.#ctor">
            <summary>
            EmailLogConfiguration를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.#ctor(System.String)">
            <summary>
            EmailLogConfiguration를 생성합니다.
            </summary>
            <param name="name">키(이름)</param>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.Server">
            <summary>
            메일 서버 주소를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.Port">
            <summary>
            메일 서버 포트 번호를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.FromAddress">
            <summary>
            발신자 주소를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.FromName">
            <summary>
            발신자 대표 이름을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.UseHtml">
            <summary>
            본문 내용 HTML 적용여부를 가져오거나 설정합니다.
            </summary>
            <value>
            기본값은 false입니다.
            </value>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.CredentialName">
            <summary>
            인증이 필요한 경우 인증할 사용자 계정을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.CredentialPassword">
            <summary>
            인증이 필요한 경우 인증할 사용자 계정의 비밀번호를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogConfiguration.Receivers">
            <summary>
            수신자 정보를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.EmailLogWriter">
            <summary>
            로그 정보를 E-mail로 발송합니다.
            </summary>
            <remarks>
            현재 전송에 대한 필터링 기능이 포함되어 있지 않습니다.
            </remarks>
            <example>
            <code>
            public static void TestLog()
            {
            	try
            	{
            		EmailLogWriter logger = new EmailLogWriter("smtp.server.com", 25);
            		
            		logger.SetNetworkCredential("username", "password");
            		logger.EmailSendComplete += new EmailSendCompleteHandler(OnEmailSendComplete);
            		logger.UseHtml = true;
            
            		logger.AddMonitor(new System.Net.Mail.MailAddress("user1@HIE.Framework.com"), EmailTarget.To);
            		logger.AddMonitor(new System.Net.Mail.MailAddress("user2@HIE.Framework.com"), EmailTarget.Cc);
            		logger.AddMonitor(new System.Net.Mail.MailAddress("user3@HIE.Framework.com"), EmailTarget.Bcc);
            
            		LogMessage logMsg = new LogMessage();
            		logMsg.LogType = LogType.Error;
            		logMsg.Add("ErrCategory", "Unknown");
            		logMsg.Add("ErrCode", 12345);		
            
            		logger.WriteLog(logMsg);
            
            		logger.Close();		
            
            	}
            	catch (Exception e)
            	{
            		Console.WriteLine(e);
            	}
            }
            
            static void OnEmailSendComplete(object sender, EmailSendEventArgs e)
            {	
            	if (!e.IsCancelled) Console.WriteLine("Sending complete!");
            	else Console.WriteLine("Sending fail!");
            }
            </code>
            </example>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EmailLogWriter.#ctor(System.String,System.Int32)">
            <summary>
            EmailLogWriter를 생성합니다.
            </summary>
            <param name="smtpHost">SMTP 서버</param>
            <param name="port">포트 번호</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EmailLogWriter.OnEmailSendComplete(System.Object,HIE.Framework.Net.EmailSendEventArgs)">
            <summary>
            E-mail을 비동기 형식으로 발송을 하고 완료가 되면 호출됩니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EmailLogWriter.SetNetworkCredential(System.String,System.String)">
            <summary>
            자격증명에 필요한 <see cref="T:System.Net.NetworkCredential"/>
            <c>System.Net.NetworkCredential</c>개체를 생성합니다.
            </summary>
            <param name="userName">사용자 이름</param>
            <param name="password">비밀번호</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EmailLogWriter.AddMonitor(System.Net.Mail.MailAddress,HIE.Framework.Net.EmailTarget)">
            <summary>
            로그를 감독할 대상을 추가합니다.
            </summary>
            <param name="monitor">대상 주소</param>
            <param name="target">발송 방법</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EmailLogWriter.WriteLog(HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            E-mail 로그 정보를 발송합니다.
            </summary>
            <param name="message">로그 메시지</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EmailLogWriter.Close">
            <summary>
            E-mail 관련 리소스를 모두 해지합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EmailLogWriter.Dispose">
            <summary>
            리소스를 모두해지합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EmailLogWriter.Dispose(System.Boolean)">
            <summary>
            리소스를 모두해지합니다.
            </summary>
            <param name="disposing">
            관리되는 리소스가 해제되어야 하면 true이고, 관리되지 않는 리소스만 해제되어야 하면 false입니다.
            </param>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogWriter.UseAsyncDelivery">
            <summary>
            비동기 호출 사용여부를 가져오거나 설정합니다.
            </summary>
            <value>
            ASP.NET 페이지에서는 동기 호출을 권장합니다.
            </value>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogWriter.From">
            <summary>
            로그 메일 발송자를 가져오거나 설정합니다.
            </summary>
            <value>
            설정된 값이 받는 쪽에서는 발송자로 표시됩니다.
            </value>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogWriter.UseHtml">
            <summary>
            메일 본문 내용을 HTML로 보여줄지 여부를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogWriter.UseSsl">
            <summary>
            SSL 사용여부를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogWriter.UseDefaultCreadential">
            <summary>
            기본 자격증명(<see cref="P:System.Net.CredentialCache.DefaultCredentials"/>
            <c>System.Net.CredentialCache.DefaultCredentials</c>) 사용여부를 가져오거나 설정하니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailLogWriter.ClientCertificates">
            <summary>
            SSL 연결에 사용할 인증서를 지정합니다.
            </summary>
        </member>
        <member name="E:HIE.Framework.Diagnostics.Log.EmailLogWriter.EmailSendComplete">
            <summary>
            비동기 전송이 완료되면 이벤트가 호출됩니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.EmailReceiverConfiguration">
            <summary>
            Email 수신자에 대한 환경 설정 요소
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EmailReceiverConfiguration.KEY_RCVADDR">
            <summary>
            KEY_RCVADDR = rcvAddress
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EmailReceiverConfiguration.KEY_RCVNAME">
            <summary>
            KEY_RCVNAME = rcvName
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EmailReceiverConfiguration.KEY_RCVTYPE">
            <summary>
            KEY_RCVTYPE = rcvType
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EmailReceiverConfiguration.#ctor">
            <summary>
            EmailReceiverConfiguration를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EmailReceiverConfiguration.#ctor(System.String)">
            <summary>
            EmailReceiverConfiguration를 생성합니다.
            </summary>
            <param name="name">키(이름)</param>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailReceiverConfiguration.ReceiverAddress">
            <summary>
            수신자 주소를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailReceiverConfiguration.ReceiverName">
            <summary>
            수신자 대표 이름을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EmailReceiverConfiguration.ReceiverType">
            <summary>
            수신자에게 메일을 보내는 방법을 가져오거나 설정합니다.
            </summary>
            <value>
            기본값은 To입니다.
            </value>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.EventLogConfiguration">
            <summary>
            이벤트 로그 기반 환경 설정 요소
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EventLogConfiguration.KEY_SOURCE">
            <summary>
            KEY_SOURCE = source
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EventLogConfiguration.KEY_LOGNAME">
            <summary>
            KEY_LOGNAME = logName
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EventLogConfiguration.KEY_MACHINE">
            <summary>
            KEY_MACHINE = machine
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EventLogConfiguration.#ctor">
            <summary>
            기본 생성자입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EventLogConfiguration.#ctor(System.String)">
            <summary>
            키에 해당하는 <c>EventLogConfiguration</c> 객체를 생성합니다.
            </summary>
            <param name="name">키(이름)</param>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EventLogConfiguration.Source">
            <summary>
            이벤트 로그 소스를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EventLogConfiguration.LogName">
            <summary>
            이벤트 로그명을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EventLogConfiguration.Machine">
            <summary>
            이벤트 로그를 기록할 대상 컴퓨터명을 가져오거나 설정합니다.
            </summary>
            <value>
            '.'인 경우에 로컬 컴퓨터를 지칭합니다.
            </value>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.EventLogWriter">
             <summary>
             로그 데이터를 윈도우즈 이벤트 로그에 기록합니다.
             </summary>
             <example>
             <code>
             LogMessage msg = new LogMessage();
             msg.LogType = LogType.Normal;
             msg.Add("Message", "This message was written on the Windows Event Log.");
            
             EventLogWriter logger = new EventLogWriter("HIE.Framework_information", ".", "HIE.Framework", EventLogWriterStateOption.Local); 
             logger.WriteLog(msg);
             </code>
             </example>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EventLogWriter.#ctor(System.String,System.String,System.String)">
            <summary>
            <c>EventLogWriter</c> 클래스의 인스턴스를 생성합니다.
            </summary>
            <param name="logName">기록할 로그 이름</param>
            <param name="machineName">
            기록될 대상 컴퓨터 이름. 로컬 컴퓨터인 경우 '.'을 사용하세요.
            </param>
            <param name="source">원본 소스 이름</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EventLogWriter.#ctor(System.String,System.String,System.String,HIE.Framework.Diagnostics.Log.EventLogWriterStateOption)">
            <summary>
            <c>EventLogWriter</c> 클래스의 인스턴스를 생성합니다.
            </summary>
            <param name="logName">기록할 로그 이름</param>
            <param name="machineName">
            기록될 대상 컴퓨터 이름. 로컬 컴퓨터인 경우 '.'을 사용하세요.
            </param>
            <param name="source">원본 소스 이름</param>
            <param name="option">
            내부적으로 이벤트 로그를 기록하는 기록기가 <c>Close</c> 메소드를 사용하여 자원을 해지할지,
            아니면 <c>Write</c> 메서드로 로그 데이터를 기록할 때마다 해지할지를 결정합니다.
            <para>기본값은 <c>TextFileLogWriterStateOption.Local</c>입니다.</para>
            <see cref="T:HIE.Framework.Diagnostics.Log.EventLogWriterStateOption"/>        
            </param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EventLogWriter.GetEventLog">
            <summary>
            <c>EventLog</c> 객체를 반환합니다.
            </summary>
            <returns><c>EventLog</c> 객체</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EventLogWriter.WriteEventLog(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            로그를 Windows 이벤트 로그에 기록합니다.
            </summary>
            <param name="message">텍스트 로그 메시지입니다.</param>
            <param name="logType">
            로그의 <c>EventLogEntryType</c> 형식입니다.
            </param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EventLogWriter.WriteLog(HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            로그를 기록합니다.
            </summary>
            <param name="message">로그 정보를 가지고 있는 <c>LogMessage&lt;string&gt;</c> 인스턴스입니다.</param>
            <returns>로그 기록 여부를 반환합니다.</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.EventLogWriter.Close">
            <summary>
            로그 기록에 사용된 리소스가 있다면 해당 리소스를 해지합니다.
            </summary>
            <remarks>
            <c>StateOption</c> 속성 값이 <c>TextFileLogWriterStateOption.Local</c>인 경우에는 루틴을 수행하지 않습니다.
            </remarks>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.EventLogWriter.StateOption">
            <summary>
            이벤트 로그 자원에 대한 상태값을 가져옵니다.
            </summary>
            <value>(Get) 기본값은<c>TextFileLogWriterStateOption.Local</c>입니다.</value>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.FileLogConfiguration">
            <summary>
            파일 로그 기반 환경 설정 요소
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.FileLogConfiguration.DIR_INV_CHARS">
            <summary>
            디렉터리 이름에 사용할 수 없는 문자셋
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.FileLogConfiguration.KEY_TYPE">
            <summary>
            KEY_TYPE = type
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.FileLogConfiguration.KEY_REPH">
            <summary>
            KEY_REPH = repositoryPath
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.FileLogConfiguration.KEY_FNFMT">
            <summary>
            KEY_FNFMT = filenameFormat
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.FileLogConfiguration.KEY_EXT">
            <summary>
            KEY_EXT = extensionName
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.FileLogConfiguration.KEY_DTFMT">
            <summary>
            KEY_DTFMT = datetimeFormat
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.FileLogConfiguration.KEY_SAVING">
            <summary>
            KEY_SAVED = savedOption
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.FileLogConfiguration.#ctor">
            <summary>
            기본 생성자입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.FileLogConfiguration.#ctor(System.String)">
            <summary>
            주어진 인자를 이름으로 하는 객체를 생성합니다.
            </summary>
            <param name="name">로그 정보 구분자</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.FileLogConfiguration.GetLogFilePath(System.DateTime,HIE.Framework.Diagnostics.Log.LogType)">
            <summary>
            주어진 날짜 값에 해당하는 로그 파일의 전체 경로를 반환합니다.
            </summary>
            <param name="current">날짜 값</param>
            <param name="logType">
            로그 타입
            <remarks><c>FileSavingOption</c> 값이 <c>LogFileSavingOption.Sharing</c>인 경우에는 <c>logType</c>인자는 무의미합니다.</remarks>
            </param>
            <returns>로그 파일 전체 경로</returns>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.FileLogConfiguration.LogType">
            <summary>
            로그 타입을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.FileLogConfiguration.RepositoryPath">
            <summary>
            파일 로그를 기록할 위치를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.FileLogConfiguration.FilenameFormat">
            <summary>
            로그 파일 이름 포맷을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.FileLogConfiguration.ExtensionName">
            <summary>
            로그 파일 이름 포맷을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.FileLogConfiguration.DateTimeFormat">
            <summary>
            날짜 포맷을 가져오거나 설정합니다.
            </summary>
            <value>
            날짜 포맷을 로그 파일 이름 포맷의 인자로 사용되어 집니다.
            </value>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.FileLogConfiguration.FileSavingOption">
            <summary>
            로그 파일 저장 옵션을 가져오거나 설정합니다.
            </summary>    
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.TextFileLogWriter">
             <summary>
             로그데이터를 텍스트 파일에 기록합니다.
             </summary>
             <example>
             <code>
                                      
             LogMessage msg = new LogMessage();
             msg.LogType = LogType.Normal;
             msg.Add("Message", "This message was written on a file.");
            
             string baseDir = AppDomain.CurrentDomain.SetupInformation.ApplicationBase;
             string filepath = Path.Combine(baseDir, "test_log.txt");
            
             TextFileLogWriter logger = new TextFileLogWriter();
             logger.FileFullName = filepath;
             logger.Encoding = Encoding.UTF8;
             logger.WriteLog(msg);
               
             </code>
             </example>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.TextFileLogWriter.#ctor(System.String)">
            <summary>
            로그를 기록할 파일의 풀 경로를 지정하여 생성합니다.
            </summary>
            <remarks>
            파일 이름만 지정되면 프로그램이 실행되는 폴더로 설정됩니다.
            </remarks>
            <param name="fullFilePath">로그를 기록할 파일의 풀 경로 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.TextFileLogWriter.#ctor">
            <summary>
            <c>TextFileLogWriter</c> 클래스의 기본 생성자입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.TextFileLogWriter.BuildMessage(HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            메시지를 생성한다.
            </summary>
            <param name="message"><see cref="T:HIE.Framework.Diagnostics.Log.LogMessage"/> 객체</param>
            <returns>로그 메시지</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.TextFileLogWriter.WriteFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            주어진 문자열 데이터를 파일에 기록합니다.
            </summary>        
            <param name="fileFullName">저장할 파일 풀경로입니다.</param>
            <param name="message">저장할 문자열 데이터 입니다.</param>		
            <param name="encoding">string Encoding</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.TextFileLogWriter.GetPath(System.String)">
            <summary>
            주어진 파일의 풀 경로부터 디렉터리 경로만을 반환합니다.
            </summary>
            <param name="fileFullName">파일 풀 경로</param>
            <returns>파일의 부모 디렉터리 경로</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.TextFileLogWriter.WriteLog(HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            로그를 기록합니다.
            </summary>
            <param name="message">로그 정보를 가지고 있는 <c>LogMessage&lt;string&gt;</c> 인스턴스입니다.</param>          
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.TextFileLogWriter.WriteLog(System.String)">
            <summary>
            로그를 기록 합니다.
            </summary>
            <param name="message">로그에 작성될 내용 입니다.
            <para>별도의 특정 포맷 없이 작성된 내용 그대로 기록 됩니다.</para>
            </param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.TextFileLogWriter.Close">
            <summary>
            로그 기록에 사용된 리소스가 있다면 해당 리소스를 해지합니다.
            </summary>
            <remarks>
            <c>TextFileLogWriter</c>는 해지할 자원이 없으므로 <c>Close</c> 메서드 호출은 무의미합니다.
            </remarks>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.TextFileLogWriter.FileFullName">
            <summary>
            파일의 확장자를 포함한 전체 이름을 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.TextFileLogWriter.Encoding">
            <summary>
            파일의 Encoding 방식을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.LocalDatabaseLogView">
             <summary>
             로컬 데이터베이스 로그파일을 가져와서 로그에 담아서 나타낸다.
             </summary>
             <remarks>
             <c>LocalDatabaseLogView</c>는 로컬에 데이터베이스 시스템 로그파일을 가져오는 방식입니다.
             SQL Server 버전은 2000, 2005, 2008 을 지원합니다.
             </remarks>
             <example>
             다음 코드 예제에서는 SQL Server 2005 에 로그를 가져와서 결과를 출력합니다.
             <code>
             using System;
             using System.Collections.Generic;
             using System.Text;
             using HIE.Framework.Data;
             
             class LocalDatabaseLogViewSample
             {
                 static void Main()
                 {
                     try
                     {
                         HIE.Framework.Diagnostics.Log.LocalDatabaseLogView localdblog 
                             = new HIE.Framework.Diagnostics.Log.LocalDatabaseLogView();
                         LogMessage[] msges = localdblog.Load(DatabaseLogType.MSSQL2005);
            
                         foreach (LogMessage curMsg in msges)
                             Console.WriteLine(curMsg.ToString());
                     }
                     catch (Exception ex)
                     {
                         Console.WriteLine(string.Format("Error: {0}", ex.Message));
                     }  
                 }
             }
             </code>
             다음 코드 예제에서는 SQL Server 2005 에 로그를 비동기방식으로 가져와서 결과를 출력합니다.
             <code>
             using System;
             using System.Collections.Generic;
             using System.Text;
             using HIE.Framework.Data;
             
             class LocalDatabaseLogViewSample
             {
                 static void Main()
                 {
                     HIE.Framework.Diagnostics.Log.LocalDatabaseLogView localdblog 
                         = new HIE.Framework.Diagnostics.Log.LocalDatabaseLogView();
            
                     AsyncCallback callback = new AsyncCallback(dbLoges_LoadedMessages);
                     IAsyncResult result = localdblog.BeginLoad(DatabaseLogType.MSSQL2005, callback);
                     
                     Console.WriteLine("Wait!");
                     Console.ReadLine();
                 }
             
                 static void dbLoges_LoadedMessages(IAsyncResult result)
                 {            
                     AsyncLocalDatabaseLogLoadingCaller loader = result.AsyncState as AsyncLocalDatabaseLogLoadingCaller;
                     LogMessage[] messages = loader.EndInvoke(result);
                     foreach (LogMessage curMsg in messages)
                         Console.WriteLine(curMsg.ToString());
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LocalDatabaseLogView._LogDate">
            <summary>
            LogDate 로그일자 필드명
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LocalDatabaseLogView._ProcessInfo">
            <summary>
            ProcessInfo 프로세스정보 필드명
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LocalDatabaseLogView._Text">
            <summary>
            Text 내용 필드명
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LocalDatabaseLogView.Load(HIE.Framework.Diagnostics.Log.DatabaseLogType)">
            <summary>
            데이터베이스 타입에 맞는 로그파일을 읽어 로그에 담에 보여준다.
            </summary>
            <param name="type">데이터베이스 타입(MSSQL2000, MSSQL2005, MSSQL2008)</param>
            <returns>로그파일을 읽어 담겨진 로그반환한다.</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LocalDatabaseLogView.BeginLoad(HIE.Framework.Diagnostics.Log.DatabaseLogType)">
            <summary>
            로컬 데이터베이스 타입에 맞는 로그 데이터를 비동기로 읽어 들입니다.
            </summary>        
            <param name="type">데이터베이스 타입(MSSQL2000, MSSQL2005, MSSQL2008)</param>
            <returns>비동기 작업 결과</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LocalDatabaseLogView.BeginLoad(HIE.Framework.Diagnostics.Log.DatabaseLogType,System.AsyncCallback)">
            <summary>
            로컬 데이터베이스 타입에 맞는 로그 데이터를 비동기로 읽어 들입니다.
            </summary>
            <param name="type">데이터베이스 타입(MSSQL2000, MSSQL2005, MSSQL2008)</param>
            <param name="callback">
            콜백 대리자가 필요한 경우 대리자를 내부적으로 호출합니다.
            </param>
            <returns>비동기 작업 결과</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LocalDatabaseLogView.EndLoad(System.IAsyncResult)">
            <summary>
            전달된 <see cref="T:System.IAsyncResult"/>가 나타내는 반환값을 검색하여
            로그 데이터를 읽는 작업을 마무리합니다.
            </summary>
            <param name="result">비동기 작업 결과</param>
            <returns>로그 데이터를 읽어 담겨진 로그</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LocalDatabaseLogView.GetLogDataTable(HIE.Framework.Diagnostics.Log.DatabaseLogType)">
            <summary>
            데이터베이스 타입에 맞는 로그파일 경로를 찾아 로그파일을 읽어 데이터테이블에 반환한다.
            </summary>
            <param name="type">데이터베이스 타입(MSSQL2000, MSSQL2005, MSSQL2008)</param>
            <returns>로그파일을 정재한 데이터테이블을 반환한다.</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LocalDatabaseLogView.CreateLogDataTable(System.String,System.Int32,System.Int32)">
            <summary>
            데이터베이스 로그파일을 읽어 로그일자, 프로세스정보, 로그내용으로 정리하여 데이터테이블에 생성한다. (MS SQL 형식)
            </summary>
            <param name="logfile">데이터베이스 로그파일 위치</param>
            <param name="logdateLength">로그일자 자리수</param>
            <param name="processinfoLength">프로세스정보 자리수(SQL 버전마다 자리수가 다름)</param>
            <returns>데이터베이스 로그파일을 로그일자, 프로세스정보, 로그내용으로 정리하여 데이터테이블로 반환한다.</returns>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.Log4Net.CustomLogConfiguration">
            <summary>
            log4net 기반 로그 요소 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4Net.CustomLogConfiguration.#ctor">
            <summary>
            기본 생성자입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4Net.CustomLogConfiguration.#ctor(System.String)">
            <summary>
            주어진 인자를 이름으로 하는 객체를 생성합니다.
            </summary>
            <param name="name">로그 정보 구분자</param>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.Log4Net.SystemLogConfiguration">
            <summary>
            log4net 기반 로그 요소 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4Net.SystemLogConfiguration.#ctor">
            <summary>
            기본 생성자입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4Net.SystemLogConfiguration.#ctor(System.String)">
            <summary>
            주어진 인자를 이름으로 하는 객체를 생성합니다.
            </summary>
            <param name="name">로그 정보 구분자</param>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.InvalidLogException">
            <summary>
            잘못 구성된 로그에 로깅하려할 때 발생되는 예외 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.InvalidLogException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            새로운 <see cref="T:HIE.Framework.Diagnostics.Log.InvalidLogException"/> 예외를 생성합니다.
            </summary>
            <param name="message">오류 메시지 입니다..</param>
            <param name="logName">지정한 로그 명 입니다..</param>
            <param name="innerException">현재의 예외를 발생시킨 inner Exception 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.InvalidLogException.#ctor(System.String,System.String)">
            <summary>
            새로운 <see cref="T:HIE.Framework.Diagnostics.Log.InvalidLogException"/> 예외를 생성합니다.
            </summary>
            <param name="message">오류 메시지 입니다..</param>
            <param name="logName">지정한 로그 명 입니다..</param>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.InvalidLogException.LogName">
            <summary>
            로그 명 입니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.Log4NetLogger">
            <summary>
            log4net 로그 작성을 위한 방법을 제공합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.#cctor">
            <summary>
            생성자 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.Log(HIE.Framework.LoggingLevel,System.String)">
            <summary>
            지정된 레벨의 모든 로그를 기록 합니다.
            </summary>
            <param name="loggingLevel">로깅 레벨 입니다..</param>
            <param name="message">로깅 메시지 입니다.</param>
            <exception cref="T:HIE.Framework.Diagnostics.Log.LoggingInitializationException">Log4NetLogger 가 초기화 되지 않았을 경우 오류가 발생 됩니다.</exception>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.Log(HIE.Framework.LoggingLevel,System.String,System.Object)">
            <summary>
            지정된 레벨의 모든 로그를 기록 합니다.
            </summary>
            <param name="loggingLevel">로깅 레벨 입니다..</param>
            <param name="message">로깅 메시지 입니다.</param>
            <param name="loggingProperties">로그 구성에 등록된 추가 속성 입니다.</param>
            <exception cref="T:HIE.Framework.Diagnostics.Log.LoggingInitializationException">Log4NetLogger 가 초기화 되지 않았을 경우 오류가 발생 됩니다.</exception>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.Log(HIE.Framework.LoggingLevel,System.String,System.Object,System.Exception)">
            <summary>
            지정된 레벨의 모든 로그를 기록 합니다.
            </summary>
            <param name="loggingLevel">로깅 레벨 입니다..</param>
            <param name="message">로깅 메시지 입니다.</param>
            <param name="loggingProperties">로그 구성에 등록된 추가 속성 입니다.</param>
            <param name="exception">로그에 기록될 오류 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.Log(System.String,HIE.Framework.LoggingLevel,System.String)">
            <summary>
            지정된 이름의 로그를 기록 합니다.
            </summary>
            <param name="logName">config 에 작성된 Logger 명 입니다.</param>
            <param name="loggingLevel">로깅 레벨 입니다.</param>
            <param name="message">로깅 메시지 입니다.</param>
            <exception cref="T:HIE.Framework.Diagnostics.Log.InvalidLogException"><paramref name="logName"/>가 존재하지 않을 경우 발생 됩니다.</exception>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.Log(System.String,HIE.Framework.LoggingLevel,System.String,System.Object)">
            <summary>
            지정된 이름의 로그를 기록 합니다.
            </summary>
            <param name="logName">config 에 작성된 Logger 명 입니다.</param>
            <param name="loggingLevel">로깅 레벨 입니다.</param>
            <param name="message">로깅 메시지 입니다.</param>
            <param name="loggingProperties">로그 구성에 등록된 추가 속성 입니다.</param>
            <exception cref="T:HIE.Framework.Diagnostics.Log.InvalidLogException"><paramref name="logName"/>가 존재하지 않을 경우 발생 됩니다.</exception>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.Log(System.String,HIE.Framework.LoggingLevel,System.String,System.Object,System.Exception)">
            <summary>
            지정된 이름의 로그를 기록 합니다.
            </summary>
            <param name="logName">config 에 작성된 Logger 명 입니다.</param>
            <param name="loggingLevel">로깅 레벨 입니다.</param>
            <param name="message">로깅 메시지 입니다.</param>
            <param name="loggingProperties">로그 구성에 등록된 추가 속성 입니다.</param>
            <param name="exception">로그에 기록될 오류 입니다.</param>
            <exception cref="T:HIE.Framework.Diagnostics.Log.InvalidLogException"><paramref name="logName"/>가 존재하지 않을 경우 발생 됩니다.</exception>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.Log(System.String,HIE.Framework.LoggingLevel,HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            지정된 이름의 로그를 기록 합니다.
            </summary>
            <param name="logName">config 에 작성된 Logger 명 입니다.</param>
            <param name="loggingLevel">로깅 레벨 입니다.</param>
            <param name="message">로그 정보 컬렉션 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.Log(System.String,HIE.Framework.LoggingLevel,HIE.Framework.Diagnostics.Log.LogMessage,System.Object)">
            <summary>
            지정된 이름의 로그를 기록 합니다.
            </summary>
            <param name="logName">config 에 작성된 Logger 명 입니다.</param>
            <param name="loggingLevel">로깅 레벨 입니다.</param>
            <param name="message">로그 정보 컬렉션 입니다.</param>
            <param name="loggingProperty">로그 구성에 등록된 추가 속성 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.Log(System.String,HIE.Framework.LoggingLevel,HIE.Framework.Diagnostics.Log.LogMessage,System.Exception,System.Object)">
            <summary>
            지정된 이름의 로그를 기록 합니다.
            </summary>
            <param name="logName">config 에 작성된 Logger 명 입니다.</param>
            <param name="loggingLevel">로깅 레벨 입니다.</param>
            <param name="message">로그 정보 컬렉션 입니다.</param>
            <param name="exception">로그에 기록될 오류 입니다.</param>
            <param name="loggingProperty">로그 구성에 등록된 추가 속성 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.Log(HIE.Framework.LoggingLevel,HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            지정된 이름의 로그를 기록 합니다.
            </summary>
            <param name="loggingLevel">로깅 레벨 입니다.</param>
            <param name="message">로그 정보 컬렉션 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.LogBase(log4net.ILog,HIE.Framework.LoggingLevel,System.String,System.Object,System.Exception)">
            <summary>
            지정된 로깅 레벨이 사용가능한 경우 로그를 스택에 push 하고 pop 합니다.
            </summary>
            <param name="log">로그 개체 입니다.</param>
            <param name="loggingLevel">로깅 레벨 입니다.</param>
            <param name="message">로깅 메시지 입니다.</param>
            <param name="loggingProperties">로그 구성에 등록된 추가 속성 입니다.</param>
            <param name="exception">로그에 기록될 오류 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.GetLeafLoggers">
            <summary>
            Leaf 로그 목록을 반환 합니다.
            </summary>
            <returns>Leaf 로그 목록 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.PushLoggingProperties(System.Object)">
            <summary>
            로그 스택에 지정된 속성을 Push 합니다.
            </summary>
            <param name="loggingProperties"></param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.PopLoggingProperties(System.Object)">
            <summary>
            로그 스택에서 지정된 속성을 Pop 합니다.
            </summary>
            <param name="loggingProperties">로깅 속성 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.ShouldLog(log4net.ILog,HIE.Framework.LoggingLevel)">
            <summary>
            지정된 로깅레벨의 사용가능 여부를 반환 합니다.
            </summary>
            <param name="log">로그 개체 입니다.</param>
            <param name="loggingLevel">로깅 레벨 입니다.</param>
            <returns>로깅 레벨의 사용 가능 여부 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.Log4NetLogger.BuildMessage(HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            메시지를 생성한다.
            </summary>
            <param name="message"><see cref="T:HIE.Framework.Diagnostics.Log.LogMessage"/> 객체</param>
            <returns>로그 메시지</returns>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.LoggingInitializationException">
            <summary>
            로그 초기화에 오류가 있는 경우 발생하는 예외 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LoggingInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            새로운<see cref="T:HIE.Framework.Diagnostics.Log.LoggingInitializationException"/> 예외 를 생성합니다..
            </summary>
            <param name="message">오류 메시지 입니다.</param>
            <param name="innerException">현재의 예외를 발생시킨 inner Exception 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LoggingInitializationException.#ctor(System.String)">
            <summary>
            새로운<see cref="T:HIE.Framework.Diagnostics.Log.LoggingInitializationException"/> 예외 를 생성합니다..
            </summary>
            <param name="message">오류 메시지 입니다.</param>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.LogConfigurationGroup">
            <summary>
            로그 환경 설정 구성을 그룹화합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LogConfigurationGroup.KEY_FLOG">
            <summary>
            KEY_FLOG = FileLogs
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LogConfigurationGroup.KEY_ELOG">
            <summary>
            KEY_ELOG = EventLogs
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LogConfigurationGroup.KEY_EMAIL">
            <summary>
            KEY_EMAIL = EmailLog
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LogConfigurationGroup.KEY_MSMQ">
            <summary>
            KEY_MSMQ = MsmqLog
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LogConfigurationGroup.KEY_LOG4NET_SYSTEM">
            <summary>
            KEY_LOG4NET_SYSTEM = Log4Net,System
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LogConfigurationGroup.KEY_LOG4NET_CUSTOM">
            <summary>
            KEY_LOG4NET_CUSTOM = Log4Net,Custom
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogConfigurationGroup.FileLog">
            <summary>
            파일 기반 로그 정보를 가져오거나 설정한다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogConfigurationGroup.EventLog">
            <summary>
            이벤트 로그 기반 정보를 가져오거나 설정한다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogConfigurationGroup.EmailLog">
            <summary>
            E-mail 로그 기반 정보를 가져오거나 설정한다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogConfigurationGroup.Log4Net_System">
            <summary>
            Framework 레벨 에서 사용되는 Log4Net 로그 기반 정보를 가져오거나 설정한다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogConfigurationGroup.Log4Net_Custom">
            <summary>
            Framework 레벨 에서 사용되는 Log4Net 로그 기반 정보를 가져오거나 설정한다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.AsyncEventLogLoadingCaller">
            <summary>
            <c>HIE.Framework.Diagnostics.Log.WindowsEventLogView</c>의 비동기 호출 상태 대리자입니다.
            대리자를 사용하여 비동기를 호출방하는 패턴으로 사용되어 집니다.
            </summary>
            <param name="machine">컴퓨터명</param>
            <param name="logname">로그명</param>
            <param name="source">소스명</param>
            <returns><see cref="T:HIE.Framework.Diagnostics.Log.LogMessage"/> 배열</returns>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.AsyncDatabaseLogLoadingCaller">
            <summary>
            <c>HIE.Framework.Diagnostics.Log.DatabaseLogView</c>의 비동기 호출 상태 대리자입니다.
            대리자를 사용하여 비동기를 호출방하는 패턴으로 사용되어 집니다.
            </summary>
            <param name="ConnectionString">데이터베이스 연결정보</param>
            <param name="type">데이터베이스 타입</param>
            <returns>배열로 반환합니다.</returns>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.AsyncLocalDatabaseLogLoadingCaller">
            <summary>
            <c>HIE.Framework.Diagnostics.Log.LocalDatabaseLogView</c>의 비동기 호출 상태 대리자입니다.
            대리자를 사용하여 비동기를 호출방하는 패턴으로 사용되어 집니다.
            </summary>
            <param name="type">데이터베이스 타입</param>
            <returns>배열로 반환합니다.</returns>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.LogEmailMessage">
            <summary>
            로그 정보를 담는 E-mail 형식을 나타냅니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogEmailMessage.GenerateSubject">
            <summary>
            제목을 포맷팅합니다.
            </summary>
            <returns>제목</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogEmailMessage.GenerateBody(HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            본문내용을 포맷팅합니다.
            </summary>
            <param name="log">로그 메시지</param>
            <returns>본문</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogEmailMessage.GenerateContent(HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            제목 및 본문 내용을 로그 포맷에 맞게 설정합니다.
            </summary>
            <param name="log">로그 메시지</param>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.LogEntry">
            <summary>
            로그 정보를 캡슐화 하기 위한 클래스입니다.
            </summary>    
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogEntry.#ctor">
            <summary>
            <c>LogEntry</c> 객체를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogEntry.#ctor(System.String,System.Object)">
            <summary>
            키와 값으로 <c>LogEntry</c> 객체를 생성합니다.
            </summary>
            <param name="key">키</param>
            <param name="value">값</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogEntry.ToString">
            <summary>
            재정의된 <c>ToString</c>메소드입니다.
            </summary>
            <returns>키=값</returns>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogEntry.Key">
            <summary>
            키를 가져오거나 설정합니다.
            </summary>
            <value>
            키는 빈 문자열 및 null일 수 없습니다.
            </value>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogEntry.Value">
            <summary>
            값을 가져오거나 설정합니다.
            </summary>        
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.LogEntryEnumerator">
            <summary>
            <see cref="T:HIE.Framework.Diagnostics.Log.LogMessage"/> 클래스의
            <see cref="T:System.Collections.IEnumerator"/> 객체입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogEntryEnumerator.#ctor(HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            생성자입니다.
            </summary>
            <param name="log"><see cref="T:HIE.Framework.Diagnostics.Log.LogMessage"/> 객체</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogEntryEnumerator.MoveNext">
            <summary>
            다음 값으로 이동합니다.
            </summary>
            <returns>
            다음 값이 없다면 false를 반환합니다.
            </returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogEntryEnumerator.Reset">
            <summary>
            값을 가리키는 위치을 처음으로 초기화합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogEntryEnumerator.Current">
            <summary>
            현재 값을 반환합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.LogType">
            <summary>
            메시지 레벨을 나타내는 열거형입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LogType.Normal">
            <summary>
            Normal 메시지입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LogType.Error">
            <summary>
            Error 메시지입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LogType.Warning">
            <summary>
            Warning 메시지입니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.LogFileSavingOption">
            <summary>
            로그 파일을 저장하는 옵션입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LogFileSavingOption.Sharing">
            <summary>
            로그 타입과 상관없이 하나의 파일에 기록합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LogFileSavingOption.Dividing">
            <summary>
            로그 타입에 따라 파일을 나눕니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.EventLogWriterStateOption">
            <summary>
            <c>EventLogWriter</c> 객체가 이벤트 로그 자원을 해지하는 방법을 설명하는 열거형입니다.
            <list type="table">
            <listheader><term>값</term><description>설명</description></listheader>
            <item>
            <term>EventLogWriterStateOption.Local</term>
            <description>이벤트 로그 자원을 로그 데이터를 기록할 때마다 해지합니다.</description>
            </item>
            <item>
            <term>EventLogWriterStateOption.Static</term>
            <description>로그 기록기가 명시적으로 <c>Close</c>, <c>Dispose</c>와 같은 메서드 호출로 해지를 합니다.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EventLogWriterStateOption.Local">
            <summary>
            이벤트 로그 자원을 로그 데이터를 기록할 때마다 해지합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.EventLogWriterStateOption.Static">
            <summary>
            로그 기록기가 명시적으로 <c>Close</c>, <c>Dispose</c>와 같은 메서드 호출로 해지를 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.DatabaseLogType">
            <summary>
            데이터베이스 로그를 읽어올 Database 의 Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.DatabaseLogType.MSSQL2000">
            <summary>
            MS SQL 2000 로그입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.DatabaseLogType.MSSQL2005">
            <summary>
            MS SQL 2005 로그입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.DatabaseLogType.MSSQL2008">
            <summary>
            MS SQL 2008 로그입니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.LogMessage">
            <summary>
            로그 정보를 담는 콜렉션입니다.
            </summary>
            <remarks>
            <see cref="T:System.Xml.Serialization.XmlSerializer"/>를 사용하여
            <c>Serialize</c>, <c>Deserialize</c>가 가능합니다.
            </remarks>
        </member>
        <member name="F:HIE.Framework.Diagnostics.Log.LogMessage.DEFAULT_SIZE">
            <summary>
            DEFAULT_SIZE = 16
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.#ctor">
            <summary>
            기본 생성자입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.#ctor(System.Int32)">
            <summary>
            주어진 인자를 크기로 하는 생성자입니다.
            </summary>
            <param name="capacity">
            기본 크기
            <remarks>기본 값은 16입니다.</remarks>
            </param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.IncreaseCapacity(System.Int32)">
            <summary>
            내부적으로 용량을 증가시킵니다.
            </summary>
            <param name="size">총 증가량</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.IndexOf(System.String)">
            <summary>
            키에 해당하는 인덱스를 반환합니다.
            </summary>
            <param name="key">키</param>
            <returns>인덱스 값, 없다면 -1을 반환합니다.</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.Contains(System.String)">
            <summary>
            키를 포함하는지 여부를 반환합니다.
            </summary>
            <param name="key">키</param>
            <returns>키 포함 여부</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.Add(System.Object)">
            <summary>
            새 정보를 추가합니다. (사용주의)
            </summary>
            <remarks>
            사용자는 이 메소드를 호출하여 정보를 추가하지 않도록 합니다.
            이 메소드를 호출하는 경우 키값을 내부적으로 추가하기때문에
            사용자가 인지할 수 있는 키 리스트와 중복될 가능성이 존재합니다.
            </remarks>
            <param name="value">값</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.Add(System.String,System.Object)">
            <summary>
            새 정보를 추가합니다.
            </summary>
            <param name="key">키</param>
            <param name="value">값</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.Remove(System.String)">
            <summary>
            정보를 삭제합니다.
            </summary>
            <param name="key">키</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.RemoveAt(System.Int32)">
            <summary>
            정보를 삭제합니다.
            </summary>
            <param name="index">인덱스</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.Clear">
            <summary>
            모든 정보를 삭제합니다.
            </summary>
            <remarks>
            <c>Clear</c> 메소드가 호출되면 기본용량으로 줄어듭니다.
            </remarks>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.ToString">
            <summary>
            재정의된 <c>ToString</c>메소드입니다.
            </summary>
            <returns>키=값 개행 키=값 ...</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.CopyTo(System.Array,System.Int32)">
            <summary>
            특정 <see cref="T:System.Array"/> 인덱스부터 시작하여 <see cref="T:System.Collections.ICollection"/>의 요소를 <see cref="T:System.Array"/>에 복사합니다.
            </summary>
            <param name="array">타겟 배열</param>
            <param name="index">복사할 시작 인덱스</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.GetEnumerator">
            <summary>
            <see cref="T:System.Collections.IEnumerator"/> 객체를 반환합니다.
            </summary>
            <returns>
            <see cref="T:System.Collections.IEnumerator"/> 클래스의 파생 클래스인
            <see cref="T:HIE.Framework.Diagnostics.Log.LogEntryEnumerator"/>의 개체를 반환합니다.
            </returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.GetSchema">
            <summary>
            스키마를 반환합니다.
            </summary>
            <returns>null(정의된 스키마는 없습니다.)</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="T:System.Xml.Serialization.XmlSerializer"/>에 의해 호출되는 메소드입니다.
            </summary>
            <param name="reader">XML 판독기</param>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.LogMessage.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="T:System.Xml.Serialization.XmlSerializer"/>에 의해 호출되는 메소드입니다.
            </summary>
            <param name="writer">XML 작성기</param>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogMessage.LogType">
            <summary>
            로그 타입을 가져오거나 설정합니다.
            <see cref="T:HIE.Framework.Diagnostics.Log.LogType"/>
            </summary>        
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogMessage.Keys">
            <summary>
            키 리스트를 반환합니다.
            </summary>
            <returns>키 리스트 혹은 길이가 0인 배열</returns>        
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogMessage.Item(System.String)">
            <summary>
            키에 해당하는 값을 반환하거나 수정합니다.
            </summary>
            <remarks>
            키가 존재하지 않는다면 추가합니다.
            </remarks>
            <param name="key">키</param>
            <returns>값</returns>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogMessage.Item(System.Int32)">
            <summary>
            인덱스에 해당하는 값을 반환하거나 수정합니다.
            추가는 하지 않습니다.
            </summary>
            <param name="index">순서(인덱스)</param>
            <returns>값</returns>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogMessage.Count">
            <summary>
            정보(아이템) 요소의 수를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogMessage.IsSynchronized">
            <summary>
            동기화 여부를 가져옵니다.
            </summary>
            <value>
            반환 값은 항상 false입니다. 즉 동기화를 내부에서 지원하지 않습니다.
            </value>
        </member>
        <member name="P:HIE.Framework.Diagnostics.Log.LogMessage.SyncRoot">
            <summary>
            동기화 개체를 반환합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Diagnostics.Log.WindowsEventLogView">
            <summary>
            Windows Event 로그 정보를 가져오는 역할을 담당합니다.
            </summary>
            <see cref="T:HIE.Framework.Diagnostics.Log.AsyncEventLogLoadingCaller"/>
            <example>
            <para>동기식 로그 정보 가져오기</para>
            <code>
            // 동기 작업
            WindowsEventLogView winLoges = new WindowsEventLogView();
            LogMessage[] messages = winLoges.Load(".", "HIE.Framework_information", "HIE.Framework");
            </code>
            <para>비동기식 로그 정보 가져오기</para>
            <code>
            public static void Test()
            {
            	// 콜백 메소드 정의           
            	AsyncCallback callback = new AsyncCallback(winLoges_LoadedMessages);
                // 비동기 호출
            	IAsyncResult result = winLoges.BeginLoad(".", "HIE.Framework_information", "HIE.Framework", callback);
            
            	Console.WriteLine("Loading...");
            }
            
            static void winLoges_LoadedMessages(IAsyncResult result)
            {
            	AsyncEventLogLoadingCaller loader = result.AsyncState as AsyncEventLogLoadingCaller;
            	LogMessage[] messages = loader.EndInvoke(result);
            	foreach (LogMessage curMsg in messages)
            		Console.WriteLine(curMsg.ToString());
            }
            </code>
            </example>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.WindowsEventLogView.CreateMessage(System.Diagnostics.EventLogEntry)">
            <summary>
            <c>EventLogEntry</c> 객체를 <see cref="T:HIE.Framework.Diagnostics.Log.LogMessage"/> 객체로
            변환하여 반환합니다.
            </summary>
            <param name="entry"><c>EventLogEntry</c> 객체</param>
            <returns><see cref="T:HIE.Framework.Diagnostics.Log.LogMessage"/> 객체</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.WindowsEventLogView.Load(System.String,System.String,System.String)">
            <summary>
            로그 정보를 반환합니다.
            </summary>
            <param name="machine">컴퓨터명</param>
            <param name="logname">로그명</param>
            <param name="source">소스명</param>
            <returns>
            <see cref="T:HIE.Framework.Diagnostics.Log.LogMessage"/> 배열
            </returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.WindowsEventLogView.BeginLoad(System.String,System.String,System.String)">
            <summary>
            비동기 방식으로 로그 정보를 읽어들입니다.
            </summary>
            <param name="machine">컴퓨터명</param>
            <param name="logname">로그명</param>
            <param name="source">소스명</param>
            <returns>비동기 작업 상태</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.WindowsEventLogView.BeginLoad(System.String,System.String,System.String,System.AsyncCallback)">
            <summary>
            비동기 방식으로 로그 정보를 읽어들입니다.
            </summary>
            <param name="machine">컴퓨터명</param>
            <param name="logname">로그명</param>
            <param name="source">소스명</param>
            <param name="callback">작업 완료 후 호출된 콜백메소드입니다.</param>
            <returns>비동기 작업 상태</returns>
        </member>
        <member name="M:HIE.Framework.Diagnostics.Log.WindowsEventLogView.EndLoad(System.IAsyncResult)">
            <summary>
            작업이 완료되면 로그 정보를 반환합니다.
            </summary>
            <param name="result">비동기 작업 상태</param>
            <returns><see cref="T:HIE.Framework.Diagnostics.Log.LogMessage"/> 배열</returns>
        </member>
    </members>
</doc>
