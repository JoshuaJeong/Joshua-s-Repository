<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HIE.Framework.Data</name>
    </assembly>
    <members>
        <member name="T:HIE.Framework.Data.Database">
            <summary>
            데이터베이스 액세스에 사용될 데이터베이스 개체 입니다.
            </summary>
            <remarks>
            데이터베이스에 액세스하는 데 사용되는 클래스입니다. MS SQL, ORACLE, OLE, ODBC 를 지원합니다.
            </remarks>
            <example>
            다음 코드 예제에서는 데이터베이스를 연결하여 현재 날짜결과를 출력합니다.
            <code>
            using System;
            using System.Collections.Generic;
            using System.Text;
            using HIE.Framework.Data;
            
            class DatabaseSample
            {
                static void Main()
                {
                    HIE.Framework.Data.Database db = null;
                    string ConnectionString = "Data Source=localhost;Initial Catalog=master;User ID=user;Password=pass";
                    
                    try
                    {
                        db = new HIE.Framework.Data.Database(ConnectionString, "@", DatabaseType.SQL_2012);
                        
                        DateTime currentTime = (DateTime)db.ExecuteScalar("SELECT GETDATE()");
                        Console.WriteLine(string.Format("Current Database Time: {0}", currentTime.ToString()));
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(string.Format("Error: {0}", ex.Message));
                    }
                    finally
                    {
                        if (db != null) db.Close();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:HIE.Framework.Data.SupposedDatabase">
            <summary>
            데이터베이스개체 가 상속할 Virtual Class 입니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.IDatabase">
            <summary>
            DBMS 와는 별개의, 데이터베이스로 취급 될 수 있는 시스템에 액세스하는 통합기능을 제공하기 위한 interface 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.IDatabase.Open">
            <summary>
            커넥션 연결 핸들링 합니다.
            </summary>
            <returns>이미 열려 있었다면 false 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.IDatabase.Close">
            <summary>
            커넥션 닫음을 핸들링 합니다.
            </summary>
            <returns>이미 닫혀 있었다면 false 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.IDatabase.Cancel">
            <summary>
            실행을 취소하려고 시도합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.IDatabase.IsConnected">
            <summary>
            데이터베이스 연결이 되어 있는지 여부를 가져 옵니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.SupposedDatabase._databaseConverter">
            <summary>
            데이터베이스타입에 따라 동작을 지정하는 Converter 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.SupposedDatabase._databaseName">
            <summary>
            Database Name 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.SupposedDatabase._databaseType">
            <summary>
            DatabaseType 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.SupposedDatabase._dataObject">
            <summary>
            Database Parameter 인 DataObject.DataObject 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.SupposedDatabase._connection">
            <summary>
            Data Source 에 대한 열린 연결을 나타내고 관계형 Database 에 Access 하는
            .NET Framework 데이터 공급자에 의해 구현 됩니다.
            
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.SupposedDatabase._command">
            <summary>
            Data Source 에 연결된동안 실행되고 관계형 Database 에 Access 하는 
            .NET Framework 데이터 공급자에 의해 구현되는 Query 구문 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.SupposedDatabase._dataAdapter">
            <summary>
            System.Data.IDbDataAdapter 인터페이스의 구현을 지원 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.SupposedDatabase._currentTransaction">
            <summary>
            공통으로 사용될 트랜젝션 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.SupposedDatabase._isOpenFromTransaction">
            <summary>
            트렌젝션에서 커넥션 연결을 열었는지 여부 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.SupposedDatabase._parameterIntial">
            <summary>
            Database Parameter 에 사용되는 이니셜 입니다.
            EX) Sql Database 인 경우 "@" 을 입력 하도록 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.SupposedDatabase._dbTypeConverter">
            <summary>
            데이터베이스 타입에 따라 DataItemPack 에서 실제 매핑될 
            데이터베이스 파라미터 변환을 지원하는 interface 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.CreateConnection">
            <summary>
            현재 DataBase 에 맞는 IDbConnection 을 만듭니다.
            </summary>
            <returns>IDbConnection</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.CreateCommand">
            <summary>
            현재 DataBase 에 맞는 IDbCommand 을 만듭니다.
            </summary>
            <returns>IDbCommand</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.CreateDataAdapter">
            <summary>
            현재 DataBase 에 맞는 DbDataAdapter 을 만듭니다.
            </summary>
            <returns>DbDataAdapter</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.OnExecuting">
            <summary>
            명령실행 전 이벤트를 발생 시킵니다.
            </summary>
            <returns>현재 이벤트 정보 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.OnExecuted(HIE.Framework.Data.ExecutingEventArgs)">
            <summary>
            명령실행 후 이벤트를 발생 시킵니다.
            </summary>
            <param name="executingEventArgs">현재 이벤트 정보 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.OnExcuteFailure(HIE.Framework.Data.ExecutingEventArgs,HIE.Framework.Data.DataException)">
            <summary>
            명령실행 오류시 이벤트를 발생 시킵니다.
            </summary>
            <param name="executingEventArgs">현재 이벤트 정보 입니다.</param>
            <param name="dataException">명령 실패 Exception 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.#ctor">
            <summary>
            기본 생성자 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.#ctor(System.String)">
            <summary>
            파라메터 이름에 사용되는 기본 이니셜의 이름을 이용하는 인스턴스를 만듭니다.
            </summary>
            <param name="connectionString">연결문자열 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.#ctor(System.String,System.String)">
            <summary>
            연결 문자열 및 파라메터 이름에 사용되는 기본 이니셜의 이름을 이용하는 인스턴스를 만듭니다.
            </summary>
            <param name="connectionString">연결문자열 입니다.</param>
            <param name="parameterIntial">파라메터 이름에 사용되는 기본 이니셜의 이름 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.#ctor(System.String,System.String,HIE.Framework.Data.DatabaseType)">
            <summary>
            연결 문자열 및 파라메터 이름에 사용되는 기본 이니셜의 이름을 이용하는 인스턴스를 만듭니다.
            </summary>
            <param name="connectionString">연결문자열 입니다.</param>
            <param name="parameterIntial">파라메터 이름에 사용되는 기본 이니셜의 이름 입니다.</param>
            <param name="type">시스템에서 사용될 데이터베이스 Type 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.Open">
            <summary>
            커넥션 연결 핸들링 합니다.
            </summary>
            <returns>이미 열려 있었다면 false 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.Close">
            <summary>
            커넥션 닫음을 핸들링 합니다.
            </summary>
            <returns>이미 닫혀 있었다면 false 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.BeginTransaction">
            <summary>
            데이터베이스 트랜잭션을 시작합니다.
            </summary>
            <returns>새 트랜잭션을 나타내는 개체입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            지정된 IsolationLevel 값을 사용하여 데이터베이스 트랜잭션을 시작합니다.
            </summary>
            <param name="il">IsolationLevel 값 중 하나입니다.</param>
            <returns>새 트랜잭션을 나타내는 개체입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.CommitTransaction">
            <summary>
            마지막으로 실행된 트랜젝션을 커밋 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.RollbackTransaction">
            <summary>
            마지막으로 실행된 트랜젝션을 롤백 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.EndTransaction">
            <summary>
            마지막으로 실행된 트랜젝션을 종료 및 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.SetDataObject(HIE.Framework.Data.DataItemPack)">
            <summary>
            현재 파라메터팩을 초기화 하며, 다시 설정 합니다.
            </summary>
            <param name="dataObject">DataObject 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.MappingDataObjectToExact">
            <summary>
            현재 커멘드의 파라메터를 파라메터팩으로 채웁니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.MappingExactToDataObject">
            <summary>
            현재 커멘드의 파라메터를 파라메터팩으로 옮깁니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.Cancel">
            <summary>
            IDbCommand 의 실행을 취소하려고 시도합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.Dispose">
            <summary>
            자원을 해지 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.Dispose(System.Boolean)">
            <summary>
            자원을 해지 합니다.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.RunExecuteNonQuery">
            <summary>
            데이터 공급자의 Connection 개체에 대해 현재 설정된 쿼리문을 실행하고 적용된 행 수를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <returns>영향 받는 행의 수입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteNonQuery">
            <summary>
            데이터 공급자의 Connection 개체에 대해 현재 설정된 쿼리문을 실행하고 적용된 행 수를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <returns>영향 받는 행의 수입니다.</returns>        
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteNonQuery(System.String)">
            <summary>
            데이터 공급자의 Connection 개체에 대해 쿼리문을 실행하고 적용된 행 수를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <returns>영향 받는 행의 수입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteNonQuery(System.String,System.Data.CommandType)">
            <summary>
            데이터 공급자의 Connection 개체에 대해 쿼리문을 실행하고 적용된 행 수를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다..</param>
            <returns>영향 받는 행의 수입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteNonQuery(System.String,HIE.Framework.Data.DataItemPack)">
            <summary>
            데이터 공급자의 Connection 개체에 대해 쿼리문을 실행하고 적용된 행 수를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="dataobject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>영향 받는 행의 수입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteNonQuery(System.String,System.Data.CommandType,HIE.Framework.Data.DataItemPack)">
            <summary>
            데이터 공급자의 Connection 개체에 대해 쿼리문을 실행하고 적용된 행 수를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다..</param>
            <param name="dataobject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>영향 받는 행의 수입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteStoredProcedure(System.String)">
            <summary>
            데이터 공급자의 Connection 개체에 대해 스토어드프로시져를 실행하고 적용된 행 수를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="procedureName">실행할 프로시져 명 입니다.</param>
            <returns>영향 받는 행의 수입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteStoredProcedure(System.String,HIE.Framework.Data.DataItemPack)">
            <summary>
            데이터 공급자의 Connection 개체에 대해 스토어드프로시져를 실행하고 적용된 행 수를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="procedureName">실행할 프로시져 명 입니다.</param>
            <param name="dataobject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>영향 받는 행의 수입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.RunExecuteReader">
            <summary>
            데이터 공급자의 Connection 개체에 대해 쿼리문을 실행하고 IDataReader 를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <returns>수행 결과 IDataReader 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteReader">
            <summary>
            데이터 공급자의 Connection 개체에 대해 쿼리문을 실행하고 IDataReader 를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <returns>수행 결과 IDataReader 입니다.</returns>       
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteReader(System.String)">
            <summary>
            데이터 공급자의 Connection 개체에 대해 쿼리문을 실행하고 IDataReader 를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <returns>수행 결과 IDataReader 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteReader(System.String,System.Data.CommandType)">
            <summary>
            데이터 공급자의 Connection 개체에 대해 쿼리문을 실행하고 IDataReader 를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <returns>수행 결과 IDataReader 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteReader(System.String,HIE.Framework.Data.DataItemPack)">
            <summary>
            데이터 공급자의 Connection 개체에 대해 쿼리문을 실행하고 IDataReader 를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>수행 결과 IDataReader 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteReader(System.String,System.Data.CommandType,HIE.Framework.Data.DataItemPack)">
            <summary>
            데이터 공급자의 Connection 개체에 대해 쿼리문을 실행하고 IDataReader 를 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>수행 결과 IDataReader 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.RunExecuteScalar">
            <summary>
            쿼리를 실행하고 쿼리에서 반환된 결과 집합의 첫 번째 행의 첫 번째 열을 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <returns>결과 집합의 첫 행의 첫 열 또는 결과 집합이 비어있을 경우 null 참조입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteScalar">
            <summary>
            쿼리를 실행하고 쿼리에서 반환된 결과 집합의 첫 번째 행의 첫 번째 열을 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <returns>결과 집합의 첫 행의 첫 열 또는 결과 집합이 비어있을 경우 null 참조입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteScalar(System.String)">
            <summary>
            쿼리를 실행하고 쿼리에서 반환된 결과 집합의 첫 번째 행의 첫 번째 열을 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <returns>결과 집합의 첫 행의 첫 열 또는 결과 집합이 비어있을 경우 null 참조입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteScalar(System.String,System.Data.CommandType)">
            <summary>
            쿼리를 실행하고 쿼리에서 반환된 결과 집합의 첫 번째 행의 첫 번째 열을 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <returns>결과 집합의 첫 행의 첫 열 또는 결과 집합이 비어있을 경우 null 참조입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteScalar(System.String,HIE.Framework.Data.DataItemPack)">
            <summary>
            쿼리를 실행하고 쿼리에서 반환된 결과 집합의 첫 번째 행의 첫 번째 열을 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>결과 집합의 첫 행의 첫 열 또는 결과 집합이 비어있을 경우 null 참조입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.ExecuteScalar(System.String,System.Data.CommandType,HIE.Framework.Data.DataItemPack)">
            <summary>
            쿼리를 실행하고 쿼리에서 반환된 결과 집합의 첫 번째 행의 첫 번째 열을 반환합니다.\n
            주의) 실행 후 Connection 개체의 Close() 메소드를 호출 합니다.
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>결과 집합의 첫 행의 첫 열 또는 결과 집합이 비어있을 경우 null 참조입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.RunFillDataSet(System.Data.DataSet)">
            <summary>
            DataSet 이름을 사용하여, 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고치고 "Table"이라는 이름의 DataTable을 만듭니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다. </param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataSet(System.Data.DataSet)">
            <summary>
            DataSet 이름을 사용하여, 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고치고 "Table"이라는 이름의 DataTable을 만듭니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다. </param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataSet(System.Data.DataSet,System.String)">
            <summary>
            DataSet 이름을 사용하여, 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고치고 "Table"이라는 이름의 DataTable을 만듭니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다. </param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataSet(System.Data.DataSet,System.String,System.Data.CommandType)">
            <summary>
            DataSet 이름을 사용하여, 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고치고 "Table"이라는 이름의 DataTable을 만듭니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다. </param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataSet(System.Data.DataSet,System.String,HIE.Framework.Data.DataItemPack)">
            <summary>
            DataSet 이름을 사용하여, 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고치고 "Table"이라는 이름의 DataTable을 만듭니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다. </param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataSet(System.Data.DataSet,System.String,System.Data.CommandType,HIE.Framework.Data.DataItemPack)">
            <summary>
            DataSet 이름을 사용하여, 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고치고 "Table"이라는 이름의 DataTable을 만듭니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다. </param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.RunFillDataTable(System.Data.DataTable)">
            <summary>
            DataTable 이름을 사용하여 데이터 소스의 행과 일치하도록 DataTable의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataTable">레코드와 스키마(필요한 경우)로 채울 DataTable입니다.</param>
            <returns>DataTable에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataTable(System.Data.DataTable)">
            <summary>
            DataTable 이름을 사용하여 데이터 소스의 행과 일치하도록 DataTable의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataTable">레코드와 스키마(필요한 경우)로 채울 DataTable입니다.</param>
            <returns>DataTable에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataTable(System.Data.DataTable,System.String)">
            <summary>
            DataTable 이름을 사용하여 데이터 소스의 행과 일치하도록 DataTable의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataTable">레코드와 스키마(필요한 경우)로 채울 DataTable입니다.</param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <returns>DataTable에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataTable(System.Data.DataTable,System.String,System.Data.CommandType)">
            <summary>
            DataTable 이름을 사용하여 데이터 소스의 행과 일치하도록 DataTable의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataTable">레코드와 스키마(필요한 경우)로 채울 DataTable입니다.</param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <returns>DataTable에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataTable(System.Data.DataTable,System.String,HIE.Framework.Data.DataItemPack)">
            <summary>
            DataTable 이름을 사용하여 데이터 소스의 행과 일치하도록 DataTable의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataTable">레코드와 스키마(필요한 경우)로 채울 DataTable입니다.</param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>DataTable에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataTable(System.Data.DataTable,System.String,System.Data.CommandType,HIE.Framework.Data.DataItemPack)">
            <summary>
            DataTable 이름을 사용하여 데이터 소스의 행과 일치하도록 DataTable의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataTable">레코드와 스키마(필요한 경우)로 채울 DataTable입니다.</param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>DataTable에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.GetDataTable(System.String)">
            <summary>
            질의의 결과를 DataTable 로 반환 합니다. 
            <para>
            단일 Select Query / Procedure 의 결과가 필요할 경우 사용 합니다.
            </para>
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <returns>질의 의 결과로 반환 된 DataTable 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.GetDataTable(System.String,System.Data.CommandType)">
            <summary>
            질의의 결과를 DataTable 로 반환 합니다. 
            <para>
            단일 Select Query / Procedure 의 결과가 필요할 경우 사용 합니다.
            </para>
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <returns>질의 의 결과로 반환 된 DataTable 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.GetDataTable(System.String,HIE.Framework.Data.DataItemPack)">
            <summary>
            질의의 결과를 DataTable 로 반환 합니다. 
            <para>
            단일 Select Query / Procedure 의 결과가 필요할 경우 사용 합니다.
            </para>
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>질의 의 결과로 반환 된 DataTable 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.GetDataTable(System.String,System.Data.CommandType,HIE.Framework.Data.DataItemPack)">
            <summary>
            질의의 결과를 DataTable 로 반환 합니다. 
            <para>
            단일 Select Query / Procedure 의 결과가 필요할 경우 사용 합니다.
            </para>
            </summary>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>질의 의 결과로 반환 된 DataTable 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.RunFillDataSetInTable(System.Data.DataSet,System.String)">
            <summary>
            DataSet과 DataTable 이름을 사용하여 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다.</param>
            <param name="srcTable">테이블 매핑에 사용할 소스 테이블의 이름입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataSetInTable(System.Data.DataSet,System.String)">
            <summary>
            DataSet과 DataTable 이름을 사용하여 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다.</param>
            <param name="srcTable">테이블 매핑에 사용할 소스 테이블의 이름입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataSetInTable(System.Data.DataSet,System.String,System.String)">
            <summary>
            DataSet과 DataTable 이름을 사용하여 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다.</param>
            <param name="srcTable">테이블 매핑에 사용할 소스 테이블의 이름입니다.</param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataSetInTable(System.Data.DataSet,System.String,System.String,System.Data.CommandType)">
            <summary>
            DataSet과 DataTable 이름을 사용하여 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다.</param>
            <param name="srcTable">테이블 매핑에 사용할 소스 테이블의 이름입니다.</param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataSetInTable(System.Data.DataSet,System.String,System.String,HIE.Framework.Data.DataItemPack)">
            <summary>
            DataSet과 DataTable 이름을 사용하여 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다.</param>
            <param name="srcTable">테이블 매핑에 사용할 소스 테이블의 이름입니다.</param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.FillDataSetInTable(System.Data.DataSet,System.String,System.String,System.Data.CommandType,HIE.Framework.Data.DataItemPack)">
            <summary>
            DataSet과 DataTable 이름을 사용하여 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다.</param>
            <param name="srcTable">테이블 매핑에 사용할 소스 테이블의 이름입니다.</param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.RunFillDataSetInTable(System.Data.DataSet,System.Int32,System.Int32,System.String)">
            <summary>
            DataSet과 DataTable 이름을 사용하여 지정된 범위에서 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다.</param>
            <param name="startRecord">0부터 시작되는 시작 레코드 번호입니다.</param>
            <param name="maxRecords">검색할 수 있는 최대 레코드 수입니다.</param>
            <param name="srcTable">테이블 매핑에 사용할 소스 테이블의 이름입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)">
            <summary>
            DataSet과 DataTable 이름을 사용하여 지정된 범위에서 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다.</param>
            <param name="startRecord">0부터 시작되는 시작 레코드 번호입니다.</param>
            <param name="maxRecords">검색할 수 있는 최대 레코드 수입니다.</param>
            <param name="srcTable">테이블 매핑에 사용할 소스 테이블의 이름입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            DataSet과 DataTable 이름을 사용하여 지정된 범위에서 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다.</param>
            <param name="startRecord">0부터 시작되는 시작 레코드 번호입니다.</param>
            <param name="maxRecords">검색할 수 있는 최대 레코드 수입니다.</param>
            <param name="srcTable">테이블 매핑에 사용할 소스 테이블의 이름입니다.</param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.String,System.Data.CommandType)">
            <summary>
            DataSet과 DataTable 이름을 사용하여 지정된 범위에서 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다.</param>
            <param name="startRecord">0부터 시작되는 시작 레코드 번호입니다.</param>
            <param name="maxRecords">검색할 수 있는 최대 레코드 수입니다.</param>
            <param name="srcTable">테이블 매핑에 사용할 소스 테이블의 이름입니다.</param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.String,HIE.Framework.Data.DataItemPack)">
            <summary>
            DataSet과 DataTable 이름을 사용하여 지정된 범위에서 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다.</param>
            <param name="startRecord">0부터 시작되는 시작 레코드 번호입니다.</param>
            <param name="maxRecords">검색할 수 있는 최대 레코드 수입니다.</param>
            <param name="srcTable">테이블 매핑에 사용할 소스 테이블의 이름입니다.</param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.SupposedDatabase.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.String,System.Data.CommandType,HIE.Framework.Data.DataItemPack)">
            <summary>
            DataSet과 DataTable 이름을 사용하여 지정된 범위에서 데이터 소스의 행과 일치하도록 DataSet의 행을 추가하거나 새로 고칩니다.
            </summary>
            <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 DataSet입니다.</param>
            <param name="startRecord">0부터 시작되는 시작 레코드 번호입니다.</param>
            <param name="maxRecords">검색할 수 있는 최대 레코드 수입니다.</param>
            <param name="srcTable">테이블 매핑에 사용할 소스 테이블의 이름입니다.</param>
            <param name="cmdText">데이터 소스에 대해 실행할 텍스트 명령입니다.</param>
            <param name="cmdType">실행할 텍스트 명령이 해석되는 방법 입니다.</param>
            <param name="dataObject">명령 실행시 사용할 DataObject 정보 입니다.</param>
            <returns>DataSet에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        </member>
        <member name="P:HIE.Framework.Data.SupposedDatabase.DatabaseConverter">
            <summary>
            IDatabaseParameterTypeConverter 를 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.SupposedDatabase.DataBaseName">
            <summary>
            현재 인스턴스를 식별 하기 위한 데이터 베이스 이름을 가져 오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.SupposedDatabase.DataBaseType">
            <summary>
            현재 인스턴스 에 대한 데이터 베이스 Type 을 가져 오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.SupposedDatabase.Connection">
            <summary>
            공통으로 사용되는 커넥션을 가져 오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.SupposedDatabase.IsConnected">
            <summary>
            데이터베이스 연결이 되어 있는지 여부를 가져 옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.SupposedDatabase.ConnectionString">
            <summary>
            연결문자열을 가져 오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.SupposedDatabase.Command">
            <summary>
            공통으로 사용되는 커멘더를 가져 오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.SupposedDatabase.DataAdapter">
            <summary>
            공통으로 사용되는 데이터 어뎁터를 가져 오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.SupposedDatabase.ParameterIntial">
            <summary>
            파라메터 이름에 사용되는 기본 이니셜의 이름을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="E:HIE.Framework.Data.SupposedDatabase.Executing">
            <summary>
            (ExecuteNonQuery, ExecuteReader, Fill) 같은 명령 실행 전 발생하는 이벤트 입니다.
            </summary>
        </member>
        <member name="E:HIE.Framework.Data.SupposedDatabase.Executed">
            <summary>
            (ExecuteNonQuery, ExecuteReader, Fill) 같은 명령 실행 후 발생하는 이벤트 입니다.
            </summary>
        </member>
        <member name="E:HIE.Framework.Data.SupposedDatabase.ExcuteFailure">
            <summary>
            (ExecuteNonQuery, ExecuteReader, Fill) 같은 명령 실행 오류(DataExcption)시 발생하는 이벤트 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.Database.#ctor">
            <summary>
            기본 생성자 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.Database.#ctor(System.String)">
            <summary>
            파라메터 이름에 사용되는 기본 이니셜의 이름을 이용하는 인스턴스를 만듭니다.
            </summary>
            <param name="connectionString">연결문자열 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.Database.#ctor(System.String,System.String)">
            <summary>
            연결 문자열 및 파라메터 이름에 사용되는 기본 이니셜의 이름을 이용하는 인스턴스를 만듭니다.
            </summary>
            <param name="connectionString">연결문자열 입니다.</param>
            <param name="parameterIntial">파라메터 이름에 사용되는 기본 이니셜의 이름 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.Database.#ctor(System.String,System.String,HIE.Framework.Data.DatabaseType)">
            <summary>
            연결 문자열 및 파라메터 이름에 사용되는 기본 이니셜의 이름을 이용하는 인스턴스를 만듭니다.
            </summary>
            <param name="connectionString">연결문자열 입니다.</param>
            <param name="parameterIntial">파라메터 이름에 사용되는 기본 이니셜의 이름 입니다.</param>
            <param name="type">시스템에서 사용할 데이터베이스 Type 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.Database.CreateConnection">
            <summary>
            현재 DataBase 에 맞는 IDbConnection 을 만듭니다.
            </summary>
            <returns>IDbConnection</returns>
        </member>
        <member name="M:HIE.Framework.Data.Database.CreateCommand">
            <summary>
            현재 DataBase 에 맞는 IDbCommand 을 만듭니다.
            </summary>
            <returns>IDbCommand</returns>
        </member>
        <member name="M:HIE.Framework.Data.Database.CreateDataAdapter">
            <summary>
            현재 DataBase 에 맞는 DbDataAdapter 을 만듭니다.
            </summary>
            <returns>DbDataAdapter</returns>
        </member>
        <member name="P:HIE.Framework.Data.Database.IsOuter">
            <summary>
            Connection 이 외부에서 생성되었는지 여부 입니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.DatabaseConfiguration">
            <summary>
            데이터베이스 연결 문자열 정보를 갖습니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DatabaseConfiguration.KEY_CONSTR">
            <summary>
            KEY_CONSTR = connectionString
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DatabaseConfiguration.KEY_DBTYPE">
            <summary>
            KEY_DBTYPE = databaseType
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DatabaseConfiguration.#ctor">
            <summary>
            기본 생성자입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DatabaseConfiguration.#ctor(System.String)">
            <summary>
            이름을 갖고 생성을 합니다.
            </summary>
            <param name="name">연결 문자열 정보를 구분할 수 있는 이름</param>
        </member>
        <member name="P:HIE.Framework.Data.DatabaseConfiguration.ConnectionString">
            <summary>
            연결 문자열 정보를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DatabaseConfiguration.DatabaseType">
            <summary>
            데이터베이스 타입 정보를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.DatabaseConfigurationGroup">
            <summary>
            데이터베이스 환경 설정 구성을 그룹화합니다.    
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DatabaseConfigurationGroup.KEY_DEFDBNAME">
            <summary>
            KEY_DEFDBNAME = defaultDatabaseName
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DatabaseConfigurationGroup.KEY_DBS">
            <summary>
            KEY_DBS = Databases
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DatabaseConfigurationGroup.DefaultDatabaseName">
            <summary>
            데이터베이스 기본 선택값을 가져옵니다.
            <remarks>
            구성 요소에서 <c>defaultDatabaseName</c> 속성값과 동일합니다.
            </remarks>
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DatabaseConfigurationGroup.Databases">
            <summary>
            데이터베이스 설정 아이템을 가져옵니다.
            <remarks>
            구성 요소에서 <c>Databases</c> 요소와 동일합니다.
            </remarks>
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.DatabaseConverter">
            <summary>
            데이터베이스 타입에 따라 IDbConnection, IDbCommand, IDbDataAdapter, IDbDataParameter, DbType 을 변환 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DatabaseConverter.Connection(HIE.Framework.Data.DatabaseType)">
            <summary>
            데이터베이스 Type 에 따라 IDbConnection 을 변환 합니다.
            </summary>
            <param name="type">데이터베이스 Type 입니다.</param>
            <returns>변환된 IDbConnection</returns>
        </member>
        <member name="M:HIE.Framework.Data.DatabaseConverter.Command(HIE.Framework.Data.DatabaseType)">
            <summary>
            데이터베이스 Type 에 따라 IDbCommand 을 변환 합니다.
            </summary>
            <param name="type">데이터베이스 Type 입니다.</param>
            <returns>변환된 IDbCommand 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DatabaseConverter.DataAdapter(HIE.Framework.Data.DatabaseType)">
            <summary>
            데이터베이스 Type 에 따라 IDbDataAdapter 을 변환 합니다.
            </summary>
            <param name="type">데이터베이스 Type 입니다.</param>
            <returns>변환된 IDbDataAdapter 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DatabaseConverter.DataParameter(HIE.Framework.Data.DatabaseType,HIE.Framework.Data.ItemCollection)">
            <summary>
            데이터베이스 Type 에 따라 IDbDataParameter[] 을 변환 합니다.
            </summary>
            <param name="type">데이터베이스 Type 입니다.</param>
            <param name="itemCollection">파라미터로 생성할 ItemCollection 개체 입니다.</param>
            <returns>변환된 IDbDataParameter[] 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DatabaseConverter.PrarameterConverter(HIE.Framework.Data.DataItemPackMember,HIE.Framework.Data.DatabaseType)">
            <summary>
            데이터베이스 Type 에 따라 IDbDataParameter 을 변환 합니다.
            </summary>
            <param name="item">파라미터 컬렉션의 멤버로 전달될 DataItemPackMember 입니다.</param>
            <param name="dbType">데이터베이스 Type 입니다.</param>
            <returns>변환된 IDbDataParameter 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DatabaseConverter.ParameterTypeCasting(HIE.Framework.Data.DataItemPackMemberType,HIE.Framework.Data.DatabaseType)">
            <summary>
            데이터베이스 Type 에 따라 DBType 개체를 매핑 시킵니다.
            </summary>
            <param name="itemtype">파라미터로 전달될 걸렉션 멤버 개체의 DataItemPackMemberType 입니다.</param>
            <param name="dbType">데이터베이스 Type 입니다.</param>
            <returns>int형으로 타입캐스팅된 파라미터 타입</returns>
        </member>
        <member name="M:HIE.Framework.Data.DatabaseConverter.Dispose">
            <summary>
            리소스를 해지합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DatabaseConverter.Dispose(System.Boolean)">
            <summary>
            리소스를 해지합니다.
            </summary>
            <param name="disposing">
            관리되는 리소스가 해제되어야 하면 true이고, 관리되지 않는 리소스만 해제되어야 하면 false입니다.
            </param>
        </member>
        <member name="T:HIE.Framework.Data.DataException">
            <summary>
            <see cref="T:HIE.Framework.ExceptionHandler"/>에 의해 핸들링된 예외가 아닌 System.Exception 을 상속받은 예외형식 입니다.
            <para><c>System.Exception</c> 정책에 따르며 System.Data.Common.DbException 을 InnerException 으로 포함 합니다.</para>
            <para>HelpLink 가 재정의 되어 base.InnerException 에서의 HelpLink 는 제거되며 전송된 Query 의 확인을 위한 각종 정보로 채워집니다.</para>
            </summary>
            <remarks>
            <c>ExceptionHandlerException</c> 형식과는 달리 DataAccessLayer 의 오류 발생시 Database 로 전송되는 각종 Query 의 확인을 위하여 사용됩니다.
            </remarks>
        </member>
        <member name="F:HIE.Framework.Data.DataException._trackingQry">
            <summary>
            Query 의 실행 문장을 제공하기 위한 멤버 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataException._baseEx">
            <summary>
            오류가 발생한 예외에 대한 기본 클래스 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataException._pack">
            <summary>
            Database 에 적용된 CommandText 에 대한 parameters 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataException.#ctor(System.String,HIE.Framework.Data.DataItemPack,System.Data.Common.DbException)">
            <summary>
            <c>DataException</c>을 생성합니다.
            </summary>
            <param name="message">발생된 예외 메시지 입니다.</param>
            <param name="pack">Database 질의에 사용된 DataItemPack 입니다.</param>
            <param name="innerException">내부 예외 객체 입니다.</param>
        </member>
        <member name="P:HIE.Framework.Data.DataException.HelpLink">
            <summary>
            이 예외와 관련된 도움말 파일에 관련 된 링크를 가져오거나 설정 합니다.
            <para>
            HIE.Framework 에서는 Query 의 실행 추적을 위한 값을 제공 합니다.
            </para>
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.DataItem">
            <summary>
            ItemCollection 의 멤버 입니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.IItem">
            <summary>
            IItem 에서 사용하는 일반 메소드를 정의 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.IItem.Clone">
            <summary>
            Item 의 복사본을 만듭니다.
            </summary>
            <returns>IItem 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.IItem.ToString">
            <summary>
            Item 의 string 입니다.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:HIE.Framework.Data.IItem.ItemCasting">
            <summary>
            상속된 클래스를 형변환 합니다.
            </summary>
            <returns>IItem 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.Data.IItem.Name">
            <summary>
            IItem 의 name 을 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.IItem.Value">
            <summary>
            IItem 의 System.Object 를 가져옵니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItem._name">
            <summary>
            DataItem 의 이름 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItem._value">
            <summary>
            DataItem 의 값 입니다.  
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataItem.#ctor">
            <summary>
            "" 의 Name 과 null 값을 입력하여 DataItem 을 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataItem.#ctor(System.String,System.Object)">
            <summary>
            이름과 값을 입력하여 DataItem 을 생성 합니다.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:HIE.Framework.Data.DataItem.HIE#Framework#Data#IItem#Clone">
            <summary>
            복사본을 만듭니다.
            </summary>
            <returns>복사본 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItem.Clone">
            <summary>
            복사본을 만듭니다.
            </summary>
            <returns>복사본 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItem.ToString">
            <summary>
            DataObjectItem의 문자열 값 입니다.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItem.HIE#Framework#Data#IItem#ItemCasting">
            <summary>
            DataItem 을 형변환 합니다.
            </summary>
            <returns>IItem 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItem.ItemCasting">
            <summary>
            현재의 DataItem 을 DataItemPackMember 개체로 형변환 합니다.
            </summary>
            <returns>(IItem)DataItemPackMember 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.Data.DataItem.Name">
            <summary>
            DataItem 의 name 을 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataItem.Value">
            <summary>
            DataItem 의 Object 를 가져옵니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.DataItemPack">
             <summary>
             데이터베이스에 액세스할 파라미터 개체입니다.
             </summary>
             <remarks>
             <para>DataItemPack 클래스는 Database 클래스가 SQL 쿼리 혹은 Stored procedure의 파라미터 용도로 사용됩니다.</para>
             <para>DataItemPack 객체에 파라미터 정보를 채우기 위해서 Add메소드를 사용하며, Add 메소드는 키와 값을 기본 인자로 갖습니다. 
             또한 DataItem 객체를 생성하여 Add 메소드의 인자로 넘겨, 파라미터 정보를 채울 수도 있습니다.</para>
             </remarks>
             <example>
             다음 코드 예제에서는 <c>DataItemPack</c>을 사용하여 자료를 적재하여 적재된 결과를 출력합니다.
             <code>
             using System;
             using System.Collections.Generic;
             using System.Text;
             using System.Data;
             using System.Collections;
             using HIE.Framework.Data;
             
             class DataItemPackSample
             {
                 static void Main()
                 {
                     DataItemPack pack = new DataItemPack();
                     pack.Add("Name", "Hulk");
                     pack.Add("Age", 30, 4);
                     pack.Add("Gender", "Male", 5, DataItemPackMemberType.VARCHAR);
                     pack.Add("Comment", "He is a super hero.", 256, DataItemPackMemberType.VARCHAR, ParameterDirection.Input);
            
                     DataItem powerItem = new DataItem();
                     powerItem.Name = "Power";
                     powerItem.Value = 2500;
            
                     pack.Add(powerItem);
                     
                     IEnumerator iterator = pack.GetEnumerator();
                     while (iterator.MoveNext())
                     {
                         IItem item = iterator.Current as IItem;
                         Console.WriteLine(item.Name + "-" + item.Value.ToString());
                     }            
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:HIE.Framework.Data.IDataObject">
            <summary>
            IDataObject 에서 사용하는 일반 메소드를 정의 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.IDataObject.Add(HIE.Framework.Data.IItem)">
            <summary>
            DataObjectItem 을 등록 합니다.
            </summary>
            <param name="dataObjectItem">등록할 DataObjectItem 입니다.</param>
            <returns>IItem</returns>
        </member>
        <member name="M:HIE.Framework.Data.IDataObject.Add(System.String,System.Object)">
            <summary>
            DataObjectItem을 name 과 value 를 제공하여 추가 합니다.
            </summary>
            <param name="name">등록할 DataObjectItem name 입니다.</param>
            <param name="value">등록할 DataObjectItem value 입니다.</param>
            <returns>현재 DataObject 에 등록된 총 DataObjectItem 갯수 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.IDataObject.Remove(System.Int32)">
            <summary>
            지정된 key 의 DataObjectItem 을 제거 합니다.
            제거된 후 DataObject 의 DataObjectItem key 는 재구성 됩니다.
            </summary>
            <param name="key">제거할 key</param>
            <returns>제거 완료 여부</returns>
        </member>
        <member name="M:HIE.Framework.Data.IDataObject.Remove(System.String)">
            <summary>
            지정된 key 의 DataObjectItem 을 제거 합니다.
            제거된 후 DataObject 의 DataObjectItem key 는 재구성 됩니다.
            </summary>
            <param name="name">제거할 DataObjectItem name</param>
            <returns>제거 완료 여부</returns>
        </member>
        <member name="M:HIE.Framework.Data.IDataObject.Clone">
            <summary>
            Item 의 복사본을 만듭니다.
            </summary>
            <returns>object</returns>
        </member>
        <member name="P:HIE.Framework.Data.IDataObject.Item(System.Int32)">
            <summary>
            index 로 지정된 DataObjectItem 을 가져오거나 설정합니다.
            해당 index 에 대한 DataObjectItem이 존재 하지 않을 경우 null 을 반환 합니다.
            </summary>
            <param name="index">검색할 위치의 index 입니다.</param>
            <returns>DataObjectItem 의 interface 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.Data.IDataObject.Item(System.String)">
            <summary>
            name 으로 지정된 DataObjectItem 을 가져오거나 설정합니다.
            해당 name 에 대한 DataObjectItem이 존재 하지 않을 경우 null 을 반환 합니다.
            </summary>
            <param name="name">검색할 DataObjectItem 의 이름 입니다..</param>
            <returns>DataObjectItem 의 interface 입니다.</returns>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPack._col">
            <summary>
            ItemCollection 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPack._enumerator">
            <summary>
            DataObjectEnumerator 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.#ctor">
            <summary>
            기본 생성자 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.#ctor(HIE.Framework.Data.ItemCollection)">
            <summary>
            Collection.ItemCollection 을 등록하여 DataObject 를 생성합니다.
            </summary>
            <param name="collection">Collection.ItemCollection </param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.Add(HIE.Framework.Data.IItem)">
            <summary>
            DataObjectItem 을 추가 합니다.
            </summary>
            <param name="dataObjectItem">등록할 DataObjectItem 입니다.</param>
            <returns></returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.Add(System.String,System.Object)">
            <summary>
            DataObjectItem을 name 과 value 를 제공하여 추가 합니다.
            </summary>
            <param name="name">등록할 DataObjectItem name 입니다.</param>
            <param name="value">등록할 DataObjectItem value 입니다.</param>
            <returns>현재 DataObject 에 등록된 총 DataObjectItem 갯수 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.Add(System.String,System.Object,System.Int32)">
            <summary>
            DataObjectItem을 name 과 value, value 의 size 를 제공하여 추가 합니다.
            </summary>
            <param name="name">등록할 DataObjectItem name 입니다.</param>
            <param name="value">등록할 DataObjectItem value 입니다.</param>
            <param name="size">등록할 DataObjectItem value 의 size 입니다.</param>
            <returns>현재 DataObject 에 등록된 총 DataObjectItem 갯수 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.Add(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            DataObjectItem을 name 과 value, value 의 size 를 제공하여 추가 합니다.
            </summary>
            <param name="name">등록할 DataObjectItem name 입니다.</param>
            <param name="value">등록할 DataObjectItem value 입니다.</param>
            <param name="direction">등록할 DataObjectItem ParameterDirection enum 입니다.</param>
            <returns>현재 DataObject 에 등록된 총 DataObjectItem 갯수 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.Add(System.String,System.Object,HIE.Framework.Data.DataItemPackMemberType)">
            <summary>
            DataObjectItem을 name 과 value, value 의 size 를 제공하여 추가 합니다.
            </summary>
            <param name="name">등록할 DataObjectItem name 입니다.</param>
            <param name="value">등록할 DataObjectItem value 입니다.</param>
            <param name="type">등록할 DataObjectItem value 의 DataObjectItemType 입니다.</param>
            <returns>현재 DataObject 에 등록된 총 DataObjectItem 갯수 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.Add(System.String,System.Object,System.Int32,HIE.Framework.Data.DataItemPackMemberType)">
            <summary>
            DataObjectItem을 name 과 value, value 의 size 를 제공하여 추가 합니다.
            </summary>
            <param name="name">등록할 DataObjectItem name 입니다.</param>
            <param name="value">등록할 DataObjectItem value 입니다.</param>
            <param name="size">등록할 DataObjectItem value 의 size 입니다.</param>
            <param name="type">등록할 DataObjectItem value 의 DataObjectItemType 입니다.</param>
            <returns>현재 DataObject 에 등록된 총 DataObjectItem 갯수 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.Add(System.String,System.Object,System.Int32,HIE.Framework.Data.DataItemPackMemberType,System.Data.ParameterDirection)">
            <summary>
            DataObjectItem을 name 과 value, value 의 size 를 제공하여 추가 합니다.
            </summary>
            <param name="name">등록할 DataObjectItem name 입니다.</param>
            <param name="value">등록할 DataObjectItem value 입니다.</param>
            <param name="size">등록할 DataObjectItem value 의 size 입니다.</param>
            <param name="type">등록할 DataObjectItem value 의 DataObjectItemType 입니다.</param>
            <param name="parameterDirection">등록할 DataObjectItem 의 System.Data.ParameterDirection 입니다.</param>
            <returns>현재 DataObject 에 등록된 총 DataObjectItem 갯수 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.GetItem(System.Int32)">
            <summary>
            지정된 index 의 IItem 을 가져옵니다.
            </summary>
            <param name="index">검색할 index 입니다.</param>
            <returns>IItem 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.GetItem(System.String)">
            <summary>
            지정된 name 의 IItem 을 가져옵니다.
            </summary>
            <param name="name">검색할 name 입니다.</param>
            <returns>IItem 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.GetItem">
            <summary>
            지정된 name 의 IItem 을 가져옵니다.
            </summary>
            <returns>IItem 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.GetItems">
            <summary>
            DataObject 의 IItem [] 을 가져 옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.Remove(System.String)">
            <summary>
            지정된 name 의 IItem 을 삭제 합니다.
            </summary>
            <param name="name">검색할 name 입니다.</param>
            <returns>삭제여부 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.Remove(System.Int32)">
            <summary>
            지정된 index 의 IItem 을 삭제 합니다.
            </summary>
            <param name="key">검색할 index 입니다.</param>
            <returns>삭제여부 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.HIE#Framework#Data#IDataObject#Clone">
            <summary>
            DataObjectItem의 복사본을 만듭니다.
            </summary>
            <returns>복사본 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.Clone">
            <summary>
            DataObjectItem의 복사본을 만듭니다.
            </summary>
            <returns>복사본 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.MoveFirst">
            <summary>
            DataObjectEnumerator Current 를 처음으로 이동 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.MoveNext">
            <summary>
            DataObjectEnumerator 다음 Current 로 이동 합니다.
            </summary>
            <returns>이동된 CurrentIndex 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.MovePrev">
            <summary>
            DataObjectEnumerator 이전 Current 로 이동 합니다.
            </summary>
            <returns>이동된 CurrentIndex 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.MoveLast">
            <summary>
            DataObjectEnumerator 마지막 Current 로 이동 합니다.
            </summary>
            <returns>마지막 CurrentIndex 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.CopyTo(System.Array,System.Int32)">
            <summary>
            컬렉션의 데이터를 복사 합니다.
            </summary>
            <param name="array">복사된 데이터가 쓰여질 1차원 배열 입니다.</param>
            <param name="index">array에 쓰여질 시작 위치 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.Clear">
            <summary>
            DataItemPack 개체를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.ClearParamValues">
            <summary>
            DataItemPack 의 Paramters 의 각 요소 Value 를 제거(null)합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.GetEnumerator">
            <summary>
            System.Collections.IEnumerable.GetEnumerator() 을 구현 합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.GetDataObjectEnumerator">
            <summary>
            DataObjectEnumerator 를 생성 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.GetSchema">
            <summary>
            스키마를 반환합니다.
            </summary>
            <returns>null(정의된 스키마는 없습니다.)</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="T:System.Xml.Serialization.XmlSerializer"/>에 의해 호출되는 메소드입니다.
            </summary>
            <param name="reader">XML 판독기</param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPack.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="T:System.Xml.Serialization.XmlSerializer"/>에 의해 호출되는 메소드입니다.
            </summary>
            <param name="writer">XML 작성기</param>
        </member>
        <member name="P:HIE.Framework.Data.DataItemPack.Item(System.Int32)">
            <summary>
            ItemCollection 의 지정 index 의 IItem 을 가져오거나 설정 합니다.
            해당 index 의 IItem 이 없으면 null 을 반환하거나 마지막 인덱스 에 추가 합니다.
            </summary>
            <param name="index">인덱스 입니다.</param>
            <returns>DataObjectItem 의 interface 인 IItem 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.Data.DataItemPack.Item(System.String)">
            <summary>
            ItemCollection 의 지정 name 의 IItem 을 가져오거나 설정 합니다.
            해당 name 의 IItem 이 없으면 null 을 반환하거나 해당 name 으로 추가 합니다.
            </summary>
            <param name="name">이름 입니다..</param>
            <returns>DataObjectItem 의 interface 인 IItem 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.Data.DataItemPack.Count">
            <summary>
            ItemCollection 의 갯수를 가져 옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataItemPack.IsSynchronized">
            <summary>
            액세스가 동기화되거나 스레드로부터 안전한지 여부를 나타내는 값을 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataItemPack.SyncRoot">
            <summary>
            액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.DataItemPackEnumerator">
            <summary>
            DataItemPack 에서 DataItem 을 반복할 수 있는 IEnumerator 상속 클래스 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackEnumerator._data">
            <summary>
            DataObject 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackEnumerator._index">
            <summary>
            현재 DataObject 인덱스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackEnumerator.#ctor(HIE.Framework.Data.DataItemPack)">
            <summary>
            DataObject 로 DataObjectEnumerator 를 생성 합니다.
            </summary>
            <param name="data">DataObject 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackEnumerator.MoveNext">
            <summary>
            열거자를 컬렉션의 다음요소로 이동 합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackEnumerator.Reset">
            <summary>
            컬렉션의 첫번째 요소 초기 위치에 열거자를 설정 합니다. 
            DataObjectEnumerator 에서는 0 으로 설정 됩니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataItemPackEnumerator.Current">
            <summary>
            컬렉션의 현재 요소를 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataItemPackEnumerator.CurrentIndex">
            <summary>
            현재 열거자의 위치를 가져옵니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.DataItemPackMember">
            <summary>
            DataObject 의 Item Class 입니다. 
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMember._name">
            <summary>
            DataObjectItem 의 이름 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMember._value">
            <summary>
            DataObjectItem 의 값 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMember._type">
            <summary>
            DataObjectItem 의 DataObjectItemType 입니다.
            DataObjectItem 이 Database 에 적용될 경우 object Type 에 따라 Parameter Type 에 영향을 줍니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMember._size">
            <summary>
            DataObjectItem 의 길이 입니다.
            DataObjectItem 이 Database 에 적용될 경우 길이에 따라 Parameter Type 에 영향을 줍니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMember._ParameterDirection">
            <summary>
            DataObjectItem 의 System.Data.ParameterDirection 입니다.
            DataObjectItem 이 Database 에 적용될 경우 활용 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.#ctor">
            <summary>
            DataObjectItem 의 기본생성자 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.#ctor(HIE.Framework.Data.DataItemPackMember)">
            <summary>
            DataItemPackMember 으로 DataItemPackMember 을 생성 합니다.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.#ctor(HIE.Framework.Data.DataItem)">
            <summary>
            DataItem 으로 DataItemPackMember 을 생성합니다.
            </summary>
            <param name="item">DataItem 개체 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.#ctor(System.String)">
            <summary>
            DataObjectItem 의 생성자 입니다.
            <para>name 을 지정하여 DataObjectItem 을 생성합니다.</para>
            <para>value 는 "" 로 지정 됩니다.</para>
            </summary>
            <param name="name">string</param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.#ctor(System.String,System.Object)">
            <summary>
            DataObjectItem 의 생성자 입니다.
            <para>이름, 값을 지정하여 DataObjectItem 을 생성합니다.</para>
            </summary>
            <param name="name">string</param>
            <param name="value">object</param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.#ctor(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            DataObjectItem 의 생성자 입니다.
            <para>이름, 값, ParameterDirection 을 지정하여 DataObjectItem 을 생성합니다.</para>
            </summary>
            <param name="name">string</param>
            <param name="value">object</param>
            <param name="direction">direction</param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            DataObjectItem 의 생성자 입니다.
            <para>이름, 값, 사이즈를 지정하여 DataObjectItem 을 생성합니다.</para>
            </summary>
            <param name="name">string</param>
            <param name="value">object</param>
            <param name="size">long</param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.#ctor(System.String,System.Object,HIE.Framework.Data.DataItemPackMemberType)">
            <summary>
            DataObjectItem 의 생성자 입니다.
            <para>이름, 값, DataObjectItemType 을 지정하여 DataObjectItem 을 생성합니다.</para>
            </summary>
            <param name="name">string</param>
            <param name="value">object</param>
            <param name="type">DataObjectItemType</param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.#ctor(System.String,System.Object,System.Int32,HIE.Framework.Data.DataItemPackMemberType)">
            <summary>
            DataObjectItem 의 생성자 입니다.
            <para>이름, 값, 길이, DataObjectItemType 을 지정하여 DataObjectItem 을 생성합니다.</para>
            </summary>
            <param name="name">string</param>
            <param name="value">object</param>
            <param name="size">long</param>
            <param name="type">DataObjectItemType</param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.#ctor(System.String,System.Object,System.Int32,HIE.Framework.Data.DataItemPackMemberType,System.Data.ParameterDirection)">
            <summary>
            DataObjectItem 의 생성자 입니다.
            <para>이름, 값, 길이, DataObjectItemType 을 지정하여 DataObjectItem 을 생성합니다.</para>
            </summary>
            <param name="name">string</param>
            <param name="value">object</param>
            <param name="size">long</param>
            <param name="type">DataObjectItemType</param>
            <param name="parameterDirection">System.Data.ParameterDirection</param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.TypeCasting">
            <summary>
            DataObjectItem 의 System.Object 에 대한 System.Type 을 DataObjectItemType 과 매칭 시킵니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.TypeCasting(System.Object)">
            <summary>
            지정된 System.Object 개체를 DataItemPackMemberType 개체를 으로 형변환 합니다.
            </summary>
            <param name="value">DataItemPackMemberType 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.HIE#Framework#Data#IItem#Clone">
            <summary>
            DataObjectItem의 복사본을 만듭니다.
            </summary>
            <returns>복사본 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.Clone">
            <summary>
            DataObjectItem의 복사본을 만듭니다.
            </summary>
            <returns>복사본 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.ToString">
            <summary>
            DataObjectItem의 문자열 값 입니다.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.HIE#Framework#Data#IItem#ItemCasting">
            <summary>
            IItem 으로 반환 합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HIE.Framework.Data.DataItemPackMember.ItemCasting">
            <summary>
            DataItemPackMember 을 IItem 으로 형변환 합니다.
            </summary>
            <returns>IItem 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.Data.DataItemPackMember.Name">
            <summary>
            DataObjectItem 의 name 을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataItemPackMember.Value">
            <summary>
            DataObjectItem 의 System.Object 를 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataItemPackMember.Type">
            <summary>
            DataObjectItem 의 DataObjectItemType 을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataItemPackMember.Size">
            <summary>
            DataObjectItem 의 size 을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataItemPackMember.Direction">
            <summary>
            DataObjectItem 의 ParameterDirection 을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.DataTransferObject">
            <summary>
            사용자 정의 클래스에서 사용될 수 있는 데이터 개체 입니다.
            <para>
            DataItem 을 구성요소로 같는 ICollection 상속 개체 이며, System.Data.DataRow 에 해당 합니다.
            </para>
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataTransferObject._col">
            <summary>
            ItemCollection 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataTransferObject._enumerator">
            <summary>
            DataObjectEnumerator 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.#ctor">
            <summary>
            기본 생성자 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.#ctor(HIE.Framework.Data.ItemCollection)">
            <summary>
            Collection.ItemCollection 을 등록하여 DataTransferObject 를 생성합니다.
            </summary>
            <param name="collection">Collection.ItemCollection </param>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.Add(HIE.Framework.Data.IItem)">
            <summary>
            DataItem 을 추가 합니다.
            </summary>
            <param name="dataItem">등록할 DataItem 입니다.</param>
            <returns></returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.Add(System.String,System.Object)">
            <summary>
            DataItem 을 name 과 value 를 제공하여 추가 합니다.
            </summary>
            <param name="name">등록할 DataItem name 입니다.</param>
            <param name="value">등록할 DataItem value 입니다.</param>
            <returns>현재 DataTransferObject 에 등록된 총 DataItem 갯수 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.GetItem(System.Int32)">
            <summary>
            지정된 index 의 IItem 을 가져옵니다.
            </summary>
            <param name="index">검색할 index 입니다.</param>
            <returns>IItem 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.GetItem(System.String)">
            <summary>
            지정된 name 의 IItem 을 가져옵니다.
            </summary>
            <param name="name">검색할 name 입니다.</param>
            <returns>IItem 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.GetItem">
            <summary>
            지정된 name 의 IItem 을 가져옵니다.
            </summary>
            <returns>IItem 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.GetItems">
            <summary>
            DataObject 의 IItem [] 을 가져 옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.Remove(System.String)">
            <summary>
            지정된 name 의 IItem 을 삭제 합니다.
            </summary>
            <param name="name">검색할 name 입니다.</param>
            <returns>삭제여부 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.Remove(System.Int32)">
            <summary>
            지정된 index 의 IItem 을 삭제 합니다.
            </summary>
            <param name="key">검색할 index 입니다.</param>
            <returns>삭제여부 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.HIE#Framework#Data#IDataObject#Clone">
            <summary>
            DataTransferObject의 복사본을 만듭니다.
            </summary>
            <returns>복사본 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.Clone">
            <summary>
            DataTransferObject의 복사본을 만듭니다.
            </summary>
            <returns>복사본 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.MoveFirst">
            <summary>
            DataTransferObjectEnumerator Current 를 처음으로 이동 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.MoveNext">
            <summary>
            DataTransferObjectEnumerator 다음 Current 로 이동 합니다.
            </summary>
            <returns>이동된 CurrentIndex 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.MovePrev">
            <summary>
            DataTransferObjectEnumerator 이전 Current 로 이동 합니다.
            </summary>
            <returns>이동된 CurrentIndex 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.MoveLast">
            <summary>
            DataTransferObjectEnumerator 마지막 Current 로 이동 합니다.
            </summary>
            <returns>마지막 CurrentIndex 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.CopyTo(System.Array,System.Int32)">
            <summary>
            컬렉션의 데이터를 복사 합니다.
            </summary>
            <param name="array">복사된 데이터가 쓰여질 1차원 배열 입니다.</param>
            <param name="index">array에 쓰여질 시작 위치 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.Clear">
            <summary>
            DataItemPack 개체를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.GetEnumerator">
            <summary>
            System.Collections.IEnumerable.GetEnumerator() 을 구현 합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.GetDtoEnumerator">
            <summary>
            DataTransferObjectEnumerator 를 생성 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.GetSchema">
            <summary>
            스키마를 반환합니다.
            </summary>
            <returns>null(정의된 스키마는 없습니다.)</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="T:System.Xml.Serialization.XmlSerializer"/>에 의해 호출되는 메소드입니다.
            </summary>
            <param name="reader">XML 판독기</param>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObject.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="T:System.Xml.Serialization.XmlSerializer"/>에 의해 호출되는 메소드입니다.
            </summary>
            <param name="writer">XML 작성기</param>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObject.Item(System.Int32)">
            <summary>
            ItemCollection 의 지정 index 의 IItem 을 가져오거나 설정 합니다.
            해당 index 의 IItem 이 없으면 null 을 반환하거나 마지막 인덱스 에 추가 합니다.
            </summary>
            <param name="index">인덱스 입니다.</param>
            <returns>DataItem 의 interface 인 IItem 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObject.Item(System.String)">
            <summary>
            ItemCollection 의 지정 name 의 IItem 을 가져오거나 설정 합니다.
            해당 name 의 IItem 이 없으면 null 을 반환하거나 해당 name 으로 추가 합니다.
            </summary>
            <param name="name">이름 입니다..</param>
            <returns>DataItem 의 interface 인 IItem 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObject.Count">
            <summary>
            ItemCollection 의 갯수를 가져 옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObject.IsSynchronized">
            <summary>
            액세스가 동기화되거나 스레드로부터 안전한지 여부를 나타내는 값을 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObject.SyncRoot">
            <summary>
            액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.DataTransferObjectCollection">
             <summary>
             List&lt;DataTransferObject&gt; 개체를 다루는 클래스 입니다.
             <para>
             List&lt;DataTransferObject&gt; 을 DataSource 로 사용하기 위한 기능을 제공 합니다.
             </para>
             <para>
             또한, DataTable 과 List&lt;DataTransferObject&gt; 와의 변환 기능이 포함되어 있습니다.
             </para>
             </summary>
             <example>
             다음 코드 예제에서는 <c>DataTransferObjectManager</c>을 사용하여 목록 개체에 데이터를 바인딩 합니다.
             <code>
             using System;
             using System.Collections.Generic;
             using System.Text;
             using System.Data;
             using System.Collections;
             using HIE.Framework.Data;
             
             public partial class Default
             {
                 protected void Page_Load(object sender, EventArgs e)
                 {
                    BindDropDownList();
                }
            
                public void BindDropDownList()
                {
                    DataTransferObjectManager list = new DataTransferObjectManager();
            
                    for (int i = 1; i &lt;= 10; i++)
                    {
                        DataTransferObject dto = new DataTransferObject();
                        dto.Add("ItemName", (i * 10).ToString() + " 아이템");
                        dto.Add("ItemValue", i.ToString() );
            
                        list.Items.Add(dto);
                    }
            
                    this.HIE_DropDownList1.DataSource = list;
                    this.HIE_DropDownList1.DataTextField = "ItemName";
                    this.HIE_DropDownList1.DataValueField = "ItemValue";
                    this.HIE_DropDownList1.DataBind();
                }
             }
             </code>
             </example>
        </member>
        <member name="F:HIE.Framework.Data.DataTransferObjectCollection.Items">
            <summary>
            DataItem 을 내부요소로 포함하는 DataTransferObject 의 List 개체 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.#ctor">
            <summary>
            기본 생성자 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.#ctor(System.ComponentModel.IContainer)">
            <summary>
            컨테이너를 제공받는 생성자 입니다.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.#ctor(System.Data.DataTable)">
            <summary>
            System.Data.DataTable 을 제공받는 생성자 입니다.
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.Add(System.Object)">
            <summary>
            개체를 BindingList&lt;DataTransferObject&gt; 끝부분에 추가 합니다.
            </summary>
            <param name="value"> BindingList&lt;DataTransferObject&gt; 끝부분에 추가할 개체 입니다.</param>
            <returns>추가한 개체를 포함한  BindingList&lt;DataTransferObject&gt; 요소의 수 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.Clear">
            <summary>
            BindingList&lt;DataTransferObject&gt; 에서 요소를 모두 제거 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.Contains(System.Object)">
            <summary>
            요소가 BindingList&lt;DataTransferObject&gt; 에 있는지 여부를 확인 합니다.
            </summary>
            <param name="value">BindingList&lt;DataTransferObject&gt; 에서 찾을 개체 입니다.
            참조 형식에 대해 값이 null 일 경우 오류가 발생 합니다.
            </param>
            <returns>요소의 존재 여부 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.Insert(System.Int32,System.Object)">
            <summary>
            BindingList&lt;DataTransferObject&gt; 의 지정된 인덱스에 요소를 삽입 합니다.
            </summary>
            <param name="index">개체를 삽입해야 하는 인덱스(0부터 시작) 입니다.</param>
            <param name="value">삽입할 개체 입니다.
            참조 형식에 대해 값이 null 일 경우 오류가 발생 합니다.
            </param>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.Remove(System.Object)">
            <summary>
            BindingList&lt;DataTransferObject&gt; 에서 특정 개체를 제거 합니다.
            </summary>
            <param name="value">제거할 개체 입니다. 참조형식에 대해 null 일 경우 오류가 발생 합니다. </param>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.RemoveAt(System.Int32)">
            <summary>
            BindingList&lt;DataTransferObject&gt; 의 지정한 인덱스에서 요소를 제거 합니다.
            </summary>
            <param name="index">제거할 요소의 0부터 시작 하는 인덱스 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.IndexOf(System.Object)">
            <summary>
            지정한 개체를 검색 하고 BindingList&lt;DataTransferObject&gt; 에서 이 개체가 처음 나타나는 인덱스(0부터 시작)를 반환 합니다.
            </summary>
            <param name="value">BindingList&lt;DataTransferObject&gt; 에서 찾을 개체 입니다. 참조 형식에 대해 값은 null 이 될 수 있습니다.</param>
            <returns>지정한 개체의 인덱스 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            BindingList&lt;DataTransferObject&gt; 의 지정된 인덱스의 DataTransferObject 내부요소(DataItem) 를 지정된 1차원 배열에 복사 합니다.
            </summary>
            <param name="array">DataItem 이 복사될 1차원 배열 입니다.</param>
            <param name="index">1차원 배열에 복사될 DataTransferObject 의 인덱스 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.CopyTo(System.Int32,System.Int32)">
            <summary>
            BindingList&lt;DataTransferObject&gt; 의 지정된 인덱스 사이에 있는 BindingList&lt;DataTransferObject&gt;를 복사본으로 반환 합니다.
            </summary>
            <param name="idxFrom">복사할 BindingList&lt;DataTransferObject&gt; 의 시작 인덱스 입니다.</param>
            <param name="idxTo">복사할 BindingList&lt;DataTransferObject&gt; 의 끝 인덱스 입니다.</param>
            <returns>복사된 BindingList&lt;DataTransferObject&gt; 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.GetEnumerator">
            <summary>
            BindingList&lt;DataTransferObject&gt; 를 반복하는 열거자를 반환 합니다.
            </summary>
            <returns>BindingList&lt;DataTransferObject&gt; 를 반복하는 열거자 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectCollection.GetList">
            <summary>
            DataSource 개체의 IList Collection 을 검색 합니다. 
            </summary>
            <returns>DataSource 로 사용될 IList Collection 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObjectCollection.IsFixedSize">
            <summary>
            BindingList&lt;DataTransferObject&gt; 가 고정 크기인지 여부를 나타내는 값을 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObjectCollection.IsReadOnly">
            <summary>
            개체가 읽기 전용 상태인지 여부를 나타내는 값을 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObjectCollection.Item(System.Int32)">
            <summary>
            index 로 지정된 DataTransferObject 을 가져오거나 설정합니다.
            해당 index 에 대한 DataTransferObject이 존재 하지 않을 경우 null 을 반환 합니다.
            </summary>
            <param name="index">검색할 위치의 index 입니다.</param>
            <returns>DataTransferObject 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObjectCollection.Count">
            <summary>
            BindingList&lt;DataTransferObject&gt; 에 포함된 요소의 수를 반환 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObjectCollection.IsSynchronized">
            <summary>
            스레드로부터 안전한지 여부를 나타내는 값을 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObjectCollection.SyncRoot">
            <summary>
            액세스를 동기화 하는데 사용 할 수 있는 개체를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObjectCollection.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            IList 개체의 컬렉션인지를 반환 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.DataTransferObjectEnumerator">
            <summary>
            DataTransferObject 에서 DataItem 을 반복할 수 있는 IEnumerator 상속 클래스 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataTransferObjectEnumerator._dto">
            <summary>
            DataTransferObject Pack 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataTransferObjectEnumerator._index">
            <summary>
            현재 DataTransferObject 인덱스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectEnumerator.#ctor(HIE.Framework.Data.DataTransferObject)">
            <summary>
            DataTransferObject 로 DataTransferObjectEnumerator 를 생성 합니다.
            </summary>
            <param name="dto">DataTransferObject Pack 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectEnumerator.MoveNext">
            <summary>
            열거자를 컬렉션의 다음요소로 이동 합니다.
            </summary>
            <returns>이동 여부 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.DataTransferObjectEnumerator.Reset">
            <summary>
            컬렉션의 첫번째 요소 초기 위치에 열거자를 설정 합니다. 
            DataTransferObjectEnumerator 에서는 0 으로 설정 됩니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObjectEnumerator.Current">
            <summary>
            컬렉션의 현재 요소를 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.DataTransferObjectEnumerator.CurrentIndex">
            <summary>
            현재 열거자의 위치를 가져옵니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.ExecutingEventHandler">
            <summary>
            명령 실행 전 발생하는 이벤트 핸들러 입니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.ExecutedEventHandler">
            <summary>
            명령 실행 후 발생하는 이벤트 핸들러 입니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.ExcuteFailureEventHandler">
            <summary>
            명령 실행 오류시 발생하는 이벤트 핸들러 입니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.DatabaseType">
            <summary>
            관계형 Database 에 액세스 할 Database 의 Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DatabaseType.SQL">
            <summary>
            Sql Database 에 Access 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DatabaseType.ORACLE">
            <summary>
            Oracle Database 에 Access 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DatabaseType.OLE">
            <summary>
            Ole Database 에 Access 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DatabaseType.ODBC">
            <summary>
            Odbc Database 에 Access 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DatabaseType.MY_SQL">
            <summary>
            MySQL Database 에 Access 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DatabaseType.DEFAULT">
            <summary>
            default Database 에 Access 합니다.
            default Database 는  SQL 로 설정 됩니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.DataItemPackMemberType">
            <summary>
            DataObjectItem 의 정의된 Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.INT">
            <summary>
            DataObjectItem 의 int32, Uint32 Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.TinyINT">
            <summary>
            DataObjectItem 의 Byte ,SByte Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.SmallINT">
            <summary>
            DataObjectItem 의 Int16, UInt16 Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.BigINT">
            <summary>
            DataObjectItem 의 Int64, UInt64 Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.DECIMAL">
            <summary>
            DataObjectItem 의 Decimal Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.CHAR">
            <summary>
            DataObjectItem 의 Char Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.VARCHAR">
            <summary>
            DataObjectItem 의 String Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.DOUBLE">
            <summary>
            DataObjectItem 의 Double Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.SINGLE">
            <summary>
            DataObjectItem 의 Single Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.DateTIME">
            <summary>
            DataObjectItem 의 DateTime Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.NULL">
            <summary>
            DataObjectItem 의 null Type 입니다.
            null 을 반환 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.BINARY">
            <summary>
            DataObjectItem 의 Array Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.BOOL">
            <summary>
            DataObjectItem 의 bool Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.TEXT">
            <summary>
            최대 가변길이 문자열 Type 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.DEFAULT">
            <summary>
            DataObjectItem 의 기본 Type 입니다.
            String 을 반환 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.DataItemPackMemberType.REF_CURSOR">
            <summary>
            Oralce Database 인 경우 DataObjectItem 이 Ref Cursor 임을 정의 합니다.
            <para>Oracle Database 가 아닌 경우 HIE.Framework 에서는 문자열로 인식 합니다.</para>
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.ExcuteFailureEventArgs">
            <summary>
            명령실행 오류에 대한 이벤트 정보를 제공 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.ExecutingEventArgs">
            <summary>
            명령실행에 대한 이벤트 정보를 제공 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.ExecutingEventArgs.#ctor(System.String,System.DateTime,System.String,System.Data.CommandType,HIE.Framework.Data.DataItemPack)">
            <summary>
            명령실행 이벤트 정보를 만듭니다.
            </summary>
            <param name="dataBaseName">명령이 실행된 데이터 베이스 이름 입니다.</param>
            <param name="executingTime">명령이 실행되기 시작한 시간 입니다.</param>
            <param name="commandText">실행할 쿼리문 입니다.</param>
            <param name="commandType">실행할 방식 입니다.</param>
            <param name="dataObject">사용될 DataItemPack 입니다.</param>
        </member>
        <member name="P:HIE.Framework.Data.ExecutingEventArgs.DataBaseName">
            <summary>
            명령이 실행된 데이터 베이스 이름을 가져 옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.ExecutingEventArgs.ExecutingTime">
            <summary>
            명령이 실행되기 이전 시간을 가져 옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.ExecutingEventArgs.CommandText">
            <summary>
            쿼리문을 가져 옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.ExecutingEventArgs.CommandType">
            <summary>
            실행할 방식을 가져 옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.ExecutingEventArgs.DataObject">
            <summary>
            사용된 파라메터을 가져 옵니다
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.ExcuteFailureEventArgs.#ctor(HIE.Framework.Data.ExecutingEventArgs,System.DateTime,HIE.Framework.Data.DataException)">
            <summary>
            기본 생성자 입니다.
            </summary>
            <param name="e">명령 실행 이전 이벤트 정보 입니다.</param>
            <param name="excuteFailureTime">명령이 실행된 후, 오류가 발생한 시간 입니다.</param>
            <param name="dataException">오류가 발생한 Database 의 DataException 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.ExcuteFailureEventArgs.#ctor(System.String,System.DateTime,System.DateTime,System.String,System.Data.CommandType,HIE.Framework.Data.DataItemPack,HIE.Framework.Data.DataException)">
            <summary>
            명령실행 이벤트 정보를 만듭니다.
            </summary>
            <param name="dataBaseName">명령이 실행된 데이터 베이스 이름 입니다.</param>
            <param name="executingTime">명령이 실행되기 시작한 시간 입니다.</param>
            <param name="excuteFailureTime">명령이 실행된 후, 오류가 발생한 시간 입니다.</param>
            <param name="commandText">실행할 쿼리문 입니다.</param>
            <param name="commandType">실행할 방식 입니다.</param>
            <param name="dataObject">사용될 파라메터 입니다.</param>
            <param name="dataException">오류가 발생한 Database 의 DataException 입니다.</param>
        </member>
        <member name="P:HIE.Framework.Data.ExcuteFailureEventArgs.ExcuteFailureTime">
            <summary>
            명령실행 오류 발생 시간을 가져 옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.ExcuteFailureEventArgs.DataException">
            <summary>
            발생된 DataException 을 가져옵니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.ExecutedEventArgs">
            <summary>
            DataBase 에 명령이 실행 완료된 이벤트 정보를 제공 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.ExecutedEventArgs.#ctor(HIE.Framework.Data.ExecutingEventArgs,System.DateTime)">
            <summary>
            기본 생성자 입니다.
            </summary>
            <param name="e">명령 실행 이전 이벤트 정보 입니다.</param>
            <param name="executedTime">실행완료 시간 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.ExecutedEventArgs.#ctor(System.String,System.DateTime,System.DateTime,System.String,System.Data.CommandType,HIE.Framework.Data.DataItemPack)">
            <summary>
            명령실행 이벤트 정보를 만듭니다.
            </summary>
            <param name="dataBaseName">명령이 실행된 데이터 베이스 이름 입니다.</param>
            <param name="executingTime">명령이 실행되기 시작한 시간 입니다.</param>
            <param name="executedTime">명령이 완료된 시간 입니다.</param>
            <param name="commandText">실행할 쿼리문 입니다.</param>
            <param name="commandType">실행할 방식 입니다.</param>
            <param name="dataObject">사용될 파라메터 입니다.</param>
        </member>
        <member name="P:HIE.Framework.Data.ExecutedEventArgs.ExecutedTime">
            <summary>
            명령 실행 완료 시간을 가져 옵니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.IDatabaseParameterTypeConverter">
            <summary>
            Database에서 파라메터 컨버팅 기능을 포함하는 인터페이스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.IDatabaseParameterTypeConverter.SetDbType(HIE.Framework.Data.DataItemPack)">
            <summary>
            지정된 파라메터를 현재 설정에 맞도록 변경 합니다.
            </summary>
            <param name="dataObject">변경할 DataItemPack 입니다.</param>
        </member>
        <member name="T:HIE.Framework.Data.ItemCollection">
            <summary>
            IItem 의 컬렉션 기능을 제공하기 위한 클래스 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.ItemCollection._items">
            <summary>
            IItem[] 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Data.ItemCollection._itemCount">
            <summary>
            IItem[] 의 현재 개수 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.ItemCollection.#ctor">
            <summary>
            기본 생성자 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.ItemCollection.#ctor(System.Int32)">
            <summary>
            복사 생성자 입니다. 지정된 개수 만큼 IItem[count] 로 생성합니다.
            </summary>
            <param name="count">생성될 IItem 의 개수 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.ItemCollection.GetKeys">
            <summary>
            현재 IItem 의 모든 key 를 string [] 로 가져 옵니다.
            </summary>
            <returns>key 의 string[] 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.ItemCollection.IncreaseCount(System.Int32)">
            <summary>
            IItem[] 의 사이즈를 증가 시킵니다.
            </summary>
            <param name="size">증가시킬 개수 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.ItemCollection.Add(System.String,System.Object)">
            <summary>
            key 와 value 를 입력하여 IItem[] 요소를 추가 합니다.
            </summary>
            <param name="key">생성될 IItem 의 name 입니다.</param>
            <param name="value">생성될 IItem 의 value 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.ItemCollection.Add(HIE.Framework.Data.IItem)">
            <summary>
            IItem 을 등록하여 IItem[] 의 요소를 추가합니다.
            </summary>
            <param name="item">추가 할 IItem 요소 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.ItemCollection.IndexOf(System.String)">
            <summary>
            지정된 문자열 에 해당하는 IItem 의 index 를 가져옵니다.
            </summary>
            <param name="key">지정된 문자열 입니다.</param>
            <returns>IItem 의 index 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.ItemCollection.Contains(System.String)">
            <summary>
            지정된 문자열에 해당하는 IItem 이 있는지 검색 합니다. 
            </summary>
            <param name="key">지정된 문자열 입니다.</param>
            <returns>검색 여부 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Data.ItemCollection.Remove(System.String)">
            <summary>
            지정된 문자열에 해당하는 IItem 을 삭제 합니다.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:HIE.Framework.Data.ItemCollection.RemoveAt(System.Int32)">
            <summary>
            지정된 index 로부터 IItem 을 삭제 합니다.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:HIE.Framework.Data.ItemCollection.Clear">
            <summary>
            현재 IItem 요소의 모든 값을 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Data.ItemCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            컬렉션의 데이터를 복사 합니다.
            </summary>
            <param name="array">복사된 데이터가 쓰여질 1차원 배열 입니다.</param>
            <param name="index">array에 쓰여질 시작 위치 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Data.ItemCollection.GetEnumerator">
            <summary>
            System.Collections.IEnumerable.GetEnumerator() 을 구현 합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="P:HIE.Framework.Data.ItemCollection.Item(System.String)">
            <summary>
            key 로 지정된 IItem 을 가져오거나 설정합니다.
            해당 key 로 대한 IItem이 존재 하지 않을 경우 null 을 반환 합니다.
            </summary>
            <param name="key">검색할 key 입니다.</param>
            <returns>interface IItem 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.Data.ItemCollection.Item(System.Int32)">
            <summary>
            index 로 지정된 IItem 을 가져오거나 설정합니다.
            해당 index에 대한 IItem이 존재 하지 않을 경우 null 을 반환 합니다.
            </summary>
            <param name="index">검색할 위치의 index 입니다.</param>
            <returns>interface IItem 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.Data.ItemCollection.Count">
            <summary>
            현재 IItem[] 요소의 총 개수를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.ItemCollection.GetItems">
            <summary>
            현재 IItem[] 를 가져 옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.ItemCollection.IsSynchronized">
            <summary>
            액세스가 동기화되거나 스레드로부터 안전한지 여부를 나타내는 값을 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Data.ItemCollection.SyncRoot">
            <summary>
            액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Data.ItemCollectionEnumerator">
            <summary>
            컬렉션을 반복 할 수 있도록 지원합니다.
            </summary>
        </member>
    </members>
</doc>
