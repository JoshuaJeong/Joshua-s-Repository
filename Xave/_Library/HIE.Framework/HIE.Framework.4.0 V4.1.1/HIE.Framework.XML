<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HIE.Framework</name>
    </assembly>
    <members>
        <member name="T:HIE.Framework.BaseConfigCollection`1">
            <summary>
            <c>BaseConfigElement</c> 객체를 갖는 콜렉션 객체입니다.
            </summary>
            <typeparam name="TConfig">
            <c>TConfig</c>는 <c>BaseConfigElement</c>의 파생 객체만을 받습니다.
            </typeparam>
        </member>
        <member name="M:HIE.Framework.BaseConfigCollection`1.CreateNewElement">
            <summary>
            새 요소를 생성합니다.
            </summary>
            <returns>환경 순서 요소(<c>TConfig</c> 파생 객체)</returns>
        </member>
        <member name="M:HIE.Framework.BaseConfigCollection`1.CreateNewElement(System.String)">
            <summary>
            새 요소를 생성합니다.
            </summary>
            <param name="elementName">새 요소의 이름(키)</param>
            <returns>환경 순서 요소(<c>TConfig</c> 파생 객체)</returns>
        </member>
        <member name="M:HIE.Framework.BaseConfigCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            환경 구성 요소의 키값을 반환합니다.
            </summary>
            <param name="element">환경 구성 요소</param>
            <returns>키</returns>
        </member>
        <member name="P:HIE.Framework.BaseConfigCollection`1.Item(System.Int32)">
            <summary>
            순서 값에 의한 환경 구성 요소를 가져오거나 추가합니다.
            </summary>
            <param name="index">순서</param>
            <returns>환경 순서 요소(<c>TConfig</c> 파생 객체)</returns>
        </member>
        <member name="P:HIE.Framework.BaseConfigCollection`1.Item(System.String)">
            <summary>
            키 값에 의한 환경 구성 요소를 가져옵니다.
            </summary>
            <param name="key">키</param>
            <returns>환경 순서 요소(<c>TConfig</c> 파생 객체)</returns>
        </member>
        <member name="T:HIE.Framework.BaseConfigElement">
            <summary>
            환경 설정 구성요소의 요소를 정의합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.BaseConfigElement.KEY_NAME">
            <summary>
            KEY_NAME == name
            </summary>
        </member>
        <member name="M:HIE.Framework.BaseConfigElement.#ctor">
            <summary>
            기본 생성자입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.BaseConfigElement.#ctor(System.String)">
            <summary>
            주어진 <c>name</c>을 키로 하는 요소를 생성합니다.
            </summary>
            <param name="name">
            키, 키는 <c>BaseConfigElement</c> 개체를 둘러싸는 콜렉션 내부에서 유일해야 합니다.
            </param>
        </member>
        <member name="P:HIE.Framework.BaseConfigElement.Name">
            <summary>
            요소의 이름을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.BaseConfigSection">
             <summary>
             최상위 환경 설정 블럭(섹션)을 나타냅니다.
             <c>BaseConfigSection</c> 객첵만으로는 아무 작업도 할 수 없습니다.
             <c>BaseConfigSection</c> 클래스를 상속받아 적절한 환경 섹션 구성을 작성해야합니다.
             </summary>
             <example>
             아래 코드는 섹션 그룹에 데이터베이스 환경설정 그룹과 로그 환경 설정 그룹을 갖습니다.
             <code>
             public class TestConfigSection : BaseConfigSection
             {
                 [ConfigurationProperty("DatabaseGroup")]
                 public DatabaseConfigurationGroup DatabaseGroup
                 {
                     get { return (DatabaseConfigurationGroup)this["DatabaseGroup"]; }
                     set { this["DatabaseGroup"] = value; }
                 }
            
                 [ConfigurationProperty("LogGroup")]
                 public LogConfigurationGroup LogGroup
                 {
                     get { return (LogConfigurationGroup)this["LogGroup"]; }
                     set { this["LogGroup"] = value; }
                 }       
             }
             </code>
             </example>
        </member>
        <member name="F:HIE.Framework.BaseConfigSection.TAB_CHAR">
            <summary>
            TAB_CHAR == \t
            </summary>
        </member>
        <member name="M:HIE.Framework.BaseConfigSection.#ctor">
            <summary>
            기본 생성자입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.BaseConfigSection.SaveXml(System.Xml.XmlTextWriter,System.String)">
            <summary>
            환경 설정 정보를 Xml 파일로 작성합니다.
            </summary>
            <param name="writer">XmlTextWriter 객체</param>
            <param name="rootElementName">
            환경 정보를 감싸는 Xml요소입니다.
            <c>rootElementName</c>이 null이거나 빈 문자열이라면 클래스이름을 요소 이름으로 사용합니다.
            </param>
        </member>
        <member name="M:HIE.Framework.BaseConfigSection.LoadXml(System.Xml.XmlTextReader,System.String)">
            <summary>
            미구현
            </summary>
            <param name="reader">XmlTextReader 객체</param>
            <param name="rootElementName">
            환경 정보를 감싸는 Xml요소입니다.
            </param>
        </member>
        <member name="T:HIE.Framework.LoggingExceptionHandler">
            <summary>
            예외 정보를 로그를 남기는 이벤트를 처리할 메소드를 나타냅니다.
            </summary>
            <param name="sender">이벤트 소스</param>
            <param name="e">로그 정보를 갖는 예외</param>
        </member>
        <member name="T:HIE.Framework.SystemLayer">
            <summary>
            시스템 구성 레이어 열거형
            </summary>
        </member>
        <member name="F:HIE.Framework.SystemLayer.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:HIE.Framework.SystemLayer.PersistenceLayer">
            <summary>
            PersistenceLayer
            </summary>
        </member>
        <member name="F:HIE.Framework.SystemLayer.BusinessRuleLayer">
            <summary>
            BusinessRuleLayer
            </summary>
        </member>
        <member name="F:HIE.Framework.SystemLayer.BusinessFacadeLayer">
            <summary>
            BusinessFacadeLayer
            </summary>
        </member>
        <member name="F:HIE.Framework.SystemLayer.BusinessLogicLayer">
            <summary>
            BusinessLogicLayer
            </summary>
        </member>
        <member name="F:HIE.Framework.SystemLayer.MessageLayer">
            <summary>
            MessageLayer
            </summary>
        </member>
        <member name="F:HIE.Framework.SystemLayer.WindowsSerivceLayer">
            <summary>
            WindowsSerivceLayer
            </summary>
        </member>
        <member name="F:HIE.Framework.SystemLayer.WebSerivceLayer">
            <summary>
            WebSerivceLayer
            </summary>
        </member>
        <member name="F:HIE.Framework.SystemLayer.ModelLayer">
            <summary>
            ModelLayer
            </summary>
        </member>
        <member name="F:HIE.Framework.SystemLayer.ControllerLayer">
            <summary>
            ControllerLayer
            </summary>
        </member>
        <member name="F:HIE.Framework.SystemLayer.GuiLayer">
            <summary>
            GuiLayer
            </summary>
        </member>
        <member name="F:HIE.Framework.SystemLayer.ViewLayer">
            <summary>
            ViewLayer
            </summary>
        </member>
        <member name="F:HIE.Framework.SystemLayer.PresentationLayer">
            <summary>
            PresentationLayer
            </summary>
        </member>
        <member name="T:HIE.Framework.ExceptionHandlePolicy">
            <summary>
            예외 핸들링 정책을 열거합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.ExceptionHandlePolicy.NoAction">
            <summary>
            예외에 대한 핸들링을 무시합니다.(기본값)
            </summary>
        </member>
        <member name="F:HIE.Framework.ExceptionHandlePolicy.Propagating">
            <summary>
            단순히 상위로 전달합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.ExceptionHandlePolicy.Logging">
            <summary>
            로그 정보를 남깁니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.LangCultureType">
            <summary>
            HIE.Framework 에서 사용될 언어유형 입니다.
            <para>각 국가별 언어 유형을 통일 합니다.</para>
            </summary>
        </member>
        <member name="F:HIE.Framework.LangCultureType.Korea">
            <summary>
            한국어
            </summary>
        </member>
        <member name="F:HIE.Framework.LangCultureType.English">
            <summary>
            영어
            </summary>
        </member>
        <member name="F:HIE.Framework.LangCultureType.Arab">
            <summary>
            아랍어
            </summary>
        </member>
        <member name="F:HIE.Framework.LangCultureType.Fresi">
            <summary>
            페르시아어(이란)
            </summary>
        </member>
        <member name="F:HIE.Framework.LangCultureType.Default">
            <summary>
            없음(기본)
            </summary>
        </member>
        <member name="T:HIE.Framework.LoggingLevel">
            <summary>
            log4net 각 수준의 로깅 레벨 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.LoggingLevel.Debug">
            <summary>
            디버깅을 위해 사용됩니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.LoggingLevel.Info">
            <summary>
            정보 제공을 위해 사용 됩니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.LoggingLevel.Warning">
            <summary>
            경고를 위해 사용 됩니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.LoggingLevel.Error">
            <summary>
            일반적인 오류를 위해 사용 됩니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.LoggingLevel.Fatal">
            <summary>
            치명적인 오류를 위해 사용 됩니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.DBAccessType">
            <summary>
            데이터베이스 접속 패턴 유형입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.DBAccessType.HIE_DATABASE">
            <summary>
            HIE.Framework.Data.Database 를 사용하는 접속 패턴 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.DBAccessType.HIE_ORM">
            <summary>
            HIE.Framework.Orm (with NHibernate) 를 사용하는 접속 패턴 입니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Net.DateTimeConverter">
            <summary>
            System.DateTime 개체의 각종 표현을 위한 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Net.DateTimeConverter.YYYYMMDDToLocalDateFormat(System.String)">
            <summary>
            yyyyMMdd 날짜 포맷 문자열을 현재 System.DateTime 개체의 값을 해당하는 긴 날짜 문자열 표현으로 변환합니다.
            </summary>
            <param name="date">yyyyMMdd 날짜 문자열 입니다.</param>
            <returns>현재 System.DateTime 개체의 값을 해당하는 긴 날짜 문자열 표현 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Net.DateTimeConverter.LocalDateToYYYYMMDD(System.String)">
            <summary>
            현재 System.DateTime 개체의 값을 해당하는 긴 날짜 문자열 표현을 yyyyMMdd 문자열로 변환 합니다.
            </summary>
            <param name="date">날짜로 Parsing 이 가능한 문자열 표현 입니다.</param>
            <returns>yyyyMMdd 날짜 문자열 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Net.DateTimeConverter.HHmmssDotfffToDateFormat(System.String)">
            <summary>
            HHmmss.fff 포맷의 문자열을 현재 System.DateTime 개체의 긴 시간 문자열 표현을 포함하는 문자열로 변환합니다.
            </summary>
            <param name="time">HHmmss.fff 포맷의 시간 문자열 입니다.</param>
            <returns>지정된 시간의 현재 System.DateTime 개체의 긴 시간 문자열 표현을 포함하는 문자열 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Net.DateTimeConverter.LocalTimeToHHmmssDotfff(System.String)">
            <summary>
            지정된 System.DateTime 개체의 긴 시간 문자열 표현을 포함하는 문자열을 HHmmss.fff 포맷의 문자열로 변환 합니다.
            </summary>
            <param name="time">System.DateTime 개체의 긴 시간 문자열 표현을 포함하는 문자열 입니다.</param>
            <returns>HHmmss.fff 포맷의 문자열 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Net.DateTimeConverter.DateTimeToHIEDateString(System.DateTime)">
            <summary>
            DateTime 을 HIE 시스템 에서 사용하는 yyyyMMddHHmmss.fff 포맷의 문자열로 반환 합니다.
            </summary>
            <param name="date">변환 할 날짜 입니다.</param>
            <returns>변환 된 yyyyMMddHHmmss.fff 포맷의 문자열 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Net.DateTimeConverter.HIEDateStringToDateTime(System.String)">
            <summary>
            HIE 시스템 에서 사용하는 yyyyMMddHHmmss.fff 의 문자열을 DateTime 으로 반환 합니다.
            </summary>
            <param name="date">yyyyMMddHHmmss.fff 포맷의 문자열 입니다.</param>
            <returns>변환 된 날짜 입니다.</returns>
        </member>
        <member name="T:HIE.Framework.Net.Json">
            <summary>
            개체의 Json 변환 기능을 제공합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Net.Json.Serialize``1(``0)">
            <summary>
            지정된 개체를 직렬화 하여 Json 문자열로 반환 합니다.
            </summary>
            <typeparam name="T">직렬화 가능한 type 입니다.</typeparam>
            <param name="obj">직렬화 할 개체 입니다.</param>
            <returns></returns>
        </member>
        <member name="M:HIE.Framework.Net.Json.Deserialize``1(System.String)">
            <summary>
            Json 문자열을 역직렬화 하여 개체로 반환 합니다.
            </summary>
            <typeparam name="T">반환할 개체 type 입니다.</typeparam>
            <param name="json">역직렬화 할 문자열 입니다.</param>
            <returns></returns>
        </member>
        <member name="T:HIE.Framework.BaseResourceManager">
            <summary>
            HIE 프레임워크 전용 내부 리소스 관리자입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.BaseResourceManager.GetBinary(System.String)">
            <summary>
            바이너리 리소스를 반환합니다.
            </summary>
            <param name="key">키</param>
            <returns>바이너리 리소스</returns>
        </member>
        <member name="M:HIE.Framework.BaseResourceManager.GetError(System.String)">
            <summary>
            에러 메시지를 반환합니다.
            </summary>
            <param name="key">키</param>
            <returns>에러 메시지</returns>
        </member>
        <member name="M:HIE.Framework.BaseResourceManager.GetFormat(System.String)">
            <summary>
            포맷 문자열을 반환합니다.
            </summary>
            <param name="key">키</param>
            <returns>포맷 문자열</returns>
        </member>
        <member name="M:HIE.Framework.BaseResourceManager.GetInformation(System.String)">
            <summary>
            정보 메시지를 반환합니다.
            </summary>
            <param name="key">키</param>
            <returns>정보 메시지</returns>
        </member>
        <member name="M:HIE.Framework.BaseResourceManager.GetResource(System.String,System.String)">
            <summary>
            assembly 명과 resource 클래스 명 이 결합된 combine 명, 리소스 키 를 매개변수로 현재 문화권에 대한 리소스를 반환 합니다.
            </summary>
            <param name="combineName">assembly 명과 resource 클래스 명 이 결합된 combine 명 입니다.
            <para>
            [assembly name] + "|" + [resource name] (ex : "HIE.PT.CO.RS" + "|" + "Common.Dictionary")
            </para>
            </param>
            <param name="resourceKey">문자열 키</param>
            <returns>리소스 값</returns>
        </member>
        <member name="M:HIE.Framework.BaseResourceManager.GetResource(System.String,System.String,System.String[])">
            <summary>
            현재 문화권에 대한 문자열 리소스 값을 반환 합니다.
            </summary>
            <param name="className">
            /// 리소스의 루트 이름입니다.
            예를 들어, "MyResource.en-US.resources"라는 리소스 파일의 루트 이름은 "MyResource"입니다.</param>
            <param name="resourceKey">문자열 키</param>
            <param name="args">리소스 값에 설정된 {} 와 대응할 목록 입니다.</param>
            <returns>리소스 값 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.BaseResourceManager.Culture">
            <summary>
            지역화하는 리소스에 대한 culture를 나타내는 <see cref="T:System.Globalization.CultureInfo"/> 개체를 가져오거나 설정합니다.
            </summary>
            <value>
            사용자가 특정 culture로 변경하지 않는다면 기본 culture를 사용합니다.
            </value>
        </member>
        <member name="T:HIE.Framework.BaseResourceProviderManager">
            <summary>
            HIE.Framework 외부 전역 리소스 검색 기능을 제공하는 리소스 공급 관리자 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.BaseResourceProviderManager._default">
            <summary>
            전역 리소스 공급 관리자 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.BaseResourceProviderManager._lock">
            <summary>
            Singleton 기능을 위한 개체 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.BaseResourceProviderManager._sync">
            <summary>
            특정 클래스 명에 해당하는 리소스 공급자에 대한 Singleton 기능을 위한 개체 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.BaseResourceProviderManager._resourceProvider">
            <summary>
            ResourceManager 의 키 와 쌍의 컬렉션 입니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.BaseResourceProviderManager.Default">
            <summary>
            기본 리소스 공급 관리자를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.BaseResourceProviderManager.Item(System.String)">
            <summary>
            지정된 클래스 명 에 대한 ResourceManager 를 가져옵니다.
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="T:HIE.Framework.ExceptionHandler">
            <summary>
            <para>
            시스템에서 발생한 예외를 핸들링합니다.
            런타임 중에 발생한 예외는 닷넷 예외 처리 메커니즘에 따라서 상위 호출자로 전달이 됩니다.
            ExceptionHandler는 이런 예외를 좀더 구체적인 처리를 하기 위한 일관성있는 방법을 제공합니다.
            </para>
            <para>
            예외를 캐치하고 해당 예외에 대한 처리 방식을 결정합니다. 이 처리 방법은
            <see cref="T:HIE.Framework.ExceptionHandlePolicy"/> 열거형에 정의되어 있습니다.
            </para>
            </summary>
            <example>
            <para>다음은 ExceptionHandler를 이용한 기본적인 예외 캐치 방법입니다.</para>
            <code>
            try { /* 코드 */ }
            catch (Exception e)
            {	
            	ExceptionHandlePolicy policy = ExceptionHandlePolicy.Propagating;
            	// 상위 호출자에게 예외를 전달합니다.
            	// 내부적으로 ExceptionHandledException 형식으로 랩핑을 합니다.
            	ExceptionHandler.Handle(e, policy);
            }
            
            try { /* 코드 */ }
            catch (Exception e)
            {
            	// ExceptionHandledException은 ExceptionHandler 형식에 의해
            	// 생성되는 형식으로써 try 구문 혹은 구문 내 호출자에서 발생한 예외가
            	// ExceptionHandler에 의해 상위로 전달된 경우에 기존 예외가 ExceptionHandledException
            	// 형식으로 랩핑이 됩니다.
            	if (e is ExceptionHandledException) throw; // 불필요한 Wrapping 방지
            	else
            	{
            		ExceptionHandlePolicy policy = ExceptionHandlePolicy.Propagating;
            		ExceptionHandler.Handle(e, policy);
            	}
            }
            </code>
            <para>
            상위 호출자에게 예외를 전달하지 않으려면 <c>ExceptionHandlePolicy.None</c> 열거값을 사용합니다.
            </para>
            <code>
            try { /* 코드 */ }
            catch (Exception e)
            {
            	ExceptionHandlePolicy policy = ExceptionHandlePolicy.None;
            	// 아무 작업도 수행하지 않습니다.
            	ExceptionHandler.Handle(e, policy);
            	// 아래 throw 구문이 동작하며 이 때 전달되는 예외 객체는 e입니다.
            	throw;
            }
            </code>
            <para>
            <c>Handle</c> 메소드의 <c>policy</c>인자는 <see cref="T:HIE.Framework.ExceptionHandlePolicy"/>
            열거값의 비트 조합을 지원합니다. <c>ExceptionHandlePolicy.Propagating | ExceptionHandlePolicy.Logging</c>
            조합인 경우에는 로그를 남기고, 상위 호출자에게 랩핑된 예외를 전달합니다.
            </para>
            <para>
            주의) <c>ExceptionHandlePolicy.None</c> 열거값과 다른 열거값을 조합(OR)한 경우에는 
            <c>ExceptionHandlePolicy.None</c>은 아무런 영향을 주지 못합니다. 다음 AND 조합의
            경우라면 모든 정책이 무시되어 버립니다.
            </para>
            </example>
        </member>
        <member name="M:HIE.Framework.ExceptionHandler.CreateHandleException(System.String,System.Exception,HIE.Framework.LayerDescription,System.Object[])">
            <summary>
            예외를 랩핑합니다.
            </summary>        
            <param name="message">예외 메시지</param>
            <param name="e">예외 객체</param>        
            <param name="layerInfo">예외 발생 레이어 정보</param>
            <param name="datas">기타 부가 데이타</param>
            <returns>랩핑된 예외 객체</returns>
        </member>
        <member name="M:HIE.Framework.ExceptionHandler.LogException(System.Exception,HIE.Framework.ExceptionHandlePolicy)">
            <summary>
            로그를 기록하도록 이벤트를 호출합니다.
            </summary>
            <param name="e">예외 객체</param>
            <param name="policy">
            예외 핸들링 정책
            <c>policy</c>인자 값이 <c>ExceptionHandlePolicy.Logging</c>이 아니라면 로그 이벤트를 호출핮 않습니다.
            </param>        
        </member>
        <member name="M:HIE.Framework.ExceptionHandler.Propagate(System.Exception,HIE.Framework.ExceptionHandlePolicy)">
            <summary>
            예외를 예외메커니즘에 따라 전파합니다.
            </summary>
            <param name="e">예외 객체</param>
            <param name="policy">
            예외 핸들링 정책
            <c>policy</c>인자 값이 <c>ExceptionHandlePolicy.Propagating</c>이 아니라면 예외를 throw하지 않습니다.
            </param>
        </member>
        <member name="M:HIE.Framework.ExceptionHandler.Handle(System.String,System.Exception,HIE.Framework.ExceptionHandlePolicy,HIE.Framework.LayerDescription,System.Object[])">
            <summary>
            예외를 핸들링합니다.
            </summary>
            <param name="message">메시지</param>
            <param name="e">예외 객체</param>
            <param name="policy">예외 핸들링 정책</param>
            <param name="layerInfo">예외 발생 레이어 정보</param>
            <param name="datas">기타 데이타</param>
        </member>
        <member name="M:HIE.Framework.ExceptionHandler.Handle(System.String,System.Exception,HIE.Framework.ExceptionHandlePolicy,System.Object[])">
            <summary>
            예외를 핸들링합니다.
            </summary>
            <param name="message">메시지</param>
            <param name="e">예외 객체</param>
            <param name="policy">예외 핸들링 정책</param>        
            <param name="datas">기타 데이타</param>
        </member>
        <member name="M:HIE.Framework.ExceptionHandler.Handle(System.Exception,HIE.Framework.ExceptionHandlePolicy,HIE.Framework.LayerDescription,System.Object[])">
            <summary>
            예외를 핸들링합니다.
            </summary>        
            <param name="e">예외 객체</param>
            <param name="policy">예외 핸들링 정책</param>
            <param name="layerInfo">예외 발생 레이어 정보</param>
            <param name="datas">기타 데이타</param>
        </member>
        <member name="M:HIE.Framework.ExceptionHandler.Handle(System.Exception,HIE.Framework.ExceptionHandlePolicy,System.Object[])">
            <summary>
            예외를 핸들링합니다.
            </summary>        
            <param name="e">예외 객체</param>
            <param name="policy">예외 핸들링 정책</param>        
            <param name="datas">기타 데이타</param>
        </member>
        <member name="M:HIE.Framework.ExceptionHandler.Handle(System.Exception,HIE.Framework.ExceptionHandlePolicy,HIE.Framework.LayerDescription)">
            <summary>
            예외를 핸들링합니다.
            </summary>        
            <param name="e">예외 객체</param>
            <param name="policy">예외 핸들링 정책</param>
            <param name="layerInfo">예외 발생 레이어 정보</param>        
        </member>
        <member name="M:HIE.Framework.ExceptionHandler.Handle(System.Exception,HIE.Framework.ExceptionHandlePolicy)">
            <summary>
            예외를 핸들링합니다.
            </summary>        
            <param name="e">예외 객체</param>
            <param name="policy">예외 핸들링 정책</param>        
        </member>
        <member name="M:HIE.Framework.ExceptionHandler.Handle(System.String,HIE.Framework.ExceptionHandlePolicy,HIE.Framework.LayerDescription)">
            <summary>
            예외를 핸들링합니다.
            </summary>
            <param name="message">메시지</param>        
            <param name="policy">예외 핸들링 정책</param>
            <param name="layerInfo">예외 발생 레이어 정보</param>
        </member>
        <member name="M:HIE.Framework.ExceptionHandler.Handle(System.String,HIE.Framework.ExceptionHandlePolicy)">
            <summary>
            예외를 핸들링합니다.
            </summary>
            <param name="message">메시지</param>        
            <param name="policy">예외 핸들링 정책</param>
        </member>
        <member name="E:HIE.Framework.ExceptionHandler.Logging">
            <summary>
            <c>Handle</c> 메서드를 호출하면 발생합니다.
            </summary>
            <remarks>
            <c>Logging</c>이벤트가 발생하기 위해서는 반드시 <c>Handle</c> 메소드의 
            <c>policy</c> 인자값이 <c>ExceptionHandlePolicy.Logging</c>이어야 합니다.
            또한 발생한 이벤트를 처리하기 위해서는 <c>Logging</c>이벤트를 처리할
            대리자가 등록되어야 합니다.
            </remarks>
            <example>
            <para><c>Logging</c>이벤트 처리를 위한 대리자 등록</para>
            <code>
            ExceptionHandler.Logging += new LoggingExceptionHandler(ExceptionHandler_Logging);
            
            ....
            
            private void ExceptionHandler_Logging(object sender, ExceptionHandlerArgs e)
            {
            	// 로그를 기록합니다.
            	Console.WriteLine(e.HandledException.ToString());
            }
            </code>
            </example>
        </member>
        <member name="T:HIE.Framework.ExceptionHandlerArgs">
            <summary>
            예외가 <c>ExceptionHandler</c>에 의해 핸들링이 될 때,
            예외 핸들링 정책에 따라 로그를 남기게 되면 해당 이벤트 인자 값으로 전달되는 값입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.ExceptionHandlerArgs.#ctor(System.Exception)">
            <summary>
            <c>ExceptionHandlerArgs</c>를 생성합니다.
            </summary>
            <param name="ex">예외 객체</param>        
        </member>
        <member name="P:HIE.Framework.ExceptionHandlerArgs.HandledException">
            <summary>
            핸들링된 예외 객체를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.ExceptionHandlerArgs.HandledLayer">
            <summary>
            핸들링된 레이어 정보를 가져옵니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.ExceptionHandlerException">
            <summary>
            <see cref="T:HIE.Framework.ExceptionHandler"/>에 의해 핸들링된 예외가 
            <c>ExceptionHandlePolicy.Propagating</c> 정책에 의해
            랩핑이 되어 상위로 전달되는 경우 <c>ExceptionHandlerException</c> 형식이 됩니다.
            </summary>
            <remarks>
            <c>ExceptionHandlerException</c> 형식은 부가적인 데이터와 함께 상위 호출자로 전달을 하기 위한
            용도의 형식으로써 특별히 다른 의미를 부여하지는 않습니다.
            일괄적으로 <see cref="T:HIE.Framework.ExceptionHandler"/> 형식의 예외 처리 메커니즘을 통하여
            전달된 마지막 예외는 반드시 <c>ExceptionHandlerException</c> 형식을 띕니다. 예외 처리 스택 정보를
            보기 위해서는 단순히 <c>StackTrace</c> 속성을 호출하는 것으로도 충분합니다.
            그러나 상세한 예외 정보를 찾아보기 위해서는 <c>InnerException</c> 혹은 
            <c>GetBaseHandledException</c> 메소드를 호출하도록 합니다.
            </remarks>
        </member>
        <member name="M:HIE.Framework.ExceptionHandlerException.#ctor">
            <summary>
            <c>ExceptionHandlerException</c>을 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.ExceptionHandlerException.#ctor(System.String)">
            <summary>
            <c>ExceptionHandlerException</c>을 생성합니다.
            </summary>
            <param name="message">예외 메시지</param>
        </member>
        <member name="M:HIE.Framework.ExceptionHandlerException.#ctor(System.String,System.Exception)">
            <summary>
            <c>ExceptionHandlerException</c>을 생성합니다.
            </summary>
            <param name="message">예외 메시지</param>
            <param name="innerException">내부 예외 객체</param>
        </member>
        <member name="M:HIE.Framework.ExceptionHandlerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            serialize된 데이터를 사용하여 <c>ExceptionHandlerException</c>을 생성합니다.
            </summary>
            <param name="info">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 SerializationInfo입니다.</param>
            <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 StreamingContext입니다.</param>
        </member>
        <member name="M:HIE.Framework.ExceptionHandlerException.AddData(System.Object)">
            <summary>
            기타 정보를 추가합니다.
            </summary>
            <param name="data">
            기타정보
            <remarks><c>object</c> 타입 data는 Serialization(직렬화)가 가능해야 합니다.</remarks>
            </param>
        </member>
        <member name="M:HIE.Framework.ExceptionHandlerException.AnalyzeHandledStack">
            <summary>
            stacktrace값을 재설정합니다.        
            </summary>
        </member>
        <member name="M:HIE.Framework.ExceptionHandlerException.GetBaseHandledException">
            <summary>
            제일 처음 핸들링된 <c>ExceptionHandlerException</c> 내부 객체를 반환합니다.
            </summary>
            <remarks>
            <c>ExceptionHandlerException</c> 내부 객체가 없다면 현재 this가 대신합니다.
            </remarks>
            <returns><c>ExceptionHandlerException</c> 내부 객체</returns>
        </member>
        <member name="M:HIE.Framework.ExceptionHandlerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            예외에 관한 정보를 SerializationInfo에 설정합니다.
            </summary>
            <param name="info">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 SerializationInfo입니다.</param>
            <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 StreamingContext입니다.</param>
        </member>
        <member name="P:HIE.Framework.ExceptionHandlerException.HandledExceptionName">
            <summary>
            실제로 핸들링된 예외의 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.ExceptionHandlerException.HandledLayer">
            <summary>
            핸들링 된 레이어 정보를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.ExceptionHandlerException.TargetSite">
            <summary>
            현재 예외를 throw하는 메서드를 가져옵니다.
            </summary>
            <remarks>이 프로파티는 부모 <c>TargetSite</c>를 감춥니다.</remarks>
        </member>
        <member name="P:HIE.Framework.ExceptionHandlerException.StackTrace">
            <summary>
            현재 예외가 throw된 시간에 호출 스택의 프레임에 대한 문자열 표현을 가져옵니다.
            </summary>
            <remarks>재정의되었습니다.</remarks>
        </member>
        <member name="T:HIE.Framework.IO.AffixConverter">
            <summary>
            파일명에 접사(접두사/접미사)를 붙히는 역할을 정의합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.IO.AffixConverter.#ctor(HIE.Framework.IO.AffixPosition)">
            <summary>
            <c>AffixConverter</c>를 생성합니다.
            </summary>
            <param name="position">접사 위치</param>
        </member>
        <member name="M:HIE.Framework.IO.AffixConverter.Reset">
            <summary>
            <see cref="T:HIE.Framework.IO.FileNameAffixer"/>의 <c>Affix</c> 메소드가 호출이 종료되면
            <c>IAffixConverter.Reset</c> 메소드가 호출됩니다.
            </summary>
            <remarks>
            일반적으로 <c>Reset</c>의 역할은 파일명을 변경할 때, 
            내부적으로 증가치에 대한 내용들을 초기화하는데 사용합니다. 
            </remarks>
        </member>
        <member name="M:HIE.Framework.IO.AffixConverter.GetAffixedName(System.IO.FileInfo)">
            <summary>
            주어진 파일정보로부터 파일명에 접사를 붙혀 반환합니다.
            </summary>
            <remarks>
            <see cref="T:System.IO.FileInfo"/>의 <c>Directory</c>를 기준으로 중복 파일 검사를 수행하며,
            만일 중복된 파일명을 갖는 파일이 없는 경우에는 반드시 null값을 반환해야 합니다.
            </remarks>
            <param name="file">검사할 파일정보</param>
            <returns>
            접사가 붙은 파일 정보 또는 null
            </returns>
        </member>
        <member name="P:HIE.Framework.IO.AffixConverter.Position">
            <summary>
            접사 위치를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.IO.AlphabeticAffixConverter">
            <summary>
            알파벳 순서대로 접사를 붙혀 파일명을 변경합니다.
            접사는 '[', ']' 문자로 감싸여집니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.IO.AlphabeticAffixConverter.#ctor(HIE.Framework.IO.AffixPosition)">
            <summary>
            <c>AlphabeticAffixConverter</c>를 생성합니다.
            </summary>
            <param name="position">접사 위치(접두사/접미사)</param>
        </member>
        <member name="M:HIE.Framework.IO.AlphabeticAffixConverter.Increase">
            <summary>
            접사를 증가시킵니다.
            접사는 A~Z로 증가하며, Z의 경우 뒤에 A가 다시 붙는 형태입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.IO.AlphabeticAffixConverter.Reset">
            <summary>
            <see cref="T:HIE.Framework.IO.FileNameAffixer"/>의 <c>Affix</c> 메소드가 호출이 종료되면
            <c>IAffixConverter.Reset</c> 메소드가 호출됩니다.
            </summary>
            <remarks>
            접사를 빈 문자열로 초기화합니다.
            </remarks>
        </member>
        <member name="M:HIE.Framework.IO.AlphabeticAffixConverter.GetAffixedName(System.IO.FileInfo)">
            <summary>
            주어진 파일정보로부터 파일명에 접사를 붙혀 반환합니다.
            </summary>
            <remarks>
            <see cref="T:System.IO.FileInfo"/>의 <c>Directory</c>를 기준으로 중복 파일 검사를 수행하며,
            만일 중복된 파일명을 갖는 파일이 없는 경우에는 null값을 반환합니다.
            </remarks>
            <param name="file">검사할 파일정보</param>
            <returns>
            접사가 붙은 파일 정보 또는 null
            </returns>
        </member>
        <member name="T:HIE.Framework.IO.FileNameAffixer">
            <summary>
            새 파일명을 생성할 때, 생성할 위치에 동일한 파일명을 가진 파일이 존재하는 경우
            파일명에 접두사 혹은 접미사를 붙혀 파일명 중복을 막습니다.
            </summary>
            <remarks>
            <c>Affix</c> 메소드 호출 시 해당 파일정보를 가지고 대상 위치에 실제로 존재하는 파일을 대상으로만 검사가 이루어집니다.
            그러므로 바뀐 파일명을 가지고 바로 파일을 생성하지 않고 다시 한번 동일한 파일 정보를 <c>Affix</c>의 인자로 호출을 한다면
            두번째도 똑같이 바뀐 파일명을 반환하게 됩니다.
            </remarks>
            <example>
            다음 코드 예제에서는 <c>FileNameAffixer</c>를 사용하여 파일명에 접두사 혹은 접미사를 붙혀 파일명을 생성합니다.
            <code>
            using System;
            using System.Collections.Generic;
            using System.Text;
            using System.IO;
            using HIE.Framework.IO;
            
            class TestAffixSample
            {
                static void Main()
                {
                    string[] prefiles = new string[] {"a[0].txt"};
                    
                    foreach (string prefilePath in prefiles)
                    {
                        File.Create(prefilePath);
                    }
                    
                    FileNameAffixer affixer = new FileNameAffixer();
                    
                    for (int i = 0; i &lt; 27; i++)
                    {
                        FileInfo orginFile = new FileInfo("a[0].txt");
                        FileInfo newFile = affixer.Affix(orginFile, AffixPosition.Postfix, AffixSymbol.Alphabetic);
                        newFile.Create();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:HIE.Framework.IO.FileNameAffixer.#ctor">
            <summary>
            <c>FileNameAffixer</c>를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.IO.FileNameAffixer.SetConverter(HIE.Framework.IO.AffixConverter)">
            <summary>
            접사를 붙이는 기능을 하는 <see cref="T:HIE.Framework.IO.AffixConverter"/>를 설정합니다.
            </summary>
            <remarks>
            <see cref="T:HIE.Framework.IO.AffixSymbol"/> 열거형 값이 <c>Custom</c>일 경우에는 컨버터를 등록해주어야 합니다.
            <c>Numeric</c>, <c>Alpahbetic</c>의 경우에는 내부적으로 기본 컨버터를 사용합니다.
            </remarks>
            <param name="converter">컨버터</param>
        </member>
        <member name="M:HIE.Framework.IO.FileNameAffixer.Affix(System.IO.FileInfo,HIE.Framework.IO.AffixPosition,HIE.Framework.IO.AffixSymbol)">
            <summary>
            파일명에 접사를 붙힌 파일 정보를 반환합니다.
            </summary>
            <param name="file">접사를 붙힐 파일 정보</param>
            <param name="position">접사를 붙힐 위치</param>
            <param name="symbol">접사 형태</param>
            <returns>
            파일명이 변환된 파일 정보
            만일 중복되는 대상이 없다면 원래 파일정보를 그대로 반환합니다.
            </returns>
        </member>
        <member name="T:HIE.Framework.IO.FileNamePatternReplacer">
             <summary>
             FormatBatch 또는 다수의 FormatAppender를 이용하여
             특정 디렉터리에 존재하는 파일의 이름을 한번에 변경합니다.
             </summary>
             <remarks>
             변경될 파일명이 해당 디렉터리에 이미 존재하는 경우에는 예외가 발생됩니다.
             </remarks>
             <example>
             <code>
             FormatAppender[] appenders = new FormatAppender[] {
                 new FixedStringAppender("HIE.Framework"),
                 new DateTimeAppender("yyyyMMdd"),
                 new NumberSequenceAppender(2)
             };
            
             FormatBatch batch = new FormatBatch();
             batch.AddFormatterRange(appenders);
             batch.CommonSeparator = "_";
                    
             FileNamePatternReplacer replacer = new FileNamePatternReplacer(batch);
             replacer.ComparingOption = PatternComparingOption.NameAsc;
             // 'test_'로 시작하는 모든 파일의 이름을 HIE.Framework_yyyyMMdd_num으로 변경합니다.
             replacer.Replace(new DirectoryInfo(Environment.CurrentDirectory), "test_*");
             </code>
             </example>
        </member>
        <member name="M:HIE.Framework.IO.FileNamePatternReplacer.#ctor">
            <summary>
            FileNamePatternReplacer를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.IO.FileNamePatternReplacer.#ctor(HIE.Framework.Text.FormatAppender[])">
            <summary>
            FileNamePatternReplacer를 생성합니다.
            </summary>
            <param name="appenders">
            <see cref="T:HIE.Framework.Text.FormatAppender"/> 개체 배열
            </param>
        </member>
        <member name="M:HIE.Framework.IO.FileNamePatternReplacer.#ctor(HIE.Framework.Text.FormatBatch)">
            <summary>
            FileNamePatternReplacer를 생성합니다.
            </summary>
            <param name="batcher">
            <see cref="T:HIE.Framework.Text.FormatBatch"/> 개체
            </param>
        </member>
        <member name="M:HIE.Framework.IO.FileNamePatternReplacer.Replace(System.String)">
            <summary>
            대상 디렉터리 위치한 파일들의 이름을 모두 변경합니다.
            </summary>
            <remarks>
            <para>하위 디렉터리는 대상이 아닙니다.</para>
            <para><c>Replace</c> 메서드가 호출될 때마다
            <see cref="T:HIE.Framework.Text.FormatBatch"/> 객체는 초기화됩니다.</para>
            </remarks>
            <param name="dirPath">대상 디렉터리</param>
            <returns>변경된 파일 수</returns>
        </member>
        <member name="M:HIE.Framework.IO.FileNamePatternReplacer.Replace(System.IO.DirectoryInfo)">
            <summary>
            대상 디렉터리 위치한 파일들의 이름을 모두 변경합니다.
            </summary>
            <remarks>
            <para>하위 디렉터리는 대상이 아닙니다.</para>
            <para><c>Replace</c> 메서드가 호출될 때마다
            <see cref="T:HIE.Framework.Text.FormatBatch"/> 객체는 초기화됩니다.</para>
            </remarks>
            <param name="baseDir">대상 디렉터리</param>
            <returns>변경된 파일 수</returns>
        </member>
        <member name="M:HIE.Framework.IO.FileNamePatternReplacer.Replace(System.String,System.String)">
            <summary>
            대상 디렉터리 위치의 패턴으로 검색된 파일들의 이름을 모두 변경합니다.
            </summary>
            <remarks>
            <para>하위 디렉터리는 대상이 아닙니다.</para>
            <para><c>Replace</c> 메서드가 호출될 때마다
            <see cref="T:HIE.Framework.Text.FormatBatch"/> 객체는 초기화됩니다.</para>
            </remarks>
            <param name="dirPath">대상 디렉터리</param>
            <param name="pattern">패턴(와일드카드 사용)</param>
            <returns>변경된 파일 수</returns>
        </member>
        <member name="M:HIE.Framework.IO.FileNamePatternReplacer.Replace(System.IO.DirectoryInfo,System.String)">
            <summary>
            대상 디렉터리 위치의 패턴으로 검색된 파일들의 이름을 모두 변경합니다.
            </summary>
            <remarks>
            <para>하위 디렉터리는 대상이 아닙니다.</para>
            <para><c>Replace</c> 메서드가 호출될 때마다
            <see cref="T:HIE.Framework.Text.FormatBatch"/> 객체는 초기화됩니다.</para>
            </remarks>
            <param name="baseDir">대상 디렉터리</param>
            <param name="pattern">패턴(와일드카드 사용)</param>
            <returns>변경된 파일 수</returns>
        </member>
        <member name="P:HIE.Framework.IO.FileNamePatternReplacer.Replacer">
            <summary>
            파일명을 변경하는 <see cref="T:HIE.Framework.Text.FormatBatch"/> 객체를
            가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.IO.FileNamePatternReplacer.ComparingOption">
            <summary>
            정렬 방법을 가져오거나 설정합니다.
            </summary>
            <remarks>
            <c>PatternComparingOption</c> 정렬 방법은
            대치될 파일들의 변경 알고리즘에 의해 순차적으로
            적용되는 순서와 동일합니다.
            </remarks>
        </member>
        <member name="T:HIE.Framework.IO.AffixPosition">
            <summary>
            접사 추가 방법을 정의합니다.
            </summary>
            <remarks>
            동일 파일명 존재로 인하여 파일명 변경 시 접사 추가 방법을 파일명 앞 또는 파일명 뒤에 붙여넣을 
            것인지 여부를 선택합니다.
            </remarks>
        </member>
        <member name="F:HIE.Framework.IO.AffixPosition.Postfix">
            <summary>
            파일명 뒤에 붙습니다.(확장자 이전입니다.)
            </summary>
        </member>
        <member name="F:HIE.Framework.IO.AffixPosition.Prefix">
            <summary>
            파일명 앞에 붙습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.IO.AffixSymbol">
            <summary>
            접사 형태를 정의합니다.
            </summary>
            <remarks>
            동일 파일명 존재로 인하여 파일명 변경 시 접사 형태를 숫자, 알파벳 또는 사용자 정의 형태중에 선택합니다.
            </remarks>
        </member>
        <member name="F:HIE.Framework.IO.AffixSymbol.Numeric">
            <summary>
            숫자
            </summary>
        </member>
        <member name="F:HIE.Framework.IO.AffixSymbol.Alphabetic">
            <summary>
            알파벳
            </summary>
        </member>
        <member name="F:HIE.Framework.IO.AffixSymbol.Custom">
            <summary>
            사용자 정의 형태
            </summary>
        </member>
        <member name="T:HIE.Framework.IO.PatternComparingOption">
            <summary>
            <see cref="T:HIE.Framework.IO.FileNamePatternReplacer"/> 클래스의
            패턴 검색 시 사용될 정렬 옵션를 정의합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.IO.PatternComparingOption.NameAsc">
            <summary>
            파일명 오름차순
            </summary>
        </member>
        <member name="F:HIE.Framework.IO.PatternComparingOption.NameDesc">
            <summary>
            파일명 내림차순
            </summary>
        </member>
        <member name="F:HIE.Framework.IO.PatternComparingOption.SizeAsc">
            <summary>
            파일 사이즈 오름차순
            </summary>
        </member>
        <member name="F:HIE.Framework.IO.PatternComparingOption.SizeDesc">
            <summary>
            파일 사이즈 내림차순
            </summary>
        </member>
        <member name="F:HIE.Framework.IO.PatternComparingOption.UpdateAsc">
            <summary>
            파일 수정일자 오름차순
            </summary>
        </member>
        <member name="F:HIE.Framework.IO.PatternComparingOption.UpdateDesc">
            <summary>
            파일 수정일자 내림차순
            </summary>
        </member>
        <member name="T:HIE.Framework.IO.NumericAffixConverter">
            <summary>
            숫자 순서대로 접사를 붙혀 파일명을 변경합니다.
            접사는 '[', ']' 문자로 감싸여집니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.IO.NumericAffixConverter.#ctor(HIE.Framework.IO.AffixPosition)">
            <summary>
            <c>AlphabeticAffixConverter</c>를 생성합니다.
            </summary>
            <param name="position">접사 위치(접두사/접미사)</param>
        </member>
        <member name="M:HIE.Framework.IO.NumericAffixConverter.Increase">
            <summary>
            접사를 증가시킵니다.
            접사는 0부터 시작합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.IO.NumericAffixConverter.Reset">
            <summary>
            <see cref="T:HIE.Framework.IO.FileNameAffixer"/>의 <c>Affix</c> 메소드가 호출이 종료되면
            <c>AffixConverter.Reset</c> 메소드가 호출됩니다.
            </summary>
            <remarks>
            접사를 0으로 초기화합니다.
            </remarks>
        </member>
        <member name="M:HIE.Framework.IO.NumericAffixConverter.GetAffixedName(System.IO.FileInfo)">
            <summary>
            주어진 파일정보로부터 파일명에 접사를 붙혀 반환합니다.
            </summary>
            <remarks>
            <see cref="T:System.IO.FileInfo"/>의 <c>Directory</c>를 기준으로 중복 파일 검사를 수행하며,
            만일 중복된 파일명을 갖는 파일이 없는 경우에는 null값을 반환합니다.
            </remarks>
            <param name="file">검사할 파일정보</param>
            <returns>
            접사가 붙은 파일 정보 또는 null
            </returns>
        </member>
        <member name="T:HIE.Framework.LayerDescription">
            <summary>
            <para>시스템 레이어 정보입니다.</para>
            <para>
            시스템 레이어 정보는 <see cref="T:HIE.Framework.SystemLayer"/> 열거형 또는
            문자열로 입력을 받아 레이어 정보를 등록합니다.    
            </para>
            </summary>
        </member>
        <member name="M:HIE.Framework.LayerDescription.#ctor(HIE.Framework.SystemLayer)">
            <summary>
            레이어 정보를 생성합니다.
            </summary>
            <param name="layer"><c>SystemLayer</c> 열거형으로 표현</param>
        </member>
        <member name="M:HIE.Framework.LayerDescription.#ctor(System.String)">
            <summary>
            레이어 정보를 생성합니다.
            </summary>
            <remarks>
            <see cref="T:HIE.Framework.SystemLayer"/> 열거형만으로는
            표현할 수 없거나 부족한 경우 직접 문자열을 인자로 주어
            레이어 정보를 기술할 수 있습니다.
            </remarks>
            <param name="layer">문자열로 표현</param>
        </member>
        <member name="P:HIE.Framework.LayerDescription.Layer">
            <summary>
            레이어 정보를 문자열로 반환합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Net.EmailSendEventArgs">
            <summary>
            E-mail 전송 후 전달 정보입니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Net.EmailSendEventArgs.IsCancelled">
            <summary>
            E-mail 전송 취소여부를 가져오거나 설정한다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Net.EmailSendEventArgs.Error">
            <summary>
            E-mail 전송 중에 발생한 예외를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Net.MailClient">
            <summary>
            E-mail 정보를 발송하는 역할을 합니다.
            </summary>
            <example>
            <code>
            class TestEmailClient
            {
            	public static void SendEmail()
            	{
            		try
            		{
            			MailClient eClient = new MailClient("smtp.domain.com", 25);
            			eClient.SetNetworkCredential("username", "password");
            			eClient.EmailSendComplete += new EmailSendCompleteHandler(OnEmailSendComplete);
            
            			TemplateMailMessage tmpMail = new TemplateMailMessage();
            			tmpMail.IsBodyHtml = true;
            			tmpMail.EmailEncoding = Encoding.UTF8;
            			tmpMail.From = new System.Net.Mail.MailAddress("username@mailvender.com", "user display name");
            			tmpMail.AddReceiver("touser@mailvender.com", null, EmailTarget.To);
            			tmpMail.AddReceiver("bccuser@mailvender.com", null, EmailTarget.Bcc);
            			tmpMail.AddReceiver("ccuser@mailvender.com", null, EmailTarget.Cc);
            			tmpMail.Subject = "E-mail Subject";
            			tmpMail.Body = "Welcome to &lt;p style='color:red;'&gt;our company&lt;/p&gt;!";
            			tmpMail.Signature = "Sincerely";
            
                        // 비동기로 발송합니다.
            			eClient.Send(tmpMail, true);                    
            			
            		}
            		catch (Exception e)
            		{
            			Console.WriteLine(e);
            		}
            	}
            
                // 메일 발송이 종료되면 호출됩니다.
            	static void OnEmailSendComplete(object sender, EmailSendEventArgs e)
            	{
            		if (!e.IsCancelled) Console.WriteLine("Sending complete!");
            		else Console.WriteLine("Sending fail!");
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:HIE.Framework.Net.MailClient.#ctor(System.String)">
            <summary>
            MailClient를 생성합니다.
            </summary>
            <param name="smptHost">SMTP 서버 주소</param>
        </member>
        <member name="M:HIE.Framework.Net.MailClient.#ctor(System.String,System.Int32)">
            <summary>
            MailClient를 생성합니다.
            </summary>
            <param name="smtpHost">SMTP 서버 주소</param>
            <param name="port">포트 번호</param>
        </member>
        <member name="M:HIE.Framework.Net.MailClient.SetNetworkCredential(System.String,System.String)">
            <summary>
            자격증명에 필요한 <see cref="T:System.Net.NetworkCredential"/>개체를 생성합니다.
            </summary>
            <param name="userName">사용자 이름</param>
            <param name="password">비밀번호</param>
        </member>
        <member name="M:HIE.Framework.Net.MailClient.OnSendCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            비동기 전송의 경우 E-mail 전송이 완료되면 호출이 됩니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HIE.Framework.Net.MailClient.Send(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            E-mail을 발송합니다.
            </summary>
            <param name="message">E-mail 메시지</param>
            <param name="asyncSending">비동기 전송 여부(true이면 비동기로 발송합니다.)</param>
        </member>
        <member name="M:HIE.Framework.Net.MailClient.SendEach(System.Net.Mail.MailMessage)">
            <summary>
            E-mail을 발송합니다.
            </summary>
            <remarks>
            <c>message</c>에 등록된 모든 E-mail로 순차적으로 발송합니다.
            이 메소드는 비동기가 아닌 동기식으로 발송합니다.
            </remarks>
            <param name="message">E-mail 메시지</param>
        </member>
        <member name="M:HIE.Framework.Net.MailClient.Send(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            E-mail을 발송합니다.
            </summary>
            <param name="from">발신자</param>
            <param name="recipients">수신자</param>
            <param name="subject">제목</param>
            <param name="body">내용(평문)</param>
            <param name="asyncSending">비동기 전송 여부(true이면 비동기로 발송합니다.)</param>
        </member>
        <member name="P:HIE.Framework.Net.MailClient.DeliveryMethod">
            <summary>
            보내는 전자 메일 처리 방법을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Net.MailClient.UseSsl">
            <summary>
            SSL 사용여부를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Net.MailClient.UseDefaultCreadential">
            <summary>
            기본 자격증명(<see cref="P:System.Net.CredentialCache.DefaultCredentials"/>) 사용여부를 가져오거나 설정하니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Net.MailClient.ClientCertificates">
            <summary>
            SSL 연결에 사용할 인증서를 지정합니다.
            </summary>
        </member>
        <member name="E:HIE.Framework.Net.MailClient.EmailSendComplete">
            <summary>
            E-mail 전송이 완료되면 호출됩니다.
            </summary>
            <remarks>
            비동기가 아닌 동기 방식으로 발송을 하는 경우에는 호출되지 않습니다.
            </remarks>
        </member>
        <member name="T:HIE.Framework.Net.EmailSendCompleteHandler">
            <summary>
            E-mail 발송 메커니즘이 비동기로 호출이 되는 경우에 발송이 완료되면 호출됩니다.
            </summary>
            <remarks>
            <see cref="T:HIE.Framework.Net.EmailSendEventArgs"/>의 인스턴스 <c>e</c>의
            <c>IsCancelled</c> 및 <c>Error</c> 속성으로부터 정보를 얻을 수 있습니다.
            </remarks>
            <param name="sender">메일 발송 객체</param>
            <param name="e">
            <see cref="T:HIE.Framework.Net.EmailSendEventArgs"/> 객체
            </param>
        </member>
        <member name="T:HIE.Framework.Net.EmailTarget">
            <summary>
            E-mail 받는 대상
            </summary>
        </member>
        <member name="F:HIE.Framework.Net.EmailTarget.To">
            <summary>
            To(대상)
            </summary>
        </member>
        <member name="F:HIE.Framework.Net.EmailTarget.Cc">
            <summary>
            CC(참조)
            </summary>
        </member>
        <member name="F:HIE.Framework.Net.EmailTarget.Bcc">
            <summary>
            Bcc(숨은참조)
            </summary>
        </member>
        <member name="T:HIE.Framework.Net.TemplateMailMessage">
            <summary>
            E-mail 정보를 갖는 엔티티 클래스입니다.
            </summary>
            <remarks>
            <c>TemplateMailMessage</c>를 확장하여 자신만의 메일 정보를 설정할 수 있습니다.
            </remarks>
        </member>
        <member name="M:HIE.Framework.Net.TemplateMailMessage.#ctor">
            <summary>
            TemplateMailMessage를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Net.TemplateMailMessage.#ctor(System.Net.Mail.MailAddress,System.Net.Mail.MailAddress)">
            <summary>
            TemplateMailMessage를 생성합니다.
            </summary>
            <param name="from">발신자 정보</param>
            <param name="to">수신자 정보</param>
        </member>
        <member name="M:HIE.Framework.Net.TemplateMailMessage.#ctor(System.String,System.String)">
            <summary>
            TemplateMailMessage를 생성합니다.
            </summary>
            <param name="from">발신자 주소</param>
            <param name="to">수신자 주소</param>
        </member>
        <member name="M:HIE.Framework.Net.TemplateMailMessage.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            TemplateMailMessage를 생성합니다.
            </summary>
            <param name="from">발신자 주소</param>
            <param name="to">수신자 주소</param>
            <param name="subject">E-mail 제목</param>
            <param name="body">E-mail 본문</param>
        </member>
        <member name="M:HIE.Framework.Net.TemplateMailMessage.AddReceiver(System.String,System.String,HIE.Framework.Net.EmailTarget)">
            <summary>
            수신자 정보를 추가합니다.
            </summary>
            <param name="rcAddress">수신자 주소</param>
            <param name="rpName">수신자 대표 이름</param>
            <param name="target">E-mail을 받는 대상 분류</param>
        </member>
        <member name="M:HIE.Framework.Net.TemplateMailMessage.AddReceiver(System.Net.Mail.MailAddress,HIE.Framework.Net.EmailTarget)">
            <summary>
            수신자 정보를 추가합니다.
            </summary>
            <param name="rcAddress">수신자 정보</param>
            <param name="target">E-mail을 받는 대상 분류</param>
        </member>
        <member name="P:HIE.Framework.Net.TemplateMailMessage.EmailEncoding">
            <summary>
            제목, 본문에 적용할 인코딩 값을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.StringResourceLoader">
            <summary>
            문자열 키에 대한 문자열 리소스 값을 반환하는 유틸리티 클래스입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.StringResourceLoader.GetValue(System.Resources.ResourceManager,System.String)">
            <summary>
            문자열 리소스를 반환합니다.
            </summary>
            <param name="rm">리소스 관리자</param>
            <param name="key">문자열 키</param>
            <returns>문자열 리소스 값</returns>
        </member>
        <member name="M:HIE.Framework.StringResourceLoader.GetValue(System.Resources.ResourceManager,System.String,System.Globalization.CultureInfo)">
            <summary>
            문자열 리소스를 반환합니다.
            </summary>
            <param name="rm">리소스 관리자</param>
            <param name="key">문자열 키</param>
            <param name="culture">지역화하는 리소스에 대한 culture를 나타내는 <see cref="T:System.Globalization.CultureInfo"/> 개체</param>
            <returns>문자열 리소스 값</returns>
        </member>
        <member name="M:HIE.Framework.StringResourceLoader.GetValue(System.Type,System.String)">
            <summary>
            문자열 리소스를 반환합니다.
            </summary>
            <param name="resourceType">.resources 파일을 찾는 데 필요한 모든 정보를 파생시키는 <see cref="T:System.Type"/></param>
            <param name="key"></param>
            <returns>문자열 리소스 값</returns>
        </member>
        <member name="M:HIE.Framework.StringResourceLoader.GetValue(System.Type,System.String,System.Globalization.CultureInfo)">
            <summary>
            문자열 리소스를 반환합니다.
            </summary>
            <param name="resourceType">.resources 파일을 찾는 데 필요한 모든 정보를 파생시키는 <see cref="T:System.Type"/></param>
            <param name="key">문자열 키</param>
            <param name="culture">지역화하는 리소스에 대한 culture를 나타내는 <see cref="T:System.Globalization.CultureInfo"/> 개체</param>
            <returns>문자열 리소스 값</returns>
        </member>
        <member name="M:HIE.Framework.StringResourceLoader.GetValue(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            문자열 리소스를 반환합니다.
            </summary>
            <param name="baseName">
            리소스의 루트 이름입니다.
            예를 들어, "MyResource.en-US.resources"라는 리소스 파일의 루트 이름은 "MyResource"입니다.
            </param>
            <param name="assembly">리소스에 대한 기본 <see cref="T:System.Reflection.Assembly"/>입니다. </param>
            <param name="key">문자열 키</param>
            <returns>문자열 리소스 값</returns>
        </member>
        <member name="M:HIE.Framework.StringResourceLoader.GetValue(System.String,System.Reflection.Assembly,System.String,System.Globalization.CultureInfo)">
            <summary>
            문자열 리소스를 반환합니다.
            </summary>
            <param name="baseName">
            리소스의 루트 이름입니다.
            예를 들어, "MyResource.en-US.resources"라는 리소스 파일의 루트 이름은 "MyResource"입니다.
            </param>
            <param name="assembly">리소스에 대한 기본 <see cref="T:System.Reflection.Assembly"/>입니다. </param>
            <param name="key">문자열 키</param>
            <param name="culture">지역화하는 리소스에 대한 culture를 나타내는 <see cref="T:System.Globalization.CultureInfo"/> 개체</param>
            <returns>문자열 리소스 값</returns>
        </member>
        <member name="T:HIE.Framework.Text.DateTimeAppender">
            <summary>
            소스 문자열에 지정된 날짜 포맷을 연결합니다.
            </summary>
            <example>
            <code>
            </code>
            </example>
        </member>
        <member name="T:HIE.Framework.Text.FormatAppender">
            <summary>
            문자열 포맷을 연결시켜주는 역할을 하는 추상 클래스입니다.
            </summary>
            <remarks>
            <para>
            소스 문자열 값을 변경한다기 보다는 주어진 소스 문자열의 뒤에
            각 하위 클래스의 <c>AppendFormat</c>메소드에 의하여
            소스 문자열에 포맷화된 새 문자열 정보를 연결하는 역할을 담당합니다.
            </para>
            </remarks>
        </member>
        <member name="M:HIE.Framework.Text.FormatAppender.AppendFormat(System.String)">
            <summary>
            포맷을 적용하여 문자열 연결값을 반환합니다.
            </summary>
            <param name="source">소스 문자열</param>
            <returns>포맷 내용을 연결한 문자열</returns>
        </member>
        <member name="M:HIE.Framework.Text.FormatAppender.Reset">
            <summary>
            포맷을 지정하는데 필요한 모든 리소스를 초기화합니다.
            </summary>
            <remarks>
            내부적으로 증감연산을 하는 경우, 상태 값을 보전하는 경우가 있습니다.
            그런 경우에는 처음부터 포맷을 적용시키기 위해서 <c>Reset</c>과 같은
            메서드를 호출해야하는 경우에 사용될 수 있습니다.
            </remarks>
        </member>
        <member name="M:HIE.Framework.Text.FormatAppender.AssignPreFormatter(HIE.Framework.Text.FormatAppender)">
            <summary>
            선행 작업 처리할 포맷 지정자입니다.
            </summary>
            <param name="preformatter">
            먼저 선행될 포맷 지정자
            <c>preformatter</c>가 null이면 선행처리 작업은 없습니다.
            </param>
        </member>
        <member name="M:HIE.Framework.Text.FormatAppender.AssignFormatSeparator(System.Char)">
            <summary>       
            소스와 추가되는 포맷 사이에 들어갈 구분자를 지정합니다.
            </summary>
            <param name="separator">문자형 구분자</param>
        </member>
        <member name="M:HIE.Framework.Text.FormatAppender.AssignFormatSeparator(System.String)">
            <summary>
            소스와 추가되는 포맷 사이에 들어갈 구분자를 지정합니다.
            </summary>
            <param name="separator">문자열 구분자</param>
        </member>
        <member name="M:HIE.Framework.Text.FormatAppender.Append(System.String)">
            <summary>
            기존 소스 문자열 뒤에 지정된 포맷 값을 추가하여 반환합니다.
            </summary>
            <param name="source">소스 문자열</param>
            <returns>포맷이 추가된 문자열</returns>
        </member>
        <member name="P:HIE.Framework.Text.FormatAppender.Separator">
            <summary>
            구분자를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Text.DateTimeAppender.#ctor">
            <summary>
            DateTimeAppender를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Text.DateTimeAppender.#ctor(System.DateTime)">
            <summary>
            DateTimeAppender를 생성합니다.
            </summary>
            <param name="dateTime">날짜 값</param>
        </member>
        <member name="M:HIE.Framework.Text.DateTimeAppender.#ctor(System.String)">
            <summary>
            DateTimeAppender를 생성합니다.
            </summary>
            <param name="dateTimeFormat">날짜 포맷 문자열</param>
        </member>
        <member name="M:HIE.Framework.Text.DateTimeAppender.#ctor(System.DateTime,System.String)">
            <summary>
            DateTimeAppender를 생성합니다.
            </summary>
            <param name="dateTime">날짜 값</param>
            <param name="dateTimeFormat">날짜 포맷 문자열</param>
        </member>
        <member name="M:HIE.Framework.Text.DateTimeAppender.GetFormat(System.String)">
            <summary>
            날짜 포맷 문자열을 검사 혹은 생성하여 반환합니다.
            </summary>
            <param name="dateTimeFormat">날짜 포맷 문자열</param>
            <returns>날짜 포맷 문자열</returns>
        </member>
        <member name="M:HIE.Framework.Text.DateTimeAppender.AppendFormat(System.String)">
            <summary>
            포맷을 적용하여 문자열 연결값을 반환합니다.
            </summary>
            <param name="source">소스 문자열</param>
            <returns>포맷 내용을 연결한 문자열</returns>
        </member>
        <member name="M:HIE.Framework.Text.DateTimeAppender.Reset">
            <summary>
            포맷을 지정하는데 필요한 모든 리소스를 초기화합니다.
            </summary>
            <remarks>
            아무것도 수행하지 않습니다.
            </remarks>
        </member>
        <member name="P:HIE.Framework.Text.DateTimeAppender.DateTime">
            <summary>
            날짜 값을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Text.DateTimeAppender.UseCurrentDateTime">
            <summary>
            현재 날짜 값 사용여부를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Text.DateTimeAppender.DateTimeFormat">
            <summary>
            날짜 포맷 형식을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Text.DateTimeAppender.Culture">
            <summary>
            culture를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Text.FixedStringAppender">
            <summary>
            소스 문자열에 고정된 특정 값을 연결하는 역할을 담당합니다.
            </summary>
            <remarks>
            <see cref="T:System.Text.StringBuilder"/> 클래스의
            <c>Append</c>와 동일한 역할을 수행합니다.
            </remarks>
            <example>
            <code>
            FixedStringAppender fappender = new FixedStringAppender("sea");
            string resultFormat = fappender.Append("Image");
            // resultFormat 값 Imagesea
            ...
            fappender.AssignFormatSeparator('_');
            resultFormat = fappender.Append("Image");
            // resultFormat 값 Image_sea
            </code>
            </example>
        </member>
        <member name="M:HIE.Framework.Text.FixedStringAppender.#ctor">
            <summary>
            FixedStringAppender를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Text.FixedStringAppender.#ctor(System.String)">
            <summary>
            FixedStringAppender를 생성합니다.
            </summary>
            <param name="fixedValue">고정 문자열 포맷</param>
        </member>
        <member name="M:HIE.Framework.Text.FixedStringAppender.AppendFormat(System.String)">
            <summary>
            포맷을 적용하여 문자열 연결값을 반환합니다.
            </summary>
            <param name="source">소스 문자열</param>
            <returns>포맷 내용을 연결한 문자열</returns>
        </member>
        <member name="M:HIE.Framework.Text.FixedStringAppender.Reset">
            <summary>
            포맷을 지정하는데 필요한 모든 리소스를 초기화합니다.
            </summary>
            <remarks>
            아무것도 수행하지 않습니다.
            </remarks>
        </member>
        <member name="P:HIE.Framework.Text.FixedStringAppender.FixedFormatValue">
            <summary>
            고정 문자열 포맷을 가져오거나 반환합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Text.FormatBatch">
            <summary>
            여러 포맷 문자열 연결을 처리합니다.
            각각의 <c>HIE.Framework.Text.FormatAppender</c>의 기능을
            하나로 모아 배치 처리합니다.
            </summary>
            <example>
            <code>
            FormatAppender[] appenders = new FormatAppender[] {
                new FixedStringAppender("HIE.Framework"),
                new DateTimeAppender("yyyyMMdd"),
                new NumberSequenceAppender(5)
            };
                   
            FormatBatch batch = new FormatBatch();
            batch.AddFormatterRange(appenders);
            batch.CommonSeparator = "_";
            batch.UseSeparatorAtFirstChar = false;
            
            for (int i = 0; i &lt; 15; i++)
            {
                File.Create(batch.Batch("Test"));
            }
            
            // 출력 결과
            TestHIE.Framework_20080505_00000
            TestHIE.Framework_20080505_00001
            TestHIE.Framework_20080505_00002
            ...
            </code>
            </example>
        </member>
        <member name="M:HIE.Framework.Text.FormatBatch.#ctor">
            <summary>
            FormatBatch를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Text.FormatBatch.AddFormatter(HIE.Framework.Text.FormatAppender)">
            <summary>
            <see cref="T:HIE.Framework.Text.FormatAppender"/> 개체를 등록합니다.
            </summary>
            <param name="appender">
            <see cref="T:HIE.Framework.Text.FormatAppender"/> 개체
            </param>
            <exception cref="T:System.ArgumentException">
            <c>appender</c>가 널이면 예외가 발생합니다.
            </exception>
        </member>
        <member name="M:HIE.Framework.Text.FormatBatch.AddFormatterRange(HIE.Framework.Text.FormatAppender[])">
            <summary>
            <see cref="T:HIE.Framework.Text.FormatAppender"/> 개체의 배열을 등록합니다.
            </summary>
            <param name="appenders"><see cref="T:HIE.Framework.Text.FormatAppender"/> 개체 배열</param>
            <exception cref="T:System.ArgumentException">
            <c>appenders</c>가 널이면 예외가 발생합니다.
            </exception>
        </member>
        <member name="M:HIE.Framework.Text.FormatBatch.RemoveFormatter(HIE.Framework.Text.FormatAppender)">
            <summary>
            <see cref="T:HIE.Framework.Text.FormatAppender"/> 개체를 삭제합니다.
            </summary>
            <param name="appender">삭제할 <see cref="T:HIE.Framework.Text.FormatAppender"/> 개체</param>
        </member>
        <member name="M:HIE.Framework.Text.FormatBatch.RemoveFormatterAt(System.Int32)">
            <summary>
            지정한 위치에 존재하는 <see cref="T:HIE.Framework.Text.FormatAppender"/> 개체를 삭제합니다.
            </summary>
            <param name="position">위치</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <c>position</c> 값이 범위를 벗어나는 경우에 예외가 발생합니다.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <c>FormatAppender</c> 개체가 하나도 존재하지 않을 경우 예외가 발생합니다.
            </exception>
        </member>
        <member name="M:HIE.Framework.Text.FormatBatch.Batch(System.String)">
            <summary>
            포맷을 적용하여 문자열 연결값을 반환합니다.
            </summary>
            <param name="source">소스 문자열</param>
            <returns>포맷 내용을 연결한 문자열</returns>
        </member>
        <member name="M:HIE.Framework.Text.FormatBatch.Reset">
            <summary>
            포맷을 지정하는데 필요한 모든 리소스를 초기화합니다.
            </summary>
            <remarks>
            내부 <see cref="T:HIE.Framework.Text.FormatAppender"/>개체의 <c>Reset</c>메소드를
            순차적으로 호출합니다.
            </remarks>
        </member>
        <member name="P:HIE.Framework.Text.FormatBatch.CommonSeparator">
            <summary>
            공용 분리자를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Text.FormatBatch.UseSeparatorAtFirstChar">
            <summary>
            첫 Appender의 구분자의 사용여부를 가져오거나 설정합니다.
            </summary>
            <remarks>
            값이 false이면 첫 구분자는 무시됩니다. 기본값은 true입니다.
            </remarks>
        </member>
        <member name="T:HIE.Framework.Text.NaturalStringComparer">
             <summary>
             아스키 문자열 비교 방식이 아닌 인간이 읽을 수 있는 형태의 문자열 비교를 수행합니다.
             </summary>
             <remarks>
             사람이 판단하는 정렬방식으로 <c>NaturalStringComparer</c>를 통하여 문자열을 정렬하는 기능을 제공합니다.
             </remarks>
             <example>
             다음 예제 <c>NaturalStringComparer</c>를 사용하여 정렬된 문자열을 출력하고 비교하기 위한 기본 아스키 문자열 비교
             방식으로 정렬된 문자열을 출력합니다.
             <code>
             using System;
             using System.Collections.Generic;
             using System.Text;
             using HIE.Framework.Text;
             
             public class TestNaturalStringComparer
             {
                 public static void Test()
                 {
                     string[] strings = {"abcde 1","abcde 2","abcde   8","abcde 1★2","abkzjje 11","abcde 1○4","abcde 1오예2",
                     "abcde 1aa","abcde _12","abcde 12b","abcde 2.3","abcde 345,343.ff","abcde 4","abcde 05","★","○","※"};
            
                     DateTime time = DateTime.Now;
                     // 원래 비교 연산
                     Array.Sort(strings);
                     foreach (string str in strings)
                         Console.WriteLine(str);
                     // 원래 비교 연산의 결과수행 시간
                     TimeSpan span = DateTime.Now - time;
                     Console.WriteLine(span.ToString());
                     
                     time = DateTime.Now;  
                     // Natural 연산
                     Array.Sort(strings, new NaturalStringComparer());
                     foreach (string str in strings)
                         Console.WriteLine(str);
                     // Natural 연산의 결과수행 시간   
                     span = DateTime.Now - time;
                     Console.WriteLine(span.ToString());
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:HIE.Framework.Text.NaturalStringComparer.#ctor">
            <summary>
            기본 생성자입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Text.NaturalStringComparer.Compare(System.String,System.String)">
            <summary>
            인자로 주어진 두 문자열을 비교합니다.
            </summary>
            <param name="x">비교 문자열 x</param>
            <param name="y">비교 문자열 y</param>
            <returns>
            x == y 이면 0, x &lt; y 이면 음수의 정수 값, x &gt; y 이면 양의 정수값을 반환합니다.
            </returns>
        </member>
        <member name="T:HIE.Framework.Text.NaturalStringComparer.TokenType">
            <summary>
            토큰 타입을 가리키는 열거형
            (내부용이므로 노출하지 않습니다.)
            </summary>
        </member>
        <member name="T:HIE.Framework.Text.NaturalStringComparer.StringTokenizer">
            <summary>
            <c>NaturalStringComparer</c> 내에서 인자로 받아들인 문자열의 토큰을 구분짓는 기능을 하는 내부 클래스이다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Text.NaturalStringComparer.StringTokenizer.NULL_CHAR">
            <summary>
            NULL_CHAR = \0
            </summary>
        </member>
        <member name="M:HIE.Framework.Text.NaturalStringComparer.StringTokenizer.#ctor(HIE.Framework.Text.NaturalStringComparer)">
            <summary>
            <c>NaturalStringComparer</c> 객체를 인자로 받는 생성자입니다.
            </summary>
            <param name="naturalComparer"><c>NaturalStringComparer</c> 객체</param>
        </member>
        <member name="M:HIE.Framework.Text.NaturalStringComparer.StringTokenizer.Init(System.String)">
            <summary>
            분석할 문자열로 초기화합니다.
            </summary>
            <remarks>
            <c>Init</c> 메소드가 호출이 되면 최초 한번 토큰이 만들어집니다.
            </remarks>
            <param name="source">분석할 문자열</param>
        </member>
        <member name="M:HIE.Framework.Text.NaturalStringComparer.StringTokenizer.NextToken">
            <summary>
            다음 토큰을 읽습니다.
            토큰의 기준은 숫자와 문자뿐입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Text.NaturalStringComparer.StringTokenizer.NextChar">
            <summary>
            다음 문자를 읽습니다.
            마지막의 경우 널문자로 대치됩니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Text.NaturalStringComparer.StringTokenizer.ParseNumeric">
            <summary>
            숫자 토큰을 읽어 들입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Text.NaturalStringComparer.StringTokenizer.ParseString">
            <summary>
            문자 토큰을 읽어들입니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Text.NaturalStringComparer.StringTokenizer.StringToken">
            <summary>
            문자열 토큰을 가져온다.
            </summary>
            <value>
            숫자, 문자에 상관없이 반환한다.
            </value>
        </member>
        <member name="P:HIE.Framework.Text.NaturalStringComparer.StringTokenizer.NumericToken">
            <summary>
            숫자형 토큰을 가져온다.
            </summary>
            <value>
            숫자로 변형된 deciaml 값으로 반환된다.
            </value>
        </member>
        <member name="P:HIE.Framework.Text.NaturalStringComparer.StringTokenizer.TokenType">
            <summary>
            현재 토큰의 타입을 가져온다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Text.NumberSequenceAppender">
            <summary>
            소스 문자열에 지정된 유효자릿수의 숫자를 연결합니다.
            </summary>
            <remarks>
            <para>숫자는 0을 포함한 양의 정수입니다.</para>
            <para>숫자가 유효자리수를 넘는 경우에는 숫자값을 그대로 사용합니다.</para>
            </remarks>
            <example>
            다음 코드 예제에서는 <c>NumberSequenceAppender</c>를 사용하여 유효자릿수만큼의 숫자값을 출력합니다.
            <code>
            using System;
            using System.Collections.Generic;
            using System.Text;
            using HIE.Framework.Text;
            
            class NumberSequenceAppenderSample
            {
                static void Main()
                {
                    FormatAppender[] appenders = new FormatAppender[] 
                    {new NumberSequenceAppender(5)};
                    
                    FormatBatch batch = new FormatBatch();
                    batch.AddFormatterRange(appenders);
                    batch.CommonSeparator = "_";
                    batch.UseSeparatorAtFirstChar = false;
                    
                    for (int i = 0; i &lt; 15; i++)
                    {
                        Console.WriteLine(batch.Batch("Test"));
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:HIE.Framework.Text.NumberSequenceAppender.#ctor">
            <summary>
            NumberSequenceAppender를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Text.NumberSequenceAppender.#ctor(System.Int32)">
            <summary>
            NumberSequenceAppender를 생성합니다.
            </summary>
            <param name="digits">숫자 증가를 위한 유효자릿수입니다.</param>
        </member>
        <member name="M:HIE.Framework.Text.NumberSequenceAppender.GetFormat(System.Int32)">
            <summary>
            숫자 포맷을 생성하여 반환합니다.
            빈 자리에는 0으로 채워집니다.
            </summary>
            <param name="digits">유효 자릿수</param>
            <returns>숫자 포맷 문자열</returns>
        </member>
        <member name="M:HIE.Framework.Text.NumberSequenceAppender.AppendFormat(System.String)">
            <summary>
            포맷을 적용하여 문자열 연결값을 반환합니다.
            </summary>
            <param name="source">소스 문자열</param>
            <returns>포맷 내용을 연결한 문자열</returns>
        </member>
        <member name="M:HIE.Framework.Text.NumberSequenceAppender.Reset">
            <summary>
            포맷을 지정하는데 필요한 모든 리소스를 초기화합니다.
            </summary>
            <remarks>
            내부 증가값을 0으로 초기화합니다.
            </remarks>
        </member>
        <member name="P:HIE.Framework.Text.NumberSequenceAppender.Digits">
            <summary>
            유효 자릿수를 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Text.NumberSequenceAppender.StartNumber">
            <summary>
            시작 값을 가져오거나 설정합니다.
            </summary>
            <exception cref="T:System.ArgumentException">
            설정 값이 음의 정수라면 예외가 발생합니다.
            </exception>
        </member>
    </members>
</doc>
