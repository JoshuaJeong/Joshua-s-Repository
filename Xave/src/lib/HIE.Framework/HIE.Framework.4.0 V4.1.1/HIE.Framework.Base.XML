<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HIE.Framework.Base</name>
    </assembly>
    <members>
        <member name="T:HIE.Framework.Base.BizBase">
            <summary>
            Business Service 를 위한 Base 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.BizBase.#ctor">
            <summary>
            BizBase 의 새 인스턴스를 생성 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.BizBase.System#IDisposable#Dispose">
            <summary>
            자원을 해제 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.BizBase.Database">
            <summary>
            Biz Class 에서 사용될 수 있는 HIE.Framework.Data.Database 개체 입니다.
            <para>필요한 경우 이 속성을 각 Domain Layer 개체 생성자로 전달하여 사용 할 수 있습니다.</para>
            <para>이 때, 해당 리소스의 사용이 종료되면 Dispose() 를 호출 하십시오.</para>
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.BizBase.OrmSession">
            <summary>
            Biz Class 에서 사용될 수 있는 NHibernate.ISession 인터페이스 입니다.
            <para>필요한 경우 이 속성을 각 Domain Layer 개체 생성자로 전달하여 사용 할 수 있습니다.</para>
            <para>이 때, 해당 리소스의 사용이 종료되면 Close() 를 호출 하십시오.</para>
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.DacBase`1">
            <summary>
            HIE.Framework.Data.Database 와 NHibernate ORM 개체를 사용하는 DacBase 클래스 입니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.IPersistence`1">
            <summary>
            영속성 지원 프레임 워크의 기본 메소드를 정의 하는 인터페이스 입니다.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:HIE.Framework.Base.IPersistence`1.Get(System.Object)">
            <summary>
            key 로 도메인 데이터를 Database 에서 반환 합니다.
            </summary>
            <param name="key">도메인 데이터를 찾기 위한 Primary Key 입니다.</param>
            <returns>도메인 데이터 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.IPersistence`1.Save(`0,System.Boolean)">
            <summary>
            DTO 개체를 Database 에 등록 합니다.
            </summary>
            <param name="dto">Save 될 DTO 입니다.</param>
            <param name="connectionHold">Session 을 유지시킬지 여부 입니다.
            <para>false 로 설정되면 세션이 종료되므로 Transaction 사용시 유의해야 합니다.</para>
            </param>
            <returns>Insert 된 데이터의 key 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.IPersistence`1.SaveOrUpdate(`0,System.Boolean)">
            <summary>
            DTO 개체를 Dtabase 에 Insert 하거나 Update 합니다.
            <para>ISession 개체로 부터 반환 된 개체에 대해서만 작동 할 수 있습니다.</para>
            <para>만일, new 키워드로 생성된 개체에 적용할 경우 오류를 발생시킬 수 있으니 사용에 유의해야 합니다.</para>
            </summary>
            <param name="dto">적용될 DTO 개체 입니다.</param>
            <param name="connectionHold">Session 을 유지시킬지 여부 입니다.
            <para>false 로 설정되면 세션이 종료되므로 Transaction 사용시 유의해야 합니다.</para>
            </param>
            <returns>적용된 데이터 입니다.
            <para>
            key 가 없는 상태에서 적용된다면 반환된 개체에는 Database 에 적용된 후 의 key 가 등록 됩니다.
            </para>
            </returns>
        </member>
        <member name="M:HIE.Framework.Base.IPersistence`1.Update(System.Object,System.Boolean)">
            <summary>
            DTO 개체로 도메인 데이터를 Update 합니다.
            </summary>
            <param name="dto">Update 될 DTO 입니다.</param>
            <param name="connectionHold">Session 을 유지시킬지 여부 입니다.
            <para>false 로 설정되면 세션이 종료되므로 Transaction 사용시 유의해야 합니다.</para>
            </param>
            <returns>Update 된 DTO 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.IPersistence`1.Delete(System.Object,System.Boolean)">
            <summary>
            Database 에서 key 에 해당하는 도메인 데이터를 삭제 합니다.
            </summary>
            <param name="key">삭제될 도메인 데이터의 key 입니다.</param>
            <param name="connectionHold">Session 을 유지시킬지 여부 입니다.
            <para>false 로 설정되면 세션이 종료되므로 Transaction 사용시 유의해야 합니다.</para>
            </param>
        </member>
        <member name="F:HIE.Framework.Base.DacBase`1._commandtimeout">
            <summary>
            Database Connection 에서 응답할 최대 시간 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DacBase`1._ormDacAgent">
            <summary>
            Singleton ORM Session 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DacBase`1._ormStatelessDacAgent">
            <summary>
            Singleton ORM StatelessSession 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DacBase`1._dataSource">
            <summary>
            시스템 유형 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DacBase`1._dataSourceName">
            <summary>
            사용자 정의된 데이터 소스 명 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DacBase`1._entity">
            <summary>
            내부 entity 개체 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DacBase`1._isOuterConnect">
            <summary>
            HIE.Framework.Data.Database 개체를 사용하는 경우, HIE.Framework.Data.Database 개체가 외부에서 제공되었는지를 확인 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DacBase`1._isAutoClose">
            <summary>
            Dispose 가 호출됨과 동시에 Connection 을 닫을지 여부를 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DacBase`1._provider">
            <summary>
            HIE.Framework.Data.Database 를 제공하는 Provider 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DacBase`1._ormProvider">
            <summary>
            NHibernate ISession 을 제공하는 Provider 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.#ctor">
            <summary>
            DacBase 의 새 인스턴스를 생성 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.#ctor(System.Boolean)">
            <summary>
            DacBase 의 새 인스턴스를 생성 합니다.
            </summary>
            <param name="isAutoClose">Dispose 가 호출됨과 동시에 Connection 을 닫을지 여부 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.#ctor(`0)">
            <summary>
            DTO Entity 를 매개변수로 DacBase 의 새 인스턴스를 생성 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.#ctor(`0,System.Boolean)">
            <summary>
            DTO Entity 와 를 매개변수로 DacBase 의 새 인스턴스를 생성 합니다.
            </summary>
            <param name="dto">DTO Entity 개체 입니다.</param>
            <param name="isAutoClose">Dispose 가 호출됨과 동시에 Connection 을 닫을지 여부 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.#ctor(HIE.Framework.Data.Database)">
            <summary>
            HIE.Framework.Data.Database 개체를 매개변수로 DacBase 의 새 인스턴스를 생성 합니다.
            <para>
            이 생성자를 사용할 경우 Domain Layer 의 외부에서 Connection 을 닫아야 할 수 도 있습니다.
            </para>
            </summary>
            <param name="database">생성된 HIE.Framework.Data.Database 개체 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.#ctor(HIE.Framework.Data.Database,System.Boolean)">
            <summary>
            HIE.Framework.Data.Database 개체를 매개변수로 DacBase 의 새 인스턴스를 생성 합니다.
            <para>
            이 생성자를 사용할 경우 Domain Layer 의 외부에서 Connection 을 닫아야 할 수 도 있습니다.
            </para>
            </summary>
            <param name="database">생성된 HIE.Framework.Data.Database 개체 입니다.</param>
            <param name="isAutoClose">Dispose 가 호출됨과 동시에 Connection 을 닫을지 여부 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.#ctor(NHibernate.ISession)">
            <summary>
            NHibernate.ISession 개체를 매개변수로 DacBase 의 새 인스턴스를 생성 합니다.
            <para>
            이 생성자를 사용할 경우 Domain Layer 의 외부에서 Connection 을 닫아야 할 수 도 있습니다.
            </para>
            </summary>
            <param name="ormSession">생성된 NHibernate.ISession 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.#ctor(NHibernate.ISession,System.Boolean)">
            <summary>
            NHibernate.ISession 개체를 매개변수로 DacBase 의 새 인스턴스를 생성 합니다.
            <para>
            이 생성자를 사용할 경우 Domain Layer 의 외부에서 Connection 을 닫아야 할 수 도 있습니다.
            </para>
            </summary>
            <param name="ormSession">생성된 NHibernate.ISession 입니다.</param>
            <param name="isAutoClose">Dispose 가 호출됨과 동시에 Connection 을 닫을지 여부 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.BeginTransaction(System.Boolean)">
            <summary>
            HIE.Framework.Data.Database 개체의 트랜잭션을 시작 합니다.
            </summary>
            <param name="isSingleton">HIE.Framework.Data.Database 개체의 Singleton 여부를 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.RollbackTransaction">
            <summary>
            HIE.Framework.Data.Database 개체의 트랜잭션을 취소 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.CommitTransaction">
            <summary>
            HIE.Framework.Data.Database 개체의 트랜잭션을 완료 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.OrmBeginTransaction">
            <summary>
            Singleton ISession 개체의 트랜잭션을 시작 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.OrmRollbackTransaction">
            <summary>
            Singleton ISession 개체의 트랜잭션을 취소 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.OrmCommitTransaction">
            <summary>
            Singleton ISession 개체의 트랜잭션을 완료 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.OrmBeginTransaction_Stateless">
            <summary>
            Singleton IStatelessSession 개체의 트랜잭션을 시작 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.OrmRollbackTransaction_Stateless">
            <summary>
            Singleton IStatelessSession 개체의 트랜잭션을 취소 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.OrmCommitTransaction_Stateless">
            <summary>
            Singleton IStatelessSession 개체의 트랜잭션을 완료 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.db_ExcuteFailure(System.Object,HIE.Framework.Data.ExcuteFailureEventArgs)">
            <summary>
            데이터베이스 개체 실행 오류 시 발생 하는 이벤트 입니다.
            <para>
            로그 저장 후 발생된 DataException 을 throw 합니다.
            </para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.SetDataSource">
            <summary>
            상속된 클래스에서 SystemEnum 을 지정하도록 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DacBase`1.disposed">
            <summary>
            Dispose 호출여부 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DacBase`1.handle">
            <summary>
            운영체제 핸들러 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.Dispose">
            <summary>
            Dispose 를 호출 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.Dispose(System.Boolean)">
            <summary>
            Dispose 추상 메소드 입니다.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.Get(System.Object)">
            <summary>
            key 로 도메인 데이터를 Database 에서 반환 합니다.
            </summary>
            <param name="key">도메인 데이터를 찾기 위한 Key 입니다.</param>
            <returns>도메인 데이터 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.Save(`0,System.Boolean)">
            <summary>
            Entity 개체를 Database 에 등록 합니다.
            </summary>
            <param name="dto">Save 될 DTO 입니다.</param>
            <param name="connectionHold">Session 을 유지시킬지 여부 입니다.
            <para>false 로 설정되면 세션이 종료되므로 Transaction 사용시 유의해야 합니다.</para>
            </param>
            <returns>Insert 된 데이터의 key 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.Save(System.Boolean)">
            <summary>
            Entity 개체를 Database 에 등록 합니다.
            </summary>
            <param name="connectionHold">Session 을 유지시킬지 여부 입니다.
            <para>false 로 설정되면 세션이 종료되므로 Transaction 사용시 유의해야 합니다.</para>
            </param>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.SaveOrUpdate(`0,System.Boolean)">
            <summary>
            DTO 개체를 Dtabase 에 Insert 하거나 Update 합니다.
            <para>ISession 개체로 부터 반환 된 개체에 대해서만 작동 할 수 있습니다.</para>
            <para>만일, new 키워드로 생성된 개체에 적용할 경우 오류를 발생시킬 수 있으니 사용에 유의해야 합니다.</para>
            </summary>
            <param name="dto">적용될 DTO 개체 입니다.</param>
            <param name="connectionHold">Session 을 유지시킬지 여부 입니다.
            <para>false 로 설정되면 세션이 종료되므로 Transaction 사용시 유의해야 합니다.</para>
            </param>
            <returns>적용된 데이터 입니다.
            <para>
            key 가 없는 상태에서 적용된다면 반환된 개체에는 Database 에 적용된 후 의 key 가 등록 됩니다.
            </para>
            </returns>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.SaveOrUpdate(System.Boolean)">
            <summary>
            Entity 개체를 Dtabase 에 Insert 하거나 Update 합니다.
            <para>ISession 개체로 부터 반환 된 개체에 대해서만 작동 할 수 있습니다.</para>
            <para>만일, new 키워드로 생성된 개체에 적용할 경우 오류를 발생시킬 수 있으니 사용에 유의해야 합니다.</para>
            </summary>
            <param name="connectionHold">Session 을 유지시킬지 여부 입니다.
            <para>false 로 설정되면 세션이 종료되므로 Transaction 사용시 유의해야 합니다.</para>
            </param>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.Update(System.Object,System.Boolean)">
            <summary>   
            DTO 개체로 도메인 데이터를 Update 합니다.
            </summary>
            <param name="dto">Update 될 DTO 입니다.</param>
            <param name="connectionHold">Session 을 유지시킬지 여부 입니다.
            <para>false 로 설정되면 세션이 종료되므로 Transaction 사용시 유의해야 합니다.</para>
            </param>
            <returns>Update 된 DTO 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.Update(System.Boolean)">
            <summary>
            Entity 개체로 도메인 데이터를 Update 합니다.
            </summary>
            <param name="connectionHold">Session 을 유지시킬지 여부 입니다.
            <para>false 로 설정되면 세션이 종료되므로 Transaction 사용시 유의해야 합니다.</para>
            </param>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.Delete(System.Object,System.Boolean)">
            <summary>
            Database 에서 key 에 해당하는 도메인 데이터를 삭제 합니다.
            </summary>
            <param name="key">삭제될 도메인 데이터의 key 입니다.</param>
            <param name="connectionHold">Session 을 유지시킬지 여부 입니다.
            <para>false 로 설정되면 세션이 종료되므로 Transaction 사용시 유의해야 합니다.</para>
            </param>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.SearchBy``1">
            <summary>
            NHibernate.<c>IQueryOver&lt;T&gt;</c> 를 생성 합니다.
            <para>
            Searchby&lt;T&gt; 로 NHibernate.ISession 개체의 .QueryOver&lt;T&gt; 를 대체 할 수 있습니다.
            </para>
            </summary>
            <typeparam name="T">도메인 Entity 입니다.</typeparam>
            <returns>NHibernate.IQueryOver 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.Disconnect">
            <summary>
            ORM 개체의 Session 을 종료 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DacBase`1.Connect">
            <summary>
            ORM 개체의 Session 을 연결 합니다.
            <para>
            ORM 메소드 호출시 자동으로 연결되므로 특별히 실행할 필요는 없습니다.
            </para>
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DacBase`1.Entity">
            <summary>
            내부 도메인 entity 개체를 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DacBase`1.CommandTimeOut">
            <summary>
            데이터베이스 CommandTimeOut을 설정합니다.
            명령 실행을 종료하고 오류를 생성하기 전 대기 시간을 가져오거나 설정합니다.
            명령을 실행할 때까지 대기하는 시간(초)입니다. 기본 30초 입니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DacBase`1.DacAgent">
            <summary>
            Singleton 이 아닌 Database 개체를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DacBase`1.DacAgentNonSingleton">
            <summary>
            Singleton 이 아닌 HIE.Framework.Data.Database 개체를 가져옵니다.
            <para>Singleton 이 아닌 이 속성은 사용자에게 제공되는 서비스 레벨에서 자주 호출할 경우</para>
            <para>*.hbm.xml 매핑이 자주 발생하므로 성능 이슈가 있을 경우 DacAgent 를 사용하여야 합니다. </para>
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DacBase`1.DacAgentSingleton">
            <summary>
            Singleton HIE.Framework.Data.Database 개체를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DacBase`1.OrmDacAgent">
            <summary>
            Singleton NHibernate.ISession 개체를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DacBase`1.OrmStatelessDacAgent">
            <summary>
            Singleton NHibernate.IStatelessSession 개체를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DacBase`1.OrmDacAgentNonSingleton">
            <summary>
            Singleton 이 아닌 NHibernate.ISession 개체를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DacBase`1.OrmDacAgentSingleton">
            <summary>
            Singleton NHibernate.ISession 개체를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DacBase`1.OrmStatelessDacAgentSingleton">
            <summary>
            Singleton NHibernate.IStatelessSession 개체를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DacBase`1.DataSource">
            <summary>
            시스템 유형을 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DacBase`1.DataSourceName">
            <summary>
            시스템 유형을 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.UserDefine_DacFactory">
            <summary>
            사용자 정의 시스템에 대한 HIE.Framework.Data.Database 를 제공합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.Dac.DatabaseProvider">
            <summary>
            HIE.Framework.Data.Database 를 제공하는  Provider 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.DatabaseProvider._destination">
            <summary>
            정보교류 시스템 접속을 위한 System 유형 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.DatabaseProvider._failHandler">
            <summary>
            명령 실행 실패 시 발생하는 이벤트를 적용하기 위한 이벤트 핸들러 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.DatabaseProvider._dbType">
            <summary>
            Access 할 관계형 데이터베이스 유형 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.DatabaseProvider._connectionString">
            <summary>
            물리적인 Database 접속을 위한 연결 문자열 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.DatabaseProvider._db">
            <summary>
            HIE.Framework.Data.Database 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.DatabaseProvider.InitConnectionFactory">
            <summary>
            DatabaseFactory 를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.DatabaseProvider.GetSession">
            <summary>
            Singleton 세션을 반환 합니다.
            </summary>
            <returns>Singleton 세션 입니다.</returns>        
        </member>
        <member name="M:HIE.Framework.Base.Dac.DatabaseProvider.GetNonSingletonSession">
            <summary>
            Non Singleton 세션을 반환 합니다.
            </summary>
            <returns>Non Singleton 세션 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.Dac.DatabaseProvider.GetSession(System.Object)">
            <summary>
            Database 세션을 인터셉터 와 함께 또는 인터셉터 없이 반환 합니다.
            이 메소드는 직접 호출되지 않고 별도의 메소드로 호출 됩니다.
            
            ************************************ Warning ****************************************** 
            GetSession() 메소드는 Singleton 을 위해 구현되었으나 IDbConnection 개체 그 자체로는
            멀티 스레드를 지원하지 않습니다. Nhibernate 의 ISession 과 같이 멀티 스레드를
            지원하는 Singleton IDbConnection 을 구현하려면 별도의 추가 구현이 필요할 수 있습니다.
            따라서 현재의 GetSession() 메소드 로는 멀티스레드 Singleton 으로 사용시 오류가 발생합니다.
            </summary>
            <param name="interceptor">
            멀티스레드 Singleton 을 위해 포함하였으나 메소드 내부에서는 사용되지 않습니다.
            </param>
            <returns>싱글스레드 Singleton 만을 지원하는 Database 개체 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.Dac.DatabaseProvider.CloseSession">
            <summary>
            세션을 닫습니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.DatabaseProvider.BeginTransaction">
            <summary>
            트랜잭션을 시작 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.DatabaseProvider.CommitTransaction">
            <summary>
            트랜잭션을 Commit 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.DatabaseProvider.RollbackTransaction">
            <summary>
            트랜잭션을 롤백 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.DatabaseProvider.disposed">
            <summary>
            Dispose 호출여부 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.DatabaseProvider.handle">
            <summary>
            운영체제 핸들러 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.DatabaseProvider.Dispose">
            <summary>
            Dispose 를 호출 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.DatabaseProvider.Dispose(System.Boolean)">
            <summary>
            Dispose 추상 메소드 입니다.
            </summary>
            <param name="disposing">Dispose 완료 여부 입니다.</param>
        </member>
        <member name="P:HIE.Framework.Base.Dac.DatabaseProvider.ParameterPrefix">
            <summary>
            데이터베이스에 적용되는 파라미터 의 PreFix 를 가져옵니다. (ex : MSSQL = "@")
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.DatabaseProvider.CommandTimeOut">
            <summary>
            IDbCommand 의 CommandTimeout 속성을 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.DatabaseProvider.FailHandler">
            <summary>
            명령 실행 실패 시 발생하는 이벤트를 적용하기 위한 이벤트 핸들러를 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.DatabaseProvider.DatabaseFactory">
            <summary>
            HIE.Framework.Data.Database 를 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.DatabaseProvider.IsInWebContext">
            <summary>
            HttpContext 의 사용 여부를 가져오거나 설정 합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="P:HIE.Framework.Base.Dac.DatabaseProvider.TRANSACTION_KEY">
            <summary>
            스레드 트랜잭션의 key 를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.DatabaseProvider.SESSION_KEY">
            <summary>
            스레드 세션의 key 를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.DatabaseProvider.ThreadTransaction">
            <summary>
            스레드 트랜잭션 인터페이스를 가져오거나 설정 합니다.
            <para>Web Context 내에서 사용되는 경우 &lt;see cref="HttpContext"&gt; 대신 &lt;see cref="CallContext"&gt; 를 사용 합니다.</para>
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.DatabaseProvider.ThreadConnection">
            <summary>
            스레드 세션 인터페이스를 가져오거나 설정 합니다.
            <para>Web Context 내에서 사용되는 경우 &lt;see cref="HttpContext"&gt; 대신 &lt;see cref="CallContext"&gt; 를 사용 합니다.</para>
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.UserDefine_DacFactory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.UserDefine_DacFactory.Instance(System.String)">
            <summary>
            Singleton 방식의 HIE.Framework.Data.Database 를 반환 합니다.
            </summary>
            <param name="dataSourceName">적용될 Datasource 입니다.</param>
            <returns>Singleton 방식의 HIE.Framework.Data.Database 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.UserDefine_DacFactory.NonSingletoneInstance(System.String)">
            <summary>
            Non Singleton 방식의 HIE.Framework.Data.Database 를 반환 합니다.
            </summary>
            <param name="dataSourceName">적용될 Datasource 입니다.</param>
            <returns>Non Singleton 방식의 HIE.Framework.Data.Database 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.UserDefine_DacFactory.#ctor(System.String)">
            <summary>
            HIE.Framework.Data.Database 를 생성합니다.
            </summary>
            <param name="dataSourceName">적용될 Datasource 입니다.</param>
        </member>
        <member name="T:HIE.Framework.Base.UserDefine_DacFactory.Nested">
            <summary>
            Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.UserDefine_DacFactory.Nested.#cctor">
            <summary>
            Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.UserDefine_DacFactory.Nested.Hash">
            <summary>
            HIE.Framework.Data.Database 를 관리하는 hashTable 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.UserDefine_DacFactory.Nested.GetFactory(System.String)">
            <summary>
            hashTable 로부터 지정된 HIE.Framework.Data.Database 를 반환 합니다.
            </summary>
            <param name="dataSourceName">지정된 dataSource 입니다.</param>
            <returns>Singleton HIE.Framework.Data.Database 개체 입니다.</returns>
        </member>
        <member name="T:HIE.Framework.Base.Default_DacFactory">
            <summary>
            SystemEnum.DEFAULT 에 대한 HIE.Framework.Data.Database 를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Default_DacFactory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Default_DacFactory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Default_DacFactory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Default_DacFactory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.Default_DacFactory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Default_DacFactory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Default_DacFactory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.ATNA_DacFactory">
            <summary>
            SystemEnum.ATNA 에 대한 HIE.Framework.Data.Database 를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.ATNA_DacFactory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.ATNA_DacFactory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.ATNA_DacFactory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.ATNA_DacFactory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.ATNA_DacFactory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.ATNA_DacFactory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.ATNA_DacFactory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.FHIR_DacFactory">
            <summary>
            SystemEnum.FHIR 에 대한 HIE.Framework.Data.Database 를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.FHIR_DacFactory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.FHIR_DacFactory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.FHIR_DacFactory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.FHIR_DacFactory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.FHIR_DacFactory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.FHIR_DacFactory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.FHIR_DacFactory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.MPI_DacFactory">
            <summary>
            SystemEnum.MPI 에 대한 HIE.Framework.Data.Database 를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.MPI_DacFactory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.MPI_DacFactory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.MPI_DacFactory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.MPI_DacFactory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.MPI_DacFactory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.MPI_DacFactory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.MPI_DacFactory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.PORTAL_DacFactory">
            <summary>
            SystemEnum.PORTAL 에 대한 HIE.Framework.Data.Database 를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.PORTAL_DacFactory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.PORTAL_DacFactory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.PORTAL_DacFactory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.PORTAL_DacFactory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.PORTAL_DacFactory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.PORTAL_DacFactory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.PORTAL_DacFactory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.REGISTRY_DacFactory">
            <summary>
            SystemEnum.REGISTRY 에 대한 HIE.Framework.Data.Database 를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.REGISTRY_DacFactory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.REGISTRY_DacFactory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.REGISTRY_DacFactory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.REGISTRY_DacFactory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.REGISTRY_DacFactory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.REGISTRY_DacFactory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.REGISTRY_DacFactory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.REPOSITORY_DacFactory">
            <summary>
            SystemEnum.REPOSITORY 에 대한 HIE.Framework.Data.Database 를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.REPOSITORY_DacFactory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.REPOSITORY_DacFactory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.REPOSITORY_DacFactory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.REPOSITORY_DacFactory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.REPOSITORY_DacFactory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.REPOSITORY_DacFactory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.REPOSITORY_DacFactory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.UserDefine_Factory">
            <summary>
            사용자 정의 시스템에 대한 ISession 인터페이스를 제공합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.Dac.SessionProvider">
            <summary>
            NHibernate.ISession / ISessionFactory 인터페이스를 제공 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider._dbType">
            <summary>
            물리적인 Database 유형 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider._destination">
            <summary>
            정보교류 시스템 접속을 위한 System 유형 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider._userDefineDBName">
            <summary>
            DBEnum 이 USER_DEFINE 인 경우 제공받은 사용자정의 DB 명 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider._connectionString">
            <summary>
            물리적인 Database 접속을 위한 연결 문자열 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider._transactionClassId">
            <summary>
            스레드 트랜잭션의 클래스 ID 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider._mappingFilesPath">
            <summary>
            OR-Mapping 을 위한 hbm 매핑 파일 의 상위 디렉토리 경로 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider._connCloseMode">
            <summary>
            NHibernate.Cfg.Environment.ReleaseConnections 대응 Type 입니다.
            <para>
            AUTO (after_transaction, auto) : Transaction이 종료된 후에 Connection를 종료하며, Transaction 이 없다면 tatement가 실행된 후에 종료합니다.
            </para>
            <para>
            CLOSE (on_close) : Session이 Dispose된 후에 Connection를 종료합니다.
            </para>
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.InitSessionFactory">
            <summary>
            ISessionFactory 를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.CreateNewClassID">
            <summary>
            스레드 트랜잭션의 클래스 ID 를 설정 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.GetMappingDir(System.String)">
            <summary>
            제공된 경로의 물리적인 System.IO.DirectoryInfo 를 반환 합니다.
            </summary>
            <param name="path">Nhibernate 매핑을 위한 절대 경로 또는 상대 경로 입니다.
            <para>
               1. IIS 에서 실행되는 경우 : "C:\{...}\CurrentDir\", "/{....}/CurrentDir/", "./{....}/CurrentDir/", "CurrentDir/", "\{...}\CurrentDir\" 등의 구성 가능
            </para>
            <para>
               2. Application 에서 실행 할 경우 : "C:\{...}\CurrentDir\", "/{....}/CurrentDir/", "\{...}\CurrentDir\" 등의 구성 가능
            </para>
            </param>
            <returns>지정된 Database 에 접속하기 위한 hbm file 이 등록된 최 상위 경로 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.SetDatabaseConfig">
            <summary>
            물리적인 데이터베이스 유형에 따라 Configuration 정보를 변경 하여 반환 합니다.
            </summary>
            <returns>데이터베이스 유형이 적용된 Configuration 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.RegisterInterceptor(NHibernate.IInterceptor)">
            <summary>
            새로운 세션에 인터셉터를 등록 합니다. 
            이미 HttpContext에 attach 된 오픈 세션이있는 경우,이 호출되지 않을 가능성이 있습니다.
            사용되는 인터셉터가 있는 경우, BeginTransaction() 을 호출하기 전에 이를 호출하기 위해 HttpModule을 변경 해야 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.GetSession">
            <summary>
            Singleton 세션을 반환 합니다.
            </summary>
            <returns>Singleton 세션 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.GetNonSingletonSession">
            <summary>
            Non Singleton 세션을 반환 합니다.
            </summary>
            <returns>Non Singleton 세션 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.GetSession(NHibernate.IInterceptor)">
            <summary>
            세션을 인터셉터 와 함께 또는 인터셉터 없이 반환 합니다.
            이 메소드는 직접 호출되지 않고 별도의 메소드로 호출 됩니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.CloseSession">
            <summary>
            세션을 닫습니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.RegisterStatelessInterceptor(NHibernate.IInterceptor)">
            <summary>
            새로운 세션에 인터셉터를 등록 합니다. 
            이미 HttpContext에 attach 된 오픈 세션이있는 경우,이 호출되지 않을 가능성이 있습니다.
            사용되는 인터셉터가 있는 경우, BeginTransaction() 을 호출하기 전에 이를 호출하기 위해 HttpModule을 변경 해야 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.GetStatelessSession">
            <summary>
            IStateless Singleton 세션을 반환 합니다.
            </summary>
            <returns>IStateless Singleton 세션 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.GetNonSingletonStatelessSession">
            <summary>
            IStateless Non Singleton 세션을 반환 합니다.
            </summary>
            <returns>IStateless Non Singleton 세션 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.GetStatelessSession(NHibernate.IInterceptor)">
            <summary>
            Stateless 세션을 인터셉터 와 함께 또는 인터셉터 없이 반환 합니다.
            이 메소드는 직접 호출되지 않고 별도의 메소드로 호출 됩니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.CloseStatelessSession">
            <summary>
            IStatelessSession 세션을 닫습니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.BeginTransaction">
            <summary>
            트랜잭션을 시작 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.CommitTransaction">
            <summary>
            트랜잭션을 Commit 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.RollbackTransaction">
            <summary>
            트랜잭션을 롤백 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.BeginTransaction_Stateless">
            <summary>
            Stateless 트랜잭션을 시작 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.CommitTransaction_Stateless">
            <summary>
            Stateless 트랜잭션을 Commit 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.RollbackTransaction_Stateless">
            <summary>
            Stateless 트랜잭션을 롤백 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.SessionProvider.IsInWebContext">
            <summary>
            HttpContext 의 사용 여부를 가져오거나 설정 합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="P:HIE.Framework.Base.Dac.SessionProvider.TRANSACTION_KEY">
            <summary>
            스레드 트랜잭션의 key 를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.SessionProvider.TRANSACTION_STATELESS_KEY">
            <summary>
            Stateless 스레드 트랜잭션의 key 를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.SessionProvider.SESSION_KEY">
            <summary>
            스레드 세션의 key 를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.SessionProvider.STATELESS_SESSION_KEY">
            <summary>
            Stateless 스레드 세션의 key 를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.SessionProvider.SessionFactory">
            <summary>
            지정된 시스템에 해당하는 전역 ISessionFactory 를 반환 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.SessionProvider.ThreadSession">
            <summary>
            스레드 세션 인터페이스를 가져오거나 설정 합니다.
            <para>Web Context 내에서 사용되는 경우 &lt;see cref="HttpContext"&gt; 대신 &lt;see cref="CallContext"&gt; 를 사용 합니다.</para>
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.SessionProvider.ThreadStatelessSession">
            <summary>
            IStatelessSession 스레드 세션 인터페이스를 가져오거나 설정 합니다.
            <para>Web Context 내에서 사용되는 경우 &lt;see cref="HttpContext"&gt; 대신 &lt;see cref="CallContext"&gt; 를 사용 합니다.</para>
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.SessionProvider.ThreadTransaction">
            <summary>
            스레드 트랜잭션 인터페이스를 가져오거나 설정 합니다.
            <para>Web Context 내에서 사용되는 경우 &lt;see cref="HttpContext"&gt; 대신 &lt;see cref="CallContext"&gt; 를 사용 합니다.</para>
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Dac.SessionProvider.ThreadStatelessTransaction">
            <summary>
            Stateless 스레드 트랜잭션 인터페이스를 가져오거나 설정 합니다.
            <para>Web Context 내에서 사용되는 경우 &lt;see cref="HttpContext"&gt; 대신 &lt;see cref="CallContext"&gt; 를 사용 합니다.</para>
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.Dac.SessionProvider.Nested">
            <summary>
            NHibernate.ISessionFactory 에 Access 할 속성을 제공합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Dac.SessionProvider.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider.Nested._DefaultFactory">
            <summary>
            전역 NHibernate.ISessionFactory 속성 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider.Nested._ATNAFactory">
            <summary>
            전역 NHibernate.ISessionFactory 속성 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider.Nested._FHIRFactory">
            <summary>
            전역 NHibernate.ISessionFactory 속성 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider.Nested._MPIFactory">
            <summary>
            전역 NHibernate.ISessionFactory 속성 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider.Nested._PORTALFactory">
            <summary>
            전역 NHibernate.ISessionFactory 속성 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider.Nested._REGISTRYFactory">
            <summary>
            전역 NHibernate.ISessionFactory 속성 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider.Nested._REPOSITORYFactory">
            <summary>
            전역 NHibernate.ISessionFactory 속성 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider.Nested._DSUBFactory">
            <summary>
            전역 NHibernate.ISessionFactory 속성 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider.Nested._CDAFactory">
            <summary>
            전역 NHibernate.ISessionFactory 속성 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider.Nested._RESULTMONITORFactory">
            <summary>
            전역 NHibernate.ISessionFactory 속성 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider.Nested._HIELOGFactory">
            <summary>
            전역 NHibernate.ISessionFactory 속성 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Dac.SessionProvider.Nested._USER_DEFINEFactoryHash">
            <summary>
            전역 NHibernate.ISessionFactory HashTable 속성 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.UserDefine_Factory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.UserDefine_Factory.Instance(System.String)">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 ORM Instance 를 반환 합니다.
            </summary>
            <param name="dataSourceName">적용될 Datasource 입니다.</param>
            <returns>Singleton 방식의 ORM Instance 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.UserDefine_Factory.NonSingletoneInstance(System.String)">
            <summary>
            Non Singleton 방식의 ORM Instance 를 반환 합니다.
            </summary>
            <param name="dataSourceName">적용될 Datasource 입니다.</param>
            <returns>Non Singleton 방식의 ORM Instance 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.UserDefine_Factory.#ctor(System.String)">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
            <param name="dataSourceName">적용될 Datasource 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.UserDefine_Factory.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.UserDefine_Factory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.UserDefine_Factory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.UserDefine_Factory.Nested.Hash">
            <summary>
            Thread-safe, lazy loading Singleton ORM Instance 를 관리하는 hashTable 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.UserDefine_Factory.Nested.GetOrmFactory(System.String)">
            <summary>
            hashTable 로부터 지정된 ORM Instance 를 반환 합니다.
            </summary>
            <param name="dataSourceName">지정된 dataSource 입니다.</param>
            <returns>Singleton ORM Instance 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.UserDefine_Factory.Nested.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.Default_Factory">
            <summary>
            SystemEnum.DEFAULT 에 대한 ISession 인터페이스를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Default_Factory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Default_Factory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Default_Factory.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Default_Factory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.Default_Factory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.Default_Factory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Default_Factory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.Default_Factory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Default_Factory.Nested.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.ATNA_Factory">
            <summary>
            SystemEnum.ATNA 에 대한 ISession 인터페이스를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.ATNA_Factory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.ATNA_Factory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.ATNA_Factory.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.ATNA_Factory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.ATNA_Factory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.ATNA_Factory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.ATNA_Factory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.ATNA_Factory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.ATNA_Factory.Nested.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.FHIR_Factory">
            <summary>
            SystemEnum.FHIR 에 대한 ISession 인터페이스를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.FHIR_Factory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.FHIR_Factory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.FHIR_Factory.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.FHIR_Factory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.FHIR_Factory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.FHIR_Factory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.FHIR_Factory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.FHIR_Factory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.FHIR_Factory.Nested.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.MPI_Factory">
            <summary>
            SystemEnum.MPI 에 대한 ISession 인터페이스를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.MPI_Factory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.MPI_Factory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.MPI_Factory.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.MPI_Factory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.MPI_Factory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.MPI_Factory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.MPI_Factory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.MPI_Factory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.MPI_Factory.Nested.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.PORTAL_Factory">
            <summary>
            SystemEnum.MPI 에 대한 ISession 인터페이스를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.PORTAL_Factory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.PORTAL_Factory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.PORTAL_Factory.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.PORTAL_Factory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.PORTAL_Factory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.PORTAL_Factory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.PORTAL_Factory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.PORTAL_Factory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.PORTAL_Factory.Nested.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.REGISTRY_Factory">
            <summary>
            SystemEnum.REGISTRY 에 대한 ISession 인터페이스를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.REGISTRY_Factory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.REGISTRY_Factory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.REGISTRY_Factory.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.REGISTRY_Factory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.REGISTRY_Factory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.REGISTRY_Factory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.REGISTRY_Factory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.REGISTRY_Factory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.REGISTRY_Factory.Nested.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.REPOSITORY_Factory">
            <summary>
            SystemEnum.REPOSITORY 에 대한 ISession 인터페이스를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.REPOSITORY_Factory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.REPOSITORY_Factory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.REPOSITORY_Factory.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.REPOSITORY_Factory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.REPOSITORY_Factory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.REPOSITORY_Factory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.REPOSITORY_Factory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.REPOSITORY_Factory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.REPOSITORY_Factory.Nested.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.DSUB_Factory">
            <summary>
            SystemEnum.DSUB 에 대한 ISession 인터페이스를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DSUB_Factory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DSUB_Factory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DSUB_Factory.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DSUB_Factory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.DSUB_Factory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.DSUB_Factory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DSUB_Factory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DSUB_Factory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.DSUB_Factory.Nested.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.CDA_Factory">
            <summary>
            SystemEnum.DSUB 에 대한 ISession 인터페이스를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.CDA_Factory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.CDA_Factory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.CDA_Factory.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.CDA_Factory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.CDA_Factory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.CDA_Factory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.CDA_Factory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.CDA_Factory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.CDA_Factory.Nested.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.RESULT_ANALYSIS_Factory">
            <summary>
            SystemEnum.DSUB 에 대한 ISession 인터페이스를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.RESULT_ANALYSIS_Factory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.RESULT_ANALYSIS_Factory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.RESULT_ANALYSIS_Factory.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.RESULT_ANALYSIS_Factory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.RESULT_ANALYSIS_Factory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.RESULT_ANALYSIS_Factory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.RESULT_ANALYSIS_Factory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.RESULT_ANALYSIS_Factory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.RESULT_ANALYSIS_Factory.Nested.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.HIE_LOG_Factory">
            <summary>
            SystemEnum.DSUB 에 대한 ISession 인터페이스를 제공합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.HIE_LOG_Factory._config">
            <summary>
            config 정보를 수집 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.HIE_LOG_Factory.#ctor">
            <summary>
            NHibernate session factory 를 생성합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.HIE_LOG_Factory.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.HIE_LOG_Factory.Instance">
            <summary>
            Thread 에 안전한 lazy loading Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.HIE_LOG_Factory.NonSingletoneInstance">
            <summary>
            Non Singleton 방식의 Instance 를 호출 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.HIE_LOG_Factory.Nested">
            <summary>
            Thread-safe, lazy loading Singleton 클래스 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.HIE_LOG_Factory.Nested.#cctor">
            <summary>
            Thread-safe, lazy loading Singleton 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.HIE_LOG_Factory.Nested.SessionManager">
            <summary>
            Thread-safe HIE.Framework.Orm.Base 의 파생 클래스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.HIE_LOG_Factory.Nested.Close">
            <summary>
            현재 커넥션을 닫습니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.SystemLogDTO">
            <summary>
            정보교류 트랜잭션 수행시 등록될 로그에 대한 DTO 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.SystemLogDTO.#ctor">
            <summary>
            SystemLogDTO 의 새 인스턴스를 생성 합니다.
            <para>
            LogID 를 새 Guid 로 생성 합니다.
            </para>
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.SystemLogDTO.#ctor(System.String)">
            <summary>
            SystemLogDTO 의 새 인스턴스를 생성 합니다.
            </summary>
            <param name="logID">
            등록될 트랜잭션 로그 아이디 입니다.
            </param>
        </member>
        <member name="P:HIE.Framework.Base.SystemLogDTO.LogID">
            <summary>
            정보교류 로그의 아이디를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.SystemLogDTO.ServicePath">
            <summary>
            정보교류 로그의 서비스 경로를 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.SystemLogDTO.TransactionName">
            <summary>
            정보교류 트랜잭션 명 을 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.SystemLogDTO.RequestMetaData">
            <summary>
            정보교류 트랜잭션에 요청된 데이터를 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.SystemLogDTO.ResultText">
            <summary>
            정보교류 트랜잭션 결과를 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.SystemLogDTO.StartTime">
            <summary>
            정보교류 트랜잭션 시작 시간을 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.SystemLogDTO.StopTime">
            <summary>
            정보교류 트랜잭션 종료 시간을 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.SystemLogDTO.RegDate">
            <summary>
            정보교류 트랜잭션 로그 작성 시간을 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.TransactionLog">
            <summary>
            정보교류 서비스 트랜잭션 수행시 Database 에 등록될 전용 로그 기록기 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.TransactionLog._logDto">
            <summary>
            정보교류 트랜잭션 로깅 전용 DTO 입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.TransactionLog.SetDataSource">
            <summary>
            DacBase.SetDataSource 를 구현 합니다.
            <para>
            이 로그기록기 에서는 사용하지 않습니다.
            </para>
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.TransactionLog.#ctor(HIE.Framework.Base.DBEnum,HIE.Framework.Base.SystemLogDTO)">
            <summary>
            정보교류 서비스 트랜잭션 로그기록기를 생성합니다.
            </summary>
            <param name="logDbType">로그가 작성될 시스템 입니다.</param>
            <param name="logDto">작성될 로그 내용입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.TransactionLog.SetTransactionLog">
            <summary>
            정보교류 서비스 트랜잭션 로그를 작성 합니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.TransactionLog.LogWrite(HIE.Framework.Base.DBEnum,HIE.Framework.Base.SystemLogDTO)">
            <summary>
            정보교류 서비스 트랜잭션 로그를 작성 합니다.
            </summary>
            <param name="logDbType">로그가 작성될 시스템 입니다.</param>
            <param name="logDto">작성될 로그 내용입니다.</param>
        </member>
        <member name="T:HIE.Framework.Base.DBEnum">
            <summary>
            정보교류 시스템 에서 사용될 System 유형 입니다.
            <para>
            이 열거형은 Solution 에 따라 변경 될 수 있습니다.
            </para>
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DBEnum.DEFAULT">
            <summary>
            기본 System 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DBEnum.ATNA">
            <summary>
            ATNA System 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DBEnum.MPI">
            <summary>
            MPI System 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DBEnum.REGISTRY">
            <summary>
            Registry System 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DBEnum.REPOSITORY">
            <summary>
            Repository System 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DBEnum.DSUB">
            <summary>
            DSUB System 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DBEnum.CDA">
            <summary>
            CDA System 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DBEnum.RESULT_ANALYSIS">
            <summary>
            성과 모니터링 System 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DBEnum.PORTAL">
            <summary>
            Web Portal System 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DBEnum.FHIR">
            <summary>
            Fhir System 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DBEnum.HIE_LOG">
            <summary>
            정보교류 Log 시스템 입니다.
            </summary>
        </member>
        <member name="F:HIE.Framework.Base.DBEnum.USER_DEFINE">
            <summary>
            사용자 정의 System 입니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.GlobalConfiguration">
            <summary>
            GlobalConfiguration의 요약 설명입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.GlobalConfiguration.GetConfig">
            <summary>
            환경 설정 구성 정보를 반환합니다.
            </summary>    
            <returns><c>GlobalConfiguration</c> 인스턴스</returns>
        </member>
        <member name="P:HIE.Framework.Base.GlobalConfiguration.DatabaseGroup">
            <summary>
            데이터베이스 정보를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.GlobalConfiguration.OrmDBGroup">
            <summary>
            NHibernate ORM 데이터베이스 정보를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.GlobalConfiguration.LogGroup">
            <summary>
            로그 정보를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.GlobalConfiguration.CryptoGroup">
            <summary>
            암호화 정보를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.LogManager">
            <summary>
            서브 시스템 내에서 로그를 기록하기 위한 텍스트 파일 기반 로그 기록기를 제공하는 유틸리티 클래스입니다.
            </summary>
            <remarks>
            싱글톤으로 구성되어 로드시 하나의 객체만 생성을 보장합니다.
            </remarks>
        </member>
        <member name="M:HIE.Framework.Base.LogManager.#ctor">
            <summary>
            기본 생성자입니다.
            클라이언트는 직접 LogManager 객체를 생성자를 이용하여 생성할 수 없습니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.LogManager.Log(System.String,HIE.Framework.Diagnostics.Log.LogType)">
            <summary>
            로그를 기록합니다.
            </summary>
            <param name="message">로그 정보 입니다.</param>
            <param name="type">로그 타입 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.LogManager.Log(HIE.Framework.Diagnostics.Log.LogMessage,HIE.Framework.Diagnostics.Log.LogType)">
            <summary>
            로그를 기록합니다.
            </summary>
            <param name="msg">로그 메시지 입니다.</param>
            <param name="type">로그 타입 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.LogManager.Log(System.Exception)">
            <summary>
            로그를 기록합니다.       
            </summary>
            <param name="e">예외 클래스의 인스턴스</param>
        </member>
        <member name="M:HIE.Framework.Base.LogManager.DBErrLog(HIE.Framework.Data.ExcuteFailureEventArgs)">
            <summary>
            DB 오류가 발생한 경우의 로그를 기록 합니다.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:HIE.Framework.Base.LogManager.CustomLog(System.String,System.String)">
            <summary>
            별도의 포맷 없이 파일 내용을 작성 합니다.
            </summary>
            <param name="message">파일에 추가될 내용 입니다.</param>
            <param name="absolutePath">파일의 full 경로 입니다.
            <para>절대경로로 작성 되어야 합니다. (ex : C:\....\....)</para>
            </param>
        </member>
        <member name="M:HIE.Framework.Base.LogManager.Close">
            <summary>
            로그를 기록하기 위한 모든 리소스를 해지합니다.
            <c>Close</c> 메소드가 호출된 후에는 <c>Log</c> 메소드가 동작하지 않습니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.LogManager.Instance">
            <summary>
            LogManager 인스턴스를 가져옵니다.
            </summary>
        </member>
        <member name="P:HIE.Framework.Base.LogManager.FileLogRepositoryPath">
            <summary>
            파일 로그의 기본 경로를 가져옵니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.Log4NetManager">
            <summary>
            서브 시스템 내에서 로그를 기록하기 위한 log4net 기반 로그 기록기를 제공하는 유틸리티 클래스입니다.
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.SystemLog(HIE.Framework.LoggingLevel,System.String)">
            <summary>
            시스템 로그를 기록 합니다.
            </summary>
            <param name="loggingLevel">기록하기 위한 로그 레벨 입니다.</param>
            <param name="message">로그 메시지 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.SystemLog(HIE.Framework.LoggingLevel,HIE.Framework.Diagnostics.Log.LogMessage)">
            <summary>
            시스템 로그를 기록 합니다.
            </summary>
            <param name="loggingLevel">기록하기 위한 로그 레벨 입니다.</param>
            <param name="message">로그 메시지 컬렉션 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.SystemLog(System.Exception)">
            <summary>
            시스템 로그를 기록 합니다.
            </summary>
            <param name="e">예외 클래스의 인스턴스 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.DBErrorLog(HIE.Framework.Data.ExcuteFailureEventArgs)">
            <summary>
            DB 오류가 발생한 경우의 로그를 기록 합니다.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.CustomLog(HIE.Framework.LoggingLevel,System.String)">
            <summary>
            사용자 정의 로그를 기록합니다.
            </summary>
            <param name="loggingLevel">기록하기 위한 로그 레벨 입니다.</param>
            <param name="message">로그 메시지 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.CustomLog(System.String,HIE.Framework.LoggingLevel,System.String)">
            <summary>
            사용자 정의 로그를 기록합니다.
            </summary>
            <param name="logName">사용되는 log4net Appender 의 이름 입니다.</param>
            <param name="loggingLevel">기록하기 위한 로그 레벨 입니다.</param>
            <param name="message">로그 메시지 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.CustomLog(HIE.Framework.LoggingLevel,System.String,System.Object)">
            <summary>
            사용자 정의 로그를 기록합니다.
            </summary>
            <param name="loggingLevel">기록하기 위한 로그 레벨 입니다.</param>
            <param name="message">로그 메시지 입니다.</param>
            <param name="loggingAttributes">기본 log4net 로그 작성시 추가 되는 사용자 정의 Attributes 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.CustomLog(System.String,HIE.Framework.LoggingLevel,System.String,System.Object)">
            <summary>
            사용자 정의 로그를 기록합니다.
            </summary>
            <param name="logName">사용되는 log4net Appender 의 이름 입니다.</param>
            <param name="loggingLevel">기록하기 위한 로그 레벨 입니다.</param>
            <param name="message">로그 메시지 입니다.</param>
            <param name="loggingAttributes">기본 log4net 로그 작성시 추가 되는 사용자 정의 Attributes 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.CustomLog(HIE.Framework.LoggingLevel,HIE.Framework.Diagnostics.Log.LogMessage,System.Object)">
            <summary>
            사용자 정의 로그를 기록 합니다.
            </summary>
            <param name="loggingLevel">기록하기 위한 로그 레벨 입니다.</param>
            <param name="message">로그 메시지 컬렉션 입니다.</param>
            <param name="loggingAttributes">기본 log4net 로그 작성시 추가 되는 사용자 정의 Attributes 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.CustomLog(System.String,HIE.Framework.LoggingLevel,HIE.Framework.Diagnostics.Log.LogMessage,System.Object)">
            <summary>
            사용자 정의 로그를 기록 합니다.
            </summary>
            <param name="logName">사용되는 log4net Appender 의 이름 입니다.</param>
            <param name="loggingLevel">기록하기 위한 로그 레벨 입니다.</param>
            <param name="message">로그 메시지 컬렉션 입니다.</param>
            <param name="loggingAttributes">기본 log4net 로그 작성시 추가 되는 사용자 정의 Attributes 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.CustomLog(System.Exception,System.Object)">
            <summary>
            사용자 정의 Exception 로그를 기록 합니다.
            </summary>
            <param name="e">예외 클래스의 인스턴스 입니다.</param>
            <param name="loggingAttributes">기본 log4net 로그 작성시 추가 되는 사용자 정의 Attributes 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.CustomLog(System.Exception,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="message"></param>
            <param name="loggingAttributes"></param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.CustomLog(System.String,System.Exception,System.Object)">
            <summary>
            사용자 정의 Exception 로그를 기록 합니다.
            </summary>
            <param name="logName">로그가 작성될 로그명 입니다.</param>
            <param name="e">예외 클래스의 인스턴스 입니다.</param>
            <param name="loggingAttributes">기본 log4net 로그 작성시 추가 되는 사용자 정의 Attributes 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.CustomLog(System.String,System.Exception,System.String,System.Object)">
            <summary>
            사용자 정의 Exception 로그를 기록 합니다.
            </summary>
            <param name="logName">로그가 작성될 로그명 입니다.</param>
            <param name="e">예외 클래스의 인스턴스 입니다.</param>
            <param name="message">예외 에 대한 별도 메시지 입니다.</param>
            <param name="loggingAttributes">기본 log4net 로그 작성시 추가 되는 사용자 정의 Attributes 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.CustomLog(System.String,System.Exception,HIE.Framework.Diagnostics.Log.LogMessage,System.Object)">
            <summary>
            사용자 정의 Exception 로그를 기록 합니다.
            </summary>
            <param name="logName">로그가 작성될 로그명 입니다.</param>
            <param name="e">예외 클래스의 인스턴스 입니다.</param>
            <param name="message">예외 에 대한 별도 메시지 개체 입니다.</param>
            <param name="loggingAttributes">기본 log4net 로그 작성시 추가 되는 사용자 정의 Attributes 입니다.</param>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.GetClientIP">
            <summary>
            네트워크에 접속한 Client 의 IP 를 가져옵니다.
            </summary>
            <returns>client IP 입니다.</returns>
        </member>
        <member name="M:HIE.Framework.Base.Log4NetManager.ConvertInt32ToLoggingLevel(System.Int32)">
            <summary>
            int32 값을 HIE.Framework.LoggingLevel 열거형으로 반환 합니다.
            </summary>
            <param name="level">로그 레벨로 변환될 int32 입니다.
            <para>
            0=Debug, 1=Info, 2=Warning, 3=Error, 4=Fatal, 4이상=Error
            </para>
            </param>
            <returns>로그 레벨 입니다.</returns>
        </member>
        <member name="P:HIE.Framework.Base.Log4NetManager.DefaultAttributes">
            <summary>
            기본 log4Net 로그 작성시 추가되는 사용자 정의 Attribute 를 가져옵니다.
            </summary>
        </member>
        <member name="T:HIE.Framework.Base.ResourceFactory">
            <summary>
            ResourceFactory : Button 에 할당되는 ResourceManager 액세스 제공
            </summary>
        </member>
        <member name="M:HIE.Framework.Base.ResourceFactory.ButtonRManager(System.String)">
            <summary>
            문화권 별 리소스를 반환 하는 메소드 입니다.
            </summary>
            <param name="assemblyName">반환할 리소스의 어셈블리 명 입니다.
            <para>
            해당 어셈블리의 namespace 부터 class 명 까지 입니다.
            </para>
            </param>
            <returns>리소스에 액세스 할 수 있는 ResourceManager 입니다.</returns>
        </member>
    </members>
</doc>
